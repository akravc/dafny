// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out1;
      _out1 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out1;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
          i = _in0;
          goto TAIL_CALL_START;
        } else {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
          i = _in1;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> body;
      Dafny.ISequence<Dafny.Rune> _out2;
      _out2 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      body = _out2;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger i;
      i = BigInteger.Zero;
      while ((i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source0 = (body).Select(i);
        if (_source0.is_Module) {
          DAST._IModule __mcc_h0 = _source0.dtor_Module_a0;
          DAST._IModule m = __mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = DCOMP.COMP.GenModule(m, containingPath);
          generated = _out3;
        } else if (_source0.is_Class) {
          DAST._IClass _10___mcc_h1 = _source0.dtor_Class_a0;
          DAST._IClass _11_c = _10___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenClass(_11_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_11_c).dtor_name)));
          generated = _out4;
        } else if (_source0.is_Trait) {
          DAST._ITrait _12___mcc_h2 = _source0.dtor_Trait_a0;
          DAST._ITrait _13_t = _12___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenTrait(_13_t, containingPath);
          generated = _out5;
        } else if (_source0.is_Newtype) {
          DAST._INewtype _14___mcc_h3 = _source0.dtor_Newtype_a0;
          DAST._INewtype _15_n = _14___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenNewtype(_15_n);
          generated = _out6;
        } else {
          DAST._IDatatype _16___mcc_h4 = _source0.dtor_Datatype_a0;
          DAST._IDatatype _17_d = _16___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out7;
          _out7 = DCOMP.COMP.GenDatatype(_17_d);
          generated = _out7;
        }
        if ((i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, generated);
        i = (i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _18_tpI;
      _18_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_18_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _19_tp;
          _19_tp = (@params).Select(_18_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_19_tp));
          Dafny.ISequence<Dafny.Rune> _20_genTp;
          Dafny.ISequence<Dafny.Rune> _out8;
          _out8 = DCOMP.COMP.GenType(_19_tp, false, false);
          _20_genTp = _out8;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _21_baseConstraints;
          _21_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _20_genTp), _21_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _20_genTp), _21_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _20_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _18_tpI = (_18_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _22_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _23_typeParams;
      Dafny.ISequence<Dafny.Rune> _24_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _25_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _26_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _27_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _28_erasedParams;
      Dafny.ISet<DAST._IType> _out9;
      Dafny.ISequence<Dafny.Rune> _out10;
      Dafny.ISequence<Dafny.Rune> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.Rune> _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Dafny.ISequence<Dafny.Rune> _out15;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out9, out _out10, out _out11, out _out12, out _out13, out _out14, out _out15);
      _22_typeParamsSet = _out9;
      _23_typeParams = _out10;
      _24_constrainedTypeParams = _out11;
      _25_whereConstraints = _out12;
      _26_constrainedEraseParams = _out13;
      _27_unerasedParams = _out14;
      _28_erasedParams = _out15;
      Dafny.ISequence<Dafny.Rune> _29_fields;
      _29_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _30_fieldInits;
      _30_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _31_fieldI;
      _31_fieldI = BigInteger.Zero;
      while ((_31_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _32_field;
        _32_field = ((c).dtor_fields).Select(_31_fieldI);
        Dafny.ISequence<Dafny.Rune> _33_fieldType;
        Dafny.ISequence<Dafny.Rune> _out16;
        _out16 = DCOMP.COMP.GenType(((_32_field).dtor_formal).dtor_typ, false, false);
        _33_fieldType = _out16;
        _29_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_29_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _33_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source1 = (_32_field).dtor_defaultValue;
        if (_source1.is_Some) {
          DAST._IExpression _34___mcc_h0 = _source1.dtor_Some_a0;
          DAST._IExpression _35_e = _34___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _36_eStr;
            bool _37___v1;
            bool _38___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _39___v3;
            Dafny.ISequence<Dafny.Rune> _out17;
            bool _out18;
            bool _out19;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out20;
            DCOMP.COMP.GenExpr(_35_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out17, out _out18, out _out19, out _out20);
            _36_eStr = _out17;
            _37___v1 = _out18;
            _38___v2 = _out19;
            _39___v3 = _out20;
            _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _36_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, DCOMP.__default.escapeIdent(((_32_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _31_fieldI = (_31_fieldI) + (BigInteger.One);
      }
      BigInteger _40_typeParamI;
      _40_typeParamI = BigInteger.Zero;
      while ((_40_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _41_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out21;
        _out21 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_40_typeParamI), false, false);
        _41_tpeGen = _out21;
        _29_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_29_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_40_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _41_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _30_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_30_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_40_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _40_typeParamI = (_40_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _29_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _42_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _43_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out23;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _22_typeParamsSet, out _out22, out _out23);
      _42_implBody = _out22;
      _43_traitBodies = _out23;
      _42_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _30_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _42_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _42_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _44_i;
        _44_i = BigInteger.Zero;
        while ((_44_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _45_superClass;
          _45_superClass = ((c).dtor_superClasses).Select(_44_i);
          DAST._IType _source2 = _45_superClass;
          if (_source2.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _46___mcc_h1 = _source2.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _47___mcc_h2 = _source2.dtor_typeArgs;
            DAST._IResolvedType _48___mcc_h3 = _source2.dtor_resolved;
            DAST._IResolvedType _source3 = _48___mcc_h3;
            if (_source3.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _49___mcc_h7 = _source3.dtor_path;
            } else if (_source3.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _50___mcc_h9 = _source3.dtor_path;
              Dafny.ISequence<DAST._IType> _51_typeArgs = _47___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _52_traitPath = _46___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _53_pathStr;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(_52_traitPath);
                _53_pathStr = _out24;
                Dafny.ISequence<Dafny.Rune> _54_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out25;
                _out25 = DCOMP.COMP.GenTypeArgs(_51_typeArgs, false, false);
                _54_typeArgs = _out25;
                Dafny.ISequence<Dafny.Rune> _55_body;
                _55_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_43_traitBodies).Contains(_52_traitPath)) {
                  _55_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_43_traitBodies, _52_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _56_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out26;
                _out26 = DCOMP.COMP.GenPath(path);
                _56_genSelfPath = _out26;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _24_constrainedTypeParams), _53_pathStr), _54_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _56_genSelfPath), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _55_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _57___mcc_h11 = _source3.dtor_Newtype_a0;
            }
          } else if (_source2.is_Nullable) {
            DAST._IType _58___mcc_h13 = _source2.dtor_Nullable_a0;
          } else if (_source2.is_Tuple) {
            Dafny.ISequence<DAST._IType> _59___mcc_h15 = _source2.dtor_Tuple_a0;
          } else if (_source2.is_Array) {
            DAST._IType _60___mcc_h17 = _source2.dtor_element;
            BigInteger _61___mcc_h18 = _source2.dtor_dims;
          } else if (_source2.is_Seq) {
            DAST._IType _62___mcc_h21 = _source2.dtor_element;
          } else if (_source2.is_Set) {
            DAST._IType _63___mcc_h23 = _source2.dtor_element;
          } else if (_source2.is_Multiset) {
            DAST._IType _64___mcc_h25 = _source2.dtor_element;
          } else if (_source2.is_Map) {
            DAST._IType _65___mcc_h27 = _source2.dtor_key;
            DAST._IType _66___mcc_h28 = _source2.dtor_value;
          } else if (_source2.is_Arrow) {
            Dafny.ISequence<DAST._IType> _67___mcc_h31 = _source2.dtor_args;
            DAST._IType _68___mcc_h32 = _source2.dtor_result;
          } else if (_source2.is_Primitive) {
            DAST._IPrimitive _69___mcc_h35 = _source2.dtor_Primitive_a0;
          } else if (_source2.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _70___mcc_h37 = _source2.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _71___mcc_h39 = _source2.dtor_TypeArg_a0;
          }
          _44_i = (_44_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _72_defaultImpl;
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), _25_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _72_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_72_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _73_printImpl;
      _73_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _73_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_73_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _74_ptrPartialEqImpl;
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _74_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_74_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _75_identEraseImpls;
      _75_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _24_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _28_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _75_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_75_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _26_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _27_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _23_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _72_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _73_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _74_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _75_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _76_typeParamsSet;
      _76_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _77_typeParams;
      _77_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _78_tpI;
      _78_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _77_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_78_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _79_tp;
          _79_tp = ((t).dtor_typeParams).Select(_78_tpI);
          _76_typeParamsSet = Dafny.Set<DAST._IType>.Union(_76_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_79_tp));
          Dafny.ISequence<Dafny.Rune> _80_genTp;
          Dafny.ISequence<Dafny.Rune> _out27;
          _out27 = DCOMP.COMP.GenType(_79_tp, false, false);
          _80_genTp = _out27;
          _77_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_77_typeParams, _80_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _78_tpI = (_78_tpI) + (BigInteger.One);
        }
        _77_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_77_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _81_fullPath;
      _81_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _82_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _83___v6;
      Dafny.ISequence<Dafny.Rune> _out28;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out29;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_81_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_81_fullPath)), _76_typeParamsSet, out _out28, out _out29);
      _82_implBody = _out28;
      _83___v6 = _out29;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _77_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _82_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _84_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _85_typeParams;
      Dafny.ISequence<Dafny.Rune> _86_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _87_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _88___v7;
      Dafny.ISequence<Dafny.Rune> _89___v8;
      Dafny.ISequence<Dafny.Rune> _90___v9;
      Dafny.ISet<DAST._IType> _out30;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.ISequence<Dafny.Rune> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.Rune> _out34;
      Dafny.ISequence<Dafny.Rune> _out35;
      Dafny.ISequence<Dafny.Rune> _out36;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out30, out _out31, out _out32, out _out33, out _out34, out _out35, out _out36);
      _84_typeParamsSet = _out30;
      _85_typeParams = _out31;
      _86_constrainedTypeParams = _out32;
      _87_whereConstraints = _out33;
      _88___v7 = _out34;
      _89___v8 = _out35;
      _90___v9 = _out36;
      Dafny.ISequence<Dafny.Rune> _91_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out37;
      _out37 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _91_underlyingType = _out37;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), _87_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source4 = (c).dtor_witnessExpr;
      if (_source4.is_Some) {
        DAST._IExpression _92___mcc_h0 = _source4.dtor_Some_a0;
        DAST._IExpression _93_e = _92___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _94_eStr;
          bool _95___v10;
          bool _96___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _97___v12;
          Dafny.ISequence<Dafny.Rune> _out38;
          bool _out39;
          bool _out40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out41;
          DCOMP.COMP.GenExpr(_93_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out38, out _out39, out _out40, out _out41);
          _94_eStr = _out38;
          _95___v10 = _out39;
          _96___v11 = _out40;
          _97___v12 = _out41;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _94_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _86_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _85_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _91_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _98_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _99_typeParams;
      Dafny.ISequence<Dafny.Rune> _100_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _101_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _102_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _103_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _104_erasedParams;
      Dafny.ISet<DAST._IType> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out42, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48);
      _98_typeParamsSet = _out42;
      _99_typeParams = _out43;
      _100_constrainedTypeParams = _out44;
      _101_whereConstraints = _out45;
      _102_constrainedEraseParams = _out46;
      _103_unerasedParams = _out47;
      _104_erasedParams = _out48;
      Dafny.ISequence<Dafny.Rune> _105_ctors;
      _105_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _106_i;
      _106_i = BigInteger.Zero;
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _107_ctor;
        _107_ctor = ((c).dtor_ctors).Select(_106_i);
        Dafny.ISequence<Dafny.Rune> _108_ctorBody;
        _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_107_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _109_j;
        _109_j = BigInteger.Zero;
        while ((_109_j) < (new BigInteger(((_107_ctor).dtor_args).Count))) {
          DAST._IFormal _110_formal;
          _110_formal = ((_107_ctor).dtor_args).Select(_109_j);
          Dafny.ISequence<Dafny.Rune> _111_formalType;
          Dafny.ISequence<Dafny.Rune> _out49;
          _out49 = DCOMP.COMP.GenType((_110_formal).dtor_typ, false, false);
          _111_formalType = _out49;
          if ((c).dtor_isCo) {
            _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, DCOMP.__default.escapeIdent((_110_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _111_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, DCOMP.__default.escapeIdent((_110_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _111_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _109_j = (_109_j) + (BigInteger.One);
        }
        _108_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_108_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, _108_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _106_i = (_106_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _112_selfPath;
      _112_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _113_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _114_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out51;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_112_selfPath)), _98_typeParamsSet, out _out50, out _out51);
      _113_implBody = _out50;
      _114_traitBodies = _out51;
      _106_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _115_emittedFields;
      _115_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _116_ctor;
        _116_ctor = ((c).dtor_ctors).Select(_106_i);
        BigInteger _117_j;
        _117_j = BigInteger.Zero;
        while ((_117_j) < (new BigInteger(((_116_ctor).dtor_args).Count))) {
          DAST._IFormal _118_formal;
          _118_formal = ((_116_ctor).dtor_args).Select(_117_j);
          if (!((_115_emittedFields).Contains((_118_formal).dtor_name))) {
            _115_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_115_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_118_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _119_formalType;
            Dafny.ISequence<Dafny.Rune> _out52;
            _out52 = DCOMP.COMP.GenType((_118_formal).dtor_typ, false, false);
            _119_formalType = _out52;
            Dafny.ISequence<Dafny.Rune> _120_methodBody;
            _120_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _121_k;
            _121_k = BigInteger.Zero;
            while ((_121_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _122_ctor2;
              _122_ctor2 = ((c).dtor_ctors).Select(_121_k);
              Dafny.ISequence<Dafny.Rune> _123_ctorMatch;
              _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_122_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _124_l;
              _124_l = BigInteger.Zero;
              bool _125_hasMatchingField;
              _125_hasMatchingField = false;
              while ((_124_l) < (new BigInteger(((_122_ctor2).dtor_args).Count))) {
                DAST._IFormal _126_formal2;
                _126_formal2 = ((_122_ctor2).dtor_args).Select(_124_l);
                if (((_118_formal).dtor_name).Equals((_126_formal2).dtor_name)) {
                  _125_hasMatchingField = true;
                }
                _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, DCOMP.__default.escapeIdent((_126_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _124_l = (_124_l) + (BigInteger.One);
              }
              if (_125_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _123_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_123_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, _123_ctorMatch);
              _121_k = (_121_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _120_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_120_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _113_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_113_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_118_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _119_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _120_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _117_j = (_117_j) + (BigInteger.One);
        }
        _106_i = (_106_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _127_typeI;
        _127_typeI = BigInteger.Zero;
        while ((_127_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_127_typeI).Sign == 1) {
            _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _128_genTp;
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_127_typeI), false, false);
          _128_genTp = _out53;
          _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _128_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _127_typeI = (_127_typeI) + (BigInteger.One);
        }
        _105_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_105_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _129_enumBody;
      _129_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _105_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), _101_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _113_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _130_identEraseImpls;
      _130_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _104_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _130_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_130_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _102_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _103_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _131_printImpl;
      _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _106_i = BigInteger.Zero;
      while ((_106_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _132_ctor;
        _132_ctor = ((c).dtor_ctors).Select(_106_i);
        Dafny.ISequence<Dafny.Rune> _133_ctorMatch;
        _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_132_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _134_modulePrefix;
        _134_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _135_printRhs;
        _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _134_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_132_ctor).dtor_name), (((_132_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _136_j;
        _136_j = BigInteger.Zero;
        while ((_136_j) < (new BigInteger(((_132_ctor).dtor_args).Count))) {
          DAST._IFormal _137_formal;
          _137_formal = ((_132_ctor).dtor_args).Select(_136_j);
          _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_133_ctorMatch, DCOMP.__default.escapeIdent((_137_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_136_j).Sign == 1) {
            _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_137_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _136_j = (_136_j) + (BigInteger.One);
        }
        _133_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_133_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_132_ctor).dtor_hasAnyArgs) {
          _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _135_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_135_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _133_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _135_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _106_i = (_106_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _131_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_131_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _138_defaultImpl;
      _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _100_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _99_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _106_i = BigInteger.Zero;
        while ((_106_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _139_formal;
          _139_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_106_i);
          _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_138_defaultImpl, DCOMP.__default.escapeIdent((_139_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _106_i = (_106_i) + (BigInteger.One);
        }
        _138_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_138_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_129_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _130_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _131_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _138_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _140_i;
        _140_i = BigInteger.Zero;
        while ((_140_i) < (new BigInteger((p).Count))) {
          if ((_140_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_140_i))));
          _140_i = (_140_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _141_i;
        _141_i = BigInteger.Zero;
        while ((_141_i) < (new BigInteger((args).Count))) {
          if ((_141_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _142_genTp;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenType((args).Select(_141_i), inBinding, inFn);
          _142_genTp = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _142_genTp);
          _141_i = (_141_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source5 = c;
      if (_source5.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _143___mcc_h0 = _source5.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _144___mcc_h1 = _source5.dtor_typeArgs;
        DAST._IResolvedType _145___mcc_h2 = _source5.dtor_resolved;
        DAST._IResolvedType _146_resolved = _145___mcc_h2;
        Dafny.ISequence<DAST._IType> _147_args = _144___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _148_p = _143___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out55;
        _out55 = DCOMP.COMP.GenPath(_148_p);
        s = _out55;
        Dafny.ISequence<Dafny.Rune> _149_typeArgs;
        Dafny.ISequence<Dafny.Rune> _out56;
        _out56 = DCOMP.COMP.GenTypeArgs(_147_args, inBinding, inFn);
        _149_typeArgs = _out56;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _149_typeArgs);
        DAST._IResolvedType _source6 = _146_resolved;
        if (_source6.is_Datatype) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _150___mcc_h18 = _source6.dtor_path;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        } else if (_source6.is_Trait) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _151___mcc_h20 = _source6.dtor_path;
          if ((_148_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
          } else {
            if (inBinding) {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
            }
          }
        } else {
          DAST._IType _152___mcc_h22 = _source6.dtor_Newtype_a0;
        }
      } else if (_source5.is_Nullable) {
        DAST._IType _153___mcc_h3 = _source5.dtor_Nullable_a0;
        DAST._IType _154_inner = _153___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _155_innerStr;
        Dafny.ISequence<Dafny.Rune> _out57;
        _out57 = DCOMP.COMP.GenType(_154_inner, inBinding, inFn);
        _155_innerStr = _out57;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _155_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Tuple) {
        Dafny.ISequence<DAST._IType> _156___mcc_h4 = _source5.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _157_types = _156___mcc_h4;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
        BigInteger _hi0 = new BigInteger((_157_types).Count);
        for (BigInteger _158_i = BigInteger.Zero; _158_i < _hi0; _158_i++) {
          if ((_158_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
          }
          Dafny.ISequence<Dafny.Rune> _159_generated;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenType((_157_types).Select(_158_i), inBinding, inFn);
          _159_generated = _out58;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _159_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source5.is_Array) {
        DAST._IType _160___mcc_h5 = _source5.dtor_element;
        BigInteger _161___mcc_h6 = _source5.dtor_dims;
        BigInteger _162_dims = _161___mcc_h6;
        DAST._IType _163_element = _160___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _164_elemStr;
        Dafny.ISequence<Dafny.Rune> _out59;
        _out59 = DCOMP.COMP.GenType(_163_element, inBinding, inFn);
        _164_elemStr = _out59;
        s = _164_elemStr;
        BigInteger _hi1 = _162_dims;
        for (BigInteger _165_i = BigInteger.Zero; _165_i < _hi1; _165_i++) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
        }
      } else if (_source5.is_Seq) {
        DAST._IType _166___mcc_h7 = _source5.dtor_element;
        DAST._IType _167_element = _166___mcc_h7;
        Dafny.ISequence<Dafny.Rune> _168_elemStr;
        Dafny.ISequence<Dafny.Rune> _out60;
        _out60 = DCOMP.COMP.GenType(_167_element, inBinding, inFn);
        _168_elemStr = _out60;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _168_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Set) {
        DAST._IType _169___mcc_h8 = _source5.dtor_element;
        DAST._IType _170_element = _169___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _171_elemStr;
        Dafny.ISequence<Dafny.Rune> _out61;
        _out61 = DCOMP.COMP.GenType(_170_element, inBinding, inFn);
        _171_elemStr = _out61;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _171_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Multiset) {
        DAST._IType _172___mcc_h9 = _source5.dtor_element;
        DAST._IType _173_element = _172___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _174_elemStr;
        Dafny.ISequence<Dafny.Rune> _out62;
        _out62 = DCOMP.COMP.GenType(_173_element, inBinding, inFn);
        _174_elemStr = _out62;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _174_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
      } else if (_source5.is_Map) {
        DAST._IType _175___mcc_h10 = _source5.dtor_key;
        DAST._IType _176___mcc_h11 = _source5.dtor_value;
        DAST._IType _177_value = _176___mcc_h11;
        DAST._IType _178_key = _175___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _179_keyStr;
        Dafny.ISequence<Dafny.Rune> _out63;
        _out63 = DCOMP.COMP.GenType(_178_key, inBinding, inFn);
        _179_keyStr = _out63;
        Dafny.ISequence<Dafny.Rune> _180_valueStr;
        Dafny.ISequence<Dafny.Rune> _out64;
        _out64 = DCOMP.COMP.GenType(_177_value, inBinding, inFn);
        _180_valueStr = _out64;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _179_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _180_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source5.is_Arrow) {
        Dafny.ISequence<DAST._IType> _181___mcc_h12 = _source5.dtor_args;
        DAST._IType _182___mcc_h13 = _source5.dtor_result;
        DAST._IType _183_result = _182___mcc_h13;
        Dafny.ISequence<DAST._IType> _184_args = _181___mcc_h12;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
        BigInteger _hi2 = new BigInteger((_184_args).Count);
        for (BigInteger _185_i = BigInteger.Zero; _185_i < _hi2; _185_i++) {
          if ((_185_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _186_generated;
          Dafny.ISequence<Dafny.Rune> _out65;
          _out65 = DCOMP.COMP.GenType((_184_args).Select(_185_i), inBinding, true);
          _186_generated = _out65;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _186_generated);
        }
        Dafny.ISequence<Dafny.Rune> _187_resultType;
        Dafny.ISequence<Dafny.Rune> _out66;
        _out66 = DCOMP.COMP.GenType(_183_result, inBinding, (inFn) || (inBinding));
        _187_resultType = _out66;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _187_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
      } else if (_source5.is_Primitive) {
        DAST._IPrimitive _188___mcc_h14 = _source5.dtor_Primitive_a0;
        DAST._IPrimitive _189_p = _188___mcc_h14;
        DAST._IPrimitive _source7 = _189_p;
        if (_source7.is_Int) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
        } else if (_source7.is_Real) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
        } else if (_source7.is_String) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
        } else if (_source7.is_Bool) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
        } else {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
        }
      } else if (_source5.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _190___mcc_h15 = _source5.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _191_v = _190___mcc_h15;
        s = _191_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _192___mcc_h16 = _source5.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source8 = _192___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _193___mcc_h17 = _source8;
        Dafny.ISequence<Dafny.Rune> _194_name = _193___mcc_h17;
        s = DCOMP.__default.escapeIdent(_194_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _195_i;
      _195_i = BigInteger.Zero;
      while ((_195_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source9 = (body).Select(_195_i);
        DAST._IMethod _196___mcc_h0 = _source9;
        DAST._IMethod _197_m = _196___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source10 = (_197_m).dtor_overridingPath;
          if (_source10.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _198___mcc_h1 = _source10.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _199_p = _198___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _200_existing;
              _200_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_199_p)) {
                _200_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _199_p);
              }
              if ((new BigInteger((_200_existing).Count)).Sign == 1) {
                _200_existing = Dafny.Sequence<Dafny.Rune>.Concat(_200_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _201_genMethod;
              Dafny.ISequence<Dafny.Rune> _out67;
              _out67 = DCOMP.COMP.GenMethod(_197_m, true, enclosingType, enclosingTypeParams);
              _201_genMethod = _out67;
              _200_existing = Dafny.Sequence<Dafny.Rune>.Concat(_200_existing, _201_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_199_p, _200_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _202_generated;
              Dafny.ISequence<Dafny.Rune> _out68;
              _out68 = DCOMP.COMP.GenMethod(_197_m, forTrait, enclosingType, enclosingTypeParams);
              _202_generated = _out68;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _202_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _195_i = (_195_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _203_i;
      _203_i = BigInteger.Zero;
      while ((_203_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _204_param;
        _204_param = (@params).Select(_203_i);
        Dafny.ISequence<Dafny.Rune> _205_paramType;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenType((_204_param).dtor_typ, false, false);
        _205_paramType = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_204_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _205_paramType);
        if ((_203_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _203_i = (_203_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _206_params;
      Dafny.ISequence<Dafny.Rune> _out70;
      _out70 = DCOMP.COMP.GenParams((m).dtor_params);
      _206_params = _out70;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _207_paramNames;
      _207_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _208_paramI;
      _208_paramI = BigInteger.Zero;
      while ((_208_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _207_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_207_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_208_paramI)).dtor_name));
        _208_paramI = (_208_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _206_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _206_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _209_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(enclosingType, false, false);
          _209_enclosingTypeString = _out71;
          _206_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _209_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _206_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _210_retType;
      _210_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _211_typeI;
      _211_typeI = BigInteger.Zero;
      while ((_211_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_211_typeI).Sign == 1) {
          _210_retType = Dafny.Sequence<Dafny.Rune>.Concat(_210_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _212_typeString;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_211_typeI), false, false);
        _212_typeString = _out72;
        _210_retType = Dafny.Sequence<Dafny.Rune>.Concat(_210_retType, _212_typeString);
        _211_typeI = (_211_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _210_retType = Dafny.Sequence<Dafny.Rune>.Concat(_210_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _213_typeParamsFiltered;
      _213_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _214_typeParamI;
      _214_typeParamI = BigInteger.Zero;
      while ((_214_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _215_typeParam;
        _215_typeParam = ((m).dtor_typeParams).Select(_214_typeParamI);
        if (!((enclosingTypeParams).Contains(_215_typeParam))) {
          _213_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_213_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_215_typeParam));
        }
        _214_typeParamI = (_214_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _216_whereClauses;
      _216_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_213_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _216_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_216_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _217_i;
        _217_i = BigInteger.Zero;
        while ((_217_i) < (new BigInteger((_213_typeParamsFiltered).Count))) {
          if ((_217_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _216_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_216_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _218_typeString;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType((_213_typeParamsFiltered).Select(_217_i), false, false);
          _218_typeString = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _218_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _218_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _216_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_216_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _218_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _217_i = (_217_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _206_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _210_retType), _216_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _219_earlyReturn;
        _219_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (m).dtor_outVars;
        if (_source11.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _220___mcc_h0 = _source11.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _221_outVars = _220___mcc_h0;
          {
            _219_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _222_outI;
            _222_outI = BigInteger.Zero;
            while ((_222_outI) < (new BigInteger((_221_outVars).Count))) {
              if ((_222_outI).Sign == 1) {
                _219_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_219_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _223_outVar;
              _223_outVar = (_221_outVars).Select(_222_outI);
              _219_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_219_earlyReturn, DCOMP.__default.escapeIdent((_223_outVar)));
              _222_outI = (_222_outI) + (BigInteger.One);
            }
            _219_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_219_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _224_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _225___v15;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _207_paramNames, true, _219_earlyReturn, out _out74, out _out75);
        _224_body = _out74;
        _225___v15 = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _224_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _226_declarations;
      _226_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _227_i;
      _227_i = BigInteger.Zero;
      while ((_227_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _228_stmt;
        _228_stmt = (stmts).Select(_227_i);
        Dafny.ISequence<Dafny.Rune> _229_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _230_recIdents;
        Dafny.ISequence<Dafny.Rune> _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmt(_228_stmt, selfIdent, @params, (isLast) && ((_227_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out76, out _out77);
        _229_stmtString = _out76;
        _230_recIdents = _out77;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_230_recIdents, _226_declarations));
        DAST._IStatement _source12 = _228_stmt;
        if (_source12.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _231___mcc_h0 = _source12.dtor_name;
          DAST._IType _232___mcc_h1 = _source12.dtor_typ;
          DAST._IOptional<DAST._IExpression> _233___mcc_h2 = _source12.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _234_name = _231___mcc_h0;
          {
            _226_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_226_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_234_name));
          }
        } else if (_source12.is_Assign) {
          DAST._IAssignLhs _235___mcc_h6 = _source12.dtor_lhs;
          DAST._IExpression _236___mcc_h7 = _source12.dtor_value;
        } else if (_source12.is_If) {
          DAST._IExpression _237___mcc_h10 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _238___mcc_h11 = _source12.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _239___mcc_h12 = _source12.dtor_els;
        } else if (_source12.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _240___mcc_h16 = _source12.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _241___mcc_h17 = _source12.dtor_body;
        } else if (_source12.is_While) {
          DAST._IExpression _242___mcc_h20 = _source12.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _243___mcc_h21 = _source12.dtor_body;
        } else if (_source12.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _244___mcc_h24 = _source12.dtor_boundName;
          DAST._IType _245___mcc_h25 = _source12.dtor_boundType;
          DAST._IExpression _246___mcc_h26 = _source12.dtor_over;
          Dafny.ISequence<DAST._IStatement> _247___mcc_h27 = _source12.dtor_body;
        } else if (_source12.is_Call) {
          DAST._IExpression _248___mcc_h32 = _source12.dtor_on;
          Dafny.ISequence<Dafny.Rune> _249___mcc_h33 = _source12.dtor_name;
          Dafny.ISequence<DAST._IType> _250___mcc_h34 = _source12.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _251___mcc_h35 = _source12.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _252___mcc_h36 = _source12.dtor_outs;
        } else if (_source12.is_Return) {
          DAST._IExpression _253___mcc_h42 = _source12.dtor_expr;
        } else if (_source12.is_EarlyReturn) {
        } else if (_source12.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _254___mcc_h44 = _source12.dtor_toLabel;
        } else if (_source12.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _255___mcc_h46 = _source12.dtor_body;
        } else if (_source12.is_JumpTailCallStart) {
        } else if (_source12.is_Halt) {
        } else {
          DAST._IExpression _256___mcc_h48 = _source12.dtor_Print_a0;
        }
        if ((_227_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _229_stmtString);
        _227_i = (_227_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source13 = lhs;
      if (_source13.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _257___mcc_h0 = _source13.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source14 = _257___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _258___mcc_h1 = _source14;
        Dafny.ISequence<Dafny.Rune> _259_id = _258___mcc_h1;
        {
          if ((@params).Contains(_259_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_259_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_259_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_259_id);
          needsIIFE = false;
        }
      } else if (_source13.is_Select) {
        DAST._IExpression _260___mcc_h2 = _source13.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _261___mcc_h3 = _source13.dtor_field;
        Dafny.ISequence<Dafny.Rune> _262_field = _261___mcc_h3;
        DAST._IExpression _263_on = _260___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _264_onExpr;
          bool _265_onOwned;
          bool _266_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _267_recIdents;
          Dafny.ISequence<Dafny.Rune> _out78;
          bool _out79;
          bool _out80;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out81;
          DCOMP.COMP.GenExpr(_263_on, selfIdent, @params, false, out _out78, out _out79, out _out80, out _out81);
          _264_onExpr = _out78;
          _265_onOwned = _out79;
          _266_onErased = _out80;
          _267_recIdents = _out81;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _264_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _262_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _267_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _268___mcc_h4 = _source13.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _269___mcc_h5 = _source13.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _270_indices = _269___mcc_h5;
        DAST._IExpression _271_on = _268___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _272_onExpr;
          bool _273_onOwned;
          bool _274_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _275_recIdents;
          Dafny.ISequence<Dafny.Rune> _out82;
          bool _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_271_on, selfIdent, @params, false, out _out82, out _out83, out _out84, out _out85);
          _272_onExpr = _out82;
          _273_onOwned = _out83;
          _274_onErased = _out84;
          _275_recIdents = _out85;
          readIdents = _275_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _276_i;
          _276_i = BigInteger.Zero;
          while ((_276_i) < (new BigInteger((_270_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _277_idx;
            bool _278___v19;
            bool _279_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _280_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr((_270_indices).Select(_276_i), selfIdent, @params, true, out _out86, out _out87, out _out88, out _out89);
            _277_idx = _out86;
            _278___v19 = _out87;
            _279_idxErased = _out88;
            _280_recIdentsIdx = _out89;
            if (!(_279_idxErased)) {
              _277_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _277_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_276_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _277_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _280_recIdentsIdx);
            _276_i = (_276_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _272_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _276_i = BigInteger.Zero;
          while ((_276_i) < (new BigInteger((_270_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_276_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _276_i = (_276_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source15 = stmt;
      if (_source15.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _281___mcc_h0 = _source15.dtor_name;
        DAST._IType _282___mcc_h1 = _source15.dtor_typ;
        DAST._IOptional<DAST._IExpression> _283___mcc_h2 = _source15.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source16 = _283___mcc_h2;
        if (_source16.is_Some) {
          DAST._IExpression _284___mcc_h3 = _source16.dtor_Some_a0;
          DAST._IExpression _285_expression = _284___mcc_h3;
          DAST._IType _286_typ = _282___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _287_name = _281___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _288_typeString;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType(_286_typ, true, false);
            _288_typeString = _out90;
            Dafny.ISequence<Dafny.Rune> _289_expr;
            bool _290___v20;
            bool _291_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _292_recIdents;
            Dafny.ISequence<Dafny.Rune> _out91;
            bool _out92;
            bool _out93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
            DCOMP.COMP.GenExpr(_285_expression, selfIdent, @params, true, out _out91, out _out92, out _out93, out _out94);
            _289_expr = _out91;
            _290___v20 = _out92;
            _291_recErased = _out93;
            _292_recIdents = _out94;
            if (!(_291_recErased)) {
              _289_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _289_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _289_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _288_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _289_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_287_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _288_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _289_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _292_recIdents;
          }
        } else {
          DAST._IType _293_typ = _282___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _294_name = _281___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _295_typeString;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType(_293_typ, true, false);
            _295_typeString = _out95;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_294_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _295_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source15.is_Assign) {
        DAST._IAssignLhs _296___mcc_h4 = _source15.dtor_lhs;
        DAST._IExpression _297___mcc_h5 = _source15.dtor_value;
        DAST._IExpression _298_expression = _297___mcc_h5;
        DAST._IAssignLhs _299_lhs = _296___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _300_lhsGen;
          bool _301_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _302_recIdents;
          Dafny.ISequence<Dafny.Rune> _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenAssignLhs(_299_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out96, out _out97, out _out98);
          _300_lhsGen = _out96;
          _301_needsIIFE = _out97;
          _302_recIdents = _out98;
          Dafny.ISequence<Dafny.Rune> _303_exprGen;
          bool _304___v21;
          bool _305_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _306_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out99;
          bool _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_298_expression, selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
          _303_exprGen = _out99;
          _304___v21 = _out100;
          _305_exprErased = _out101;
          _306_exprIdents = _out102;
          if (!(_305_exprErased)) {
            _303_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _303_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _303_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _303_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_301_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _303_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _300_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_300_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _303_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_302_recIdents, _306_exprIdents);
        }
      } else if (_source15.is_If) {
        DAST._IExpression _307___mcc_h6 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _308___mcc_h7 = _source15.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _309___mcc_h8 = _source15.dtor_els;
        Dafny.ISequence<DAST._IStatement> _310_els = _309___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _311_thn = _308___mcc_h7;
        DAST._IExpression _312_cond = _307___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _313_condString;
          bool _314___v22;
          bool _315_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _316_recIdents;
          Dafny.ISequence<Dafny.Rune> _out103;
          bool _out104;
          bool _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenExpr(_312_cond, selfIdent, @params, true, out _out103, out _out104, out _out105, out _out106);
          _313_condString = _out103;
          _314___v22 = _out104;
          _315_condErased = _out105;
          _316_recIdents = _out106;
          if (!(_315_condErased)) {
            _313_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _313_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _316_recIdents;
          Dafny.ISequence<Dafny.Rune> _317_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _318_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_311_thn, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _317_thnString = _out107;
          _318_thnIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _318_thnIdents);
          Dafny.ISequence<Dafny.Rune> _319_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _320_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_310_els, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _319_elsString = _out109;
          _320_elsIdents = _out110;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _320_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _313_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _317_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _319_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _321___mcc_h9 = _source15.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _322___mcc_h10 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _323_body = _322___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _324_lbl = _321___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _325_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _326_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
          DCOMP.COMP.GenStmts(_323_body, selfIdent, @params, isLast, earlyReturn, out _out111, out _out112);
          _325_bodyString = _out111;
          _326_bodyIdents = _out112;
          readIdents = _326_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _324_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _325_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_While) {
        DAST._IExpression _327___mcc_h11 = _source15.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _328___mcc_h12 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _329_body = _328___mcc_h12;
        DAST._IExpression _330_cond = _327___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _331_condString;
          bool _332___v23;
          bool _333_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _334_recIdents;
          Dafny.ISequence<Dafny.Rune> _out113;
          bool _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_330_cond, selfIdent, @params, true, out _out113, out _out114, out _out115, out _out116);
          _331_condString = _out113;
          _332___v23 = _out114;
          _333_condErased = _out115;
          _334_recIdents = _out116;
          if (!(_333_condErased)) {
            _331_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _331_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _334_recIdents;
          Dafny.ISequence<Dafny.Rune> _335_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _336_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenStmts(_329_body, selfIdent, @params, false, earlyReturn, out _out117, out _out118);
          _335_bodyString = _out117;
          _336_bodyIdents = _out118;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _336_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _331_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _335_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _337___mcc_h13 = _source15.dtor_boundName;
        DAST._IType _338___mcc_h14 = _source15.dtor_boundType;
        DAST._IExpression _339___mcc_h15 = _source15.dtor_over;
        Dafny.ISequence<DAST._IStatement> _340___mcc_h16 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _341_body = _340___mcc_h16;
        DAST._IExpression _342_over = _339___mcc_h15;
        DAST._IType _343_boundType = _338___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _344_boundName = _337___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _345_overString;
          bool _346___v24;
          bool _347_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _348_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_342_over, selfIdent, @params, true, out _out119, out _out120, out _out121, out _out122);
          _345_overString = _out119;
          _346___v24 = _out120;
          _347_overErased = _out121;
          _348_recIdents = _out122;
          Dafny.ISequence<Dafny.Rune> _349_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType(_343_boundType, false, false);
          _349_boundTypeStr = _out123;
          readIdents = _348_recIdents;
          Dafny.ISequence<Dafny.Rune> _350_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _351_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_341_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_344_boundName)), false, earlyReturn, out _out124, out _out125);
          _350_bodyString = _out124;
          _351_bodyIdents = _out125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _351_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_344_boundName));
          Dafny.ISequence<Dafny.Rune> _352_unerasedIter;
          _352_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_347_overErased) {
            _352_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _349_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _352_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _345_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_344_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _352_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _350_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_Call) {
        DAST._IExpression _353___mcc_h17 = _source15.dtor_on;
        Dafny.ISequence<Dafny.Rune> _354___mcc_h18 = _source15.dtor_name;
        Dafny.ISequence<DAST._IType> _355___mcc_h19 = _source15.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _356___mcc_h20 = _source15.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _357___mcc_h21 = _source15.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _358_maybeOutVars = _357___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _359_args = _356___mcc_h20;
        Dafny.ISequence<DAST._IType> _360_typeArgs = _355___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _361_name = _354___mcc_h18;
        DAST._IExpression _362_on = _353___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _363_typeArgString;
          _363_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_360_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _364_typeI;
            _364_typeI = BigInteger.Zero;
            _363_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_364_typeI) < (new BigInteger((_360_typeArgs).Count))) {
              if ((_364_typeI).Sign == 1) {
                _363_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_363_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _365_typeString;
              Dafny.ISequence<Dafny.Rune> _out126;
              _out126 = DCOMP.COMP.GenType((_360_typeArgs).Select(_364_typeI), false, false);
              _365_typeString = _out126;
              _363_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_363_typeArgString, _365_typeString);
              _364_typeI = (_364_typeI) + (BigInteger.One);
            }
            _363_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_363_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _366_argString;
          _366_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _367_i;
          _367_i = BigInteger.Zero;
          while ((_367_i) < (new BigInteger((_359_args).Count))) {
            if ((_367_i).Sign == 1) {
              _366_argString = Dafny.Sequence<Dafny.Rune>.Concat(_366_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _368_argExpr;
            bool _369_isOwned;
            bool _370_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _371_argIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr((_359_args).Select(_367_i), selfIdent, @params, false, out _out127, out _out128, out _out129, out _out130);
            _368_argExpr = _out127;
            _369_isOwned = _out128;
            _370_argErased = _out129;
            _371_argIdents = _out130;
            if (_369_isOwned) {
              _368_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _368_argExpr);
            }
            _366_argString = Dafny.Sequence<Dafny.Rune>.Concat(_366_argString, _368_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _371_argIdents);
            _367_i = (_367_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _372_enclosingString;
          bool _373___v25;
          bool _374___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _375_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out131;
          bool _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_362_on, selfIdent, @params, false, out _out131, out _out132, out _out133, out _out134);
          _372_enclosingString = _out131;
          _373___v25 = _out132;
          _374___v26 = _out133;
          _375_enclosingIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _375_enclosingIdents);
          DAST._IExpression _source17 = _362_on;
          if (_source17.is_Literal) {
            DAST._ILiteral _376___mcc_h26 = _source17.dtor_Literal_a0;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _377___mcc_h28 = _source17.dtor_Ident_a0;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _378___mcc_h30 = _source17.dtor_Companion_a0;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_372_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source17.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _379___mcc_h32 = _source17.dtor_Tuple_a0;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _380___mcc_h34 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _381___mcc_h35 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _382___mcc_h36 = _source17.dtor_args;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _383___mcc_h40 = _source17.dtor_dims;
            DAST._IType _384___mcc_h41 = _source17.dtor_typ;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _385___mcc_h44 = _source17.dtor_path;
            Dafny.ISequence<DAST._IType> _386___mcc_h45 = _source17.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _387___mcc_h46 = _source17.dtor_variant;
            bool _388___mcc_h47 = _source17.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _389___mcc_h48 = _source17.dtor_contents;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Convert) {
            DAST._IExpression _390___mcc_h54 = _source17.dtor_value;
            DAST._IType _391___mcc_h55 = _source17.dtor_from;
            DAST._IType _392___mcc_h56 = _source17.dtor_typ;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqConstruct) {
            DAST._IExpression _393___mcc_h60 = _source17.dtor_length;
            DAST._IExpression _394___mcc_h61 = _source17.dtor_elem;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _395___mcc_h64 = _source17.dtor_elements;
            DAST._IType _396___mcc_h65 = _source17.dtor_typ;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _397___mcc_h68 = _source17.dtor_elements;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _398___mcc_h70 = _source17.dtor_mapElems;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_This) {
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Ite) {
            DAST._IExpression _399___mcc_h72 = _source17.dtor_cond;
            DAST._IExpression _400___mcc_h73 = _source17.dtor_thn;
            DAST._IExpression _401___mcc_h74 = _source17.dtor_els;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_UnOp) {
            DAST._IUnaryOp _402___mcc_h78 = _source17.dtor_unOp;
            DAST._IExpression _403___mcc_h79 = _source17.dtor_expr;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BinOp) {
            DAST._IBinOp _404___mcc_h82 = _source17.dtor_op;
            DAST._IExpression _405___mcc_h83 = _source17.dtor_left;
            DAST._IExpression _406___mcc_h84 = _source17.dtor_right;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_ArrayLen) {
            DAST._IExpression _407___mcc_h88 = _source17.dtor_expr;
            BigInteger _408___mcc_h89 = _source17.dtor_dim;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Select) {
            DAST._IExpression _409___mcc_h92 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _410___mcc_h93 = _source17.dtor_field;
            bool _411___mcc_h94 = _source17.dtor_isConstant;
            bool _412___mcc_h95 = _source17.dtor_onDatatype;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SelectFn) {
            DAST._IExpression _413___mcc_h100 = _source17.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _414___mcc_h101 = _source17.dtor_field;
            bool _415___mcc_h102 = _source17.dtor_onDatatype;
            bool _416___mcc_h103 = _source17.dtor_isStatic;
            BigInteger _417___mcc_h104 = _source17.dtor_arity;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Index) {
            DAST._IExpression _418___mcc_h110 = _source17.dtor_expr;
            DAST._ICollKind _419___mcc_h111 = _source17.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _420___mcc_h112 = _source17.dtor_indices;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IndexRange) {
            DAST._IExpression _421___mcc_h116 = _source17.dtor_expr;
            bool _422___mcc_h117 = _source17.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _423___mcc_h118 = _source17.dtor_low;
            DAST._IOptional<DAST._IExpression> _424___mcc_h119 = _source17.dtor_high;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TupleSelect) {
            DAST._IExpression _425___mcc_h124 = _source17.dtor_expr;
            BigInteger _426___mcc_h125 = _source17.dtor_index;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Call) {
            DAST._IExpression _427___mcc_h128 = _source17.dtor_on;
            Dafny.ISequence<Dafny.Rune> _428___mcc_h129 = _source17.dtor_name;
            Dafny.ISequence<DAST._IType> _429___mcc_h130 = _source17.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _430___mcc_h131 = _source17.dtor_args;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _431___mcc_h136 = _source17.dtor_params;
            DAST._IType _432___mcc_h137 = _source17.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _433___mcc_h138 = _source17.dtor_body;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _434___mcc_h142 = _source17.dtor_values;
            DAST._IType _435___mcc_h143 = _source17.dtor_retType;
            DAST._IExpression _436___mcc_h144 = _source17.dtor_expr;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _437___mcc_h148 = _source17.dtor_name;
            DAST._IType _438___mcc_h149 = _source17.dtor_typ;
            DAST._IExpression _439___mcc_h150 = _source17.dtor_value;
            DAST._IExpression _440___mcc_h151 = _source17.dtor_iifeBody;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_Apply) {
            DAST._IExpression _441___mcc_h156 = _source17.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _442___mcc_h157 = _source17.dtor_args;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_TypeTest) {
            DAST._IExpression _443___mcc_h160 = _source17.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _444___mcc_h161 = _source17.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _445___mcc_h162 = _source17.dtor_variant;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_InitializationValue) {
            DAST._IType _446___mcc_h166 = _source17.dtor_typ;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_BoolBoundedPool) {
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SetBoundedPool) {
            DAST._IExpression _447___mcc_h168 = _source17.dtor_of;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source17.is_SeqBoundedPool) {
            DAST._IExpression _448___mcc_h170 = _source17.dtor_of;
            bool _449___mcc_h171 = _source17.dtor_includeDuplicates;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _450___mcc_h174 = _source17.dtor_lo;
            DAST._IExpression _451___mcc_h175 = _source17.dtor_hi;
            {
              _372_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _372_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _452_receiver;
          _452_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source18 = _358_maybeOutVars;
          if (_source18.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _453___mcc_h178 = _source18.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _454_outVars = _453___mcc_h178;
            {
              if ((new BigInteger((_454_outVars).Count)) > (BigInteger.One)) {
                _452_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _455_outI;
              _455_outI = BigInteger.Zero;
              while ((_455_outI) < (new BigInteger((_454_outVars).Count))) {
                if ((_455_outI).Sign == 1) {
                  _452_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_452_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _456_outVar;
                _456_outVar = (_454_outVars).Select(_455_outI);
                _452_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_452_receiver, (_456_outVar));
                _455_outI = (_455_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_454_outVars).Count)) > (BigInteger.One)) {
                _452_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_452_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_452_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_452_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _372_enclosingString), DCOMP.__default.escapeIdent(_361_name)), _363_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _366_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source15.is_Return) {
        DAST._IExpression _457___mcc_h22 = _source15.dtor_expr;
        DAST._IExpression _458_expr = _457___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _459_exprString;
          bool _460___v29;
          bool _461_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _462_recIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_458_expr, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _459_exprString = _out135;
          _460___v29 = _out136;
          _461_recErased = _out137;
          _462_recIdents = _out138;
          _459_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _459_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _462_recIdents;
          if (isLast) {
            generated = _459_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _459_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source15.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _463___mcc_h23 = _source15.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _464_toLabel = _463___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source19 = _464_toLabel;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.Rune> _465___mcc_h179 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _466_lbl = _465___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _466_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _467___mcc_h24 = _source15.dtor_body;
        Dafny.ISequence<DAST._IStatement> _468_body = _467___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _469_paramI;
          _469_paramI = BigInteger.Zero;
          while ((_469_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _470_param;
            _470_param = (@params).Select(_469_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_470_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_470_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _469_paramI = (_469_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _471_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _472_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenStmts(_468_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out139, out _out140);
          _471_bodyString = _out139;
          _472_bodyIdents = _out140;
          readIdents = _472_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _471_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source15.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source15.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _473___mcc_h25 = _source15.dtor_Print_a0;
        DAST._IExpression _474_e = _473___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _475_printedExpr;
          bool _476_isOwned;
          bool _477___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _478_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_474_e, selfIdent, @params, false, out _out141, out _out142, out _out143, out _out144);
          _475_printedExpr = _out141;
          _476_isOwned = _out142;
          _477___v30 = _out143;
          _478_recIdents = _out144;
          if (_476_isOwned) {
            _475_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _475_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _475_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _478_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source20 = e;
      if (_source20.is_Literal) {
        DAST._ILiteral _479___mcc_h0 = _source20.dtor_Literal_a0;
        DAST._ILiteral _source21 = _479___mcc_h0;
        if (_source21.is_BoolLiteral) {
          bool _480___mcc_h1 = _source21.dtor_BoolLiteral_a0;
          if ((_480___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source21.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _481___mcc_h2 = _source21.dtor_IntLiteral_a0;
          DAST._IType _482___mcc_h3 = _source21.dtor_IntLiteral_a1;
          DAST._IType _483_t = _482___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _484_i = _481___mcc_h2;
          {
            DAST._IType _source22 = _483_t;
            if (_source22.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _485___mcc_h237 = _source22.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _486___mcc_h238 = _source22.dtor_typeArgs;
              DAST._IResolvedType _487___mcc_h239 = _source22.dtor_resolved;
              DAST._IType _488_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _489_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_488_o, false, false);
                _489_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _489_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Nullable) {
              DAST._IType _490___mcc_h243 = _source22.dtor_Nullable_a0;
              DAST._IType _491_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _492_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_491_o, false, false);
                _492_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _492_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Tuple) {
              Dafny.ISequence<DAST._IType> _493___mcc_h245 = _source22.dtor_Tuple_a0;
              DAST._IType _494_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _495_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_494_o, false, false);
                _495_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _495_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Array) {
              DAST._IType _496___mcc_h247 = _source22.dtor_element;
              BigInteger _497___mcc_h248 = _source22.dtor_dims;
              DAST._IType _498_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _499_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_498_o, false, false);
                _499_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _499_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Seq) {
              DAST._IType _500___mcc_h251 = _source22.dtor_element;
              DAST._IType _501_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _502_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_501_o, false, false);
                _502_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _502_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Set) {
              DAST._IType _503___mcc_h253 = _source22.dtor_element;
              DAST._IType _504_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _505_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_504_o, false, false);
                _505_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _505_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Multiset) {
              DAST._IType _506___mcc_h255 = _source22.dtor_element;
              DAST._IType _507_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _508_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_507_o, false, false);
                _508_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _508_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Map) {
              DAST._IType _509___mcc_h257 = _source22.dtor_key;
              DAST._IType _510___mcc_h258 = _source22.dtor_value;
              DAST._IType _511_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _512_genType;
                Dafny.ISequence<Dafny.Rune> _out152;
                _out152 = DCOMP.COMP.GenType(_511_o, false, false);
                _512_genType = _out152;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _512_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Arrow) {
              Dafny.ISequence<DAST._IType> _513___mcc_h261 = _source22.dtor_args;
              DAST._IType _514___mcc_h262 = _source22.dtor_result;
              DAST._IType _515_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _516_genType;
                Dafny.ISequence<Dafny.Rune> _out153;
                _out153 = DCOMP.COMP.GenType(_515_o, false, false);
                _516_genType = _out153;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _516_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source22.is_Primitive) {
              DAST._IPrimitive _517___mcc_h265 = _source22.dtor_Primitive_a0;
              DAST._IPrimitive _source23 = _517___mcc_h265;
              if (_source23.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source23.is_Real) {
                DAST._IType _518_o = _483_t;
                {
                  Dafny.ISequence<Dafny.Rune> _519_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_518_o, false, false);
                  _519_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _519_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_String) {
                DAST._IType _520_o = _483_t;
                {
                  Dafny.ISequence<Dafny.Rune> _521_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_520_o, false, false);
                  _521_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _521_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source23.is_Bool) {
                DAST._IType _522_o = _483_t;
                {
                  Dafny.ISequence<Dafny.Rune> _523_genType;
                  Dafny.ISequence<Dafny.Rune> _out156;
                  _out156 = DCOMP.COMP.GenType(_522_o, false, false);
                  _523_genType = _out156;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _523_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _524_o = _483_t;
                {
                  Dafny.ISequence<Dafny.Rune> _525_genType;
                  Dafny.ISequence<Dafny.Rune> _out157;
                  _out157 = DCOMP.COMP.GenType(_524_o, false, false);
                  _525_genType = _out157;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _525_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source22.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _526___mcc_h267 = _source22.dtor_Passthrough_a0;
              DAST._IType _527_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _528_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_527_o, false, false);
                _528_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _528_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _529___mcc_h269 = _source22.dtor_TypeArg_a0;
              DAST._IType _530_o = _483_t;
              {
                Dafny.ISequence<Dafny.Rune> _531_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_530_o, false, false);
                _531_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _484_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _531_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _532___mcc_h4 = _source21.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _533___mcc_h5 = _source21.dtor_DecLiteral_a1;
          DAST._IType _534___mcc_h6 = _source21.dtor_DecLiteral_a2;
          DAST._IType _535_t = _534___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _536_d = _533___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _537_n = _532___mcc_h4;
          {
            DAST._IType _source24 = _535_t;
            if (_source24.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _538___mcc_h271 = _source24.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _539___mcc_h272 = _source24.dtor_typeArgs;
              DAST._IResolvedType _540___mcc_h273 = _source24.dtor_resolved;
              DAST._IType _541_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _542_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_541_o, false, false);
                _542_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _542_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Nullable) {
              DAST._IType _543___mcc_h277 = _source24.dtor_Nullable_a0;
              DAST._IType _544_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _545_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_544_o, false, false);
                _545_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _545_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Tuple) {
              Dafny.ISequence<DAST._IType> _546___mcc_h279 = _source24.dtor_Tuple_a0;
              DAST._IType _547_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _548_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_547_o, false, false);
                _548_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _548_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Array) {
              DAST._IType _549___mcc_h281 = _source24.dtor_element;
              BigInteger _550___mcc_h282 = _source24.dtor_dims;
              DAST._IType _551_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _552_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_551_o, false, false);
                _552_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _552_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Seq) {
              DAST._IType _553___mcc_h285 = _source24.dtor_element;
              DAST._IType _554_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _555_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_554_o, false, false);
                _555_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _555_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Set) {
              DAST._IType _556___mcc_h287 = _source24.dtor_element;
              DAST._IType _557_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _558_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_557_o, false, false);
                _558_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _558_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Multiset) {
              DAST._IType _559___mcc_h289 = _source24.dtor_element;
              DAST._IType _560_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _561_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_560_o, false, false);
                _561_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _561_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Map) {
              DAST._IType _562___mcc_h291 = _source24.dtor_key;
              DAST._IType _563___mcc_h292 = _source24.dtor_value;
              DAST._IType _564_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _565_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_564_o, false, false);
                _565_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _565_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Arrow) {
              Dafny.ISequence<DAST._IType> _566___mcc_h295 = _source24.dtor_args;
              DAST._IType _567___mcc_h296 = _source24.dtor_result;
              DAST._IType _568_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _569_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_568_o, false, false);
                _569_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _569_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source24.is_Primitive) {
              DAST._IPrimitive _570___mcc_h299 = _source24.dtor_Primitive_a0;
              DAST._IPrimitive _source25 = _570___mcc_h299;
              if (_source25.is_Int) {
                DAST._IType _571_o = _535_t;
                {
                  Dafny.ISequence<Dafny.Rune> _572_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_571_o, false, false);
                  _572_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _572_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source25.is_String) {
                DAST._IType _573_o = _535_t;
                {
                  Dafny.ISequence<Dafny.Rune> _574_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_573_o, false, false);
                  _574_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _574_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source25.is_Bool) {
                DAST._IType _575_o = _535_t;
                {
                  Dafny.ISequence<Dafny.Rune> _576_genType;
                  Dafny.ISequence<Dafny.Rune> _out171;
                  _out171 = DCOMP.COMP.GenType(_575_o, false, false);
                  _576_genType = _out171;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _576_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _577_o = _535_t;
                {
                  Dafny.ISequence<Dafny.Rune> _578_genType;
                  Dafny.ISequence<Dafny.Rune> _out172;
                  _out172 = DCOMP.COMP.GenType(_577_o, false, false);
                  _578_genType = _out172;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _578_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source24.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _579___mcc_h301 = _source24.dtor_Passthrough_a0;
              DAST._IType _580_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _581_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_580_o, false, false);
                _581_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _581_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _582___mcc_h303 = _source24.dtor_TypeArg_a0;
              DAST._IType _583_o = _535_t;
              {
                Dafny.ISequence<Dafny.Rune> _584_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_583_o, false, false);
                _584_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _537_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _536_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _584_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _585___mcc_h7 = _source21.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _586_l = _585___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _586_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source21.is_CharLiteral) {
          Dafny.Rune _587___mcc_h8 = _source21.dtor_CharLiteral_a0;
          Dafny.Rune _588_c = _587___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_588_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _589___mcc_h9 = _source21.dtor_Null_a0;
          DAST._IType _590_tpe = _589___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _591_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out175;
            _out175 = DCOMP.COMP.GenType(_590_tpe, false, false);
            _591_tpeGen = _out175;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _591_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source20.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _592___mcc_h10 = _source20.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _593_name = _592___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_593_name);
          if (!((@params).Contains(_593_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_593_name);
        }
      } else if (_source20.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _594___mcc_h11 = _source20.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _595_path = _594___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out176;
          _out176 = DCOMP.COMP.GenPath(_595_path);
          s = _out176;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _596___mcc_h12 = _source20.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _597_values = _596___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _598_i;
          _598_i = BigInteger.Zero;
          while ((_598_i) < (new BigInteger((_597_values).Count))) {
            if ((_598_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _599_recursiveGen;
            bool _600___v31;
            bool _601_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _602_recIdents;
            Dafny.ISequence<Dafny.Rune> _out177;
            bool _out178;
            bool _out179;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
            DCOMP.COMP.GenExpr((_597_values).Select(_598_i), selfIdent, @params, true, out _out177, out _out178, out _out179, out _out180);
            _599_recursiveGen = _out177;
            _600___v31 = _out178;
            _601_isErased = _out179;
            _602_recIdents = _out180;
            if (_601_isErased) {
              _599_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _602_recIdents);
            _598_i = (_598_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _603___mcc_h13 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _604___mcc_h14 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _605___mcc_h15 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _606_args = _605___mcc_h15;
        Dafny.ISequence<DAST._IType> _607_typeArgs = _604___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _608_path = _603___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _609_path;
          Dafny.ISequence<Dafny.Rune> _out181;
          _out181 = DCOMP.COMP.GenPath(_608_path);
          _609_path = _out181;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _609_path);
          if ((new BigInteger((_607_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _610_i;
            _610_i = BigInteger.Zero;
            while ((_610_i) < (new BigInteger((_607_typeArgs).Count))) {
              if ((_610_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _611_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_607_typeArgs).Select(_610_i), false, false);
              _611_typeString = _out182;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _611_typeString);
              _610_i = (_610_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _612_i;
          _612_i = BigInteger.Zero;
          while ((_612_i) < (new BigInteger((_606_args).Count))) {
            if ((_612_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _613_recursiveGen;
            bool _614___v32;
            bool _615_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _616_recIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_606_args).Select(_612_i), selfIdent, @params, true, out _out183, out _out184, out _out185, out _out186);
            _613_recursiveGen = _out183;
            _614___v32 = _out184;
            _615_isErased = _out185;
            _616_recIdents = _out186;
            if (_615_isErased) {
              _613_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _613_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _613_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _616_recIdents);
            _612_i = (_612_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source20.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _617___mcc_h16 = _source20.dtor_dims;
        DAST._IType _618___mcc_h17 = _source20.dtor_typ;
        DAST._IType _619_typ = _618___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _620_dims = _617___mcc_h16;
        {
          BigInteger _621_i;
          _621_i = (new BigInteger((_620_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _622_genTyp;
          Dafny.ISequence<Dafny.Rune> _out187;
          _out187 = DCOMP.COMP.GenType(_619_typ, false, false);
          _622_genTyp = _out187;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _622_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_621_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _623_recursiveGen;
            bool _624___v33;
            bool _625_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _626_recIdents;
            Dafny.ISequence<Dafny.Rune> _out188;
            bool _out189;
            bool _out190;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
            DCOMP.COMP.GenExpr((_620_dims).Select(_621_i), selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
            _623_recursiveGen = _out188;
            _624___v33 = _out189;
            _625_isErased = _out190;
            _626_recIdents = _out191;
            if (!(_625_isErased)) {
              _623_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _626_recIdents);
            _621_i = (_621_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _627___mcc_h18 = _source20.dtor_path;
        Dafny.ISequence<DAST._IType> _628___mcc_h19 = _source20.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _629___mcc_h20 = _source20.dtor_variant;
        bool _630___mcc_h21 = _source20.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _631___mcc_h22 = _source20.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _632_values = _631___mcc_h22;
        bool _633_isCo = _630___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _634_variant = _629___mcc_h20;
        Dafny.ISequence<DAST._IType> _635_typeArgs = _628___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _636_path = _627___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _637_path;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenPath(_636_path);
          _637_path = _out192;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _637_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_635_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _638_i;
            _638_i = BigInteger.Zero;
            while ((_638_i) < (new BigInteger((_635_typeArgs).Count))) {
              if ((_638_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _639_typeString;
              Dafny.ISequence<Dafny.Rune> _out193;
              _out193 = DCOMP.COMP.GenType((_635_typeArgs).Select(_638_i), false, false);
              _639_typeString = _out193;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _639_typeString);
              _638_i = (_638_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_634_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _640_i;
          _640_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_640_i) < (new BigInteger((_632_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_632_values).Select(_640_i);
            Dafny.ISequence<Dafny.Rune> _641_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _642_value = _let_tmp_rhs0.dtor__1;
            if ((_640_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_633_isCo) {
              Dafny.ISequence<Dafny.Rune> _643_recursiveGen;
              bool _644___v34;
              bool _645_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _646_recIdents;
              Dafny.ISequence<Dafny.Rune> _out194;
              bool _out195;
              bool _out196;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out197;
              DCOMP.COMP.GenExpr(_642_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out194, out _out195, out _out196, out _out197);
              _643_recursiveGen = _out194;
              _644___v34 = _out195;
              _645_isErased = _out196;
              _646_recIdents = _out197;
              if (!(_645_isErased)) {
                _643_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _643_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _646_recIdents);
              Dafny.ISequence<Dafny.Rune> _647_allReadCloned;
              _647_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_646_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _648_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_646_recIdents).Elements) {
                  _648_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_646_recIdents).Contains(_648_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1233)");
              after__ASSIGN_SUCH_THAT_0:;
                _647_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_647_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_648_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_648_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _646_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_646_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_648_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_641_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _647_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _649_recursiveGen;
              bool _650___v35;
              bool _651_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _652_recIdents;
              Dafny.ISequence<Dafny.Rune> _out198;
              bool _out199;
              bool _out200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out201;
              DCOMP.COMP.GenExpr(_642_value, selfIdent, @params, true, out _out198, out _out199, out _out200, out _out201);
              _649_recursiveGen = _out198;
              _650___v35 = _out199;
              _651_isErased = _out200;
              _652_recIdents = _out201;
              if (!(_651_isErased)) {
                _649_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _649_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_641_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _652_recIdents);
            }
            _640_i = (_640_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Convert) {
        DAST._IExpression _653___mcc_h23 = _source20.dtor_value;
        DAST._IType _654___mcc_h24 = _source20.dtor_from;
        DAST._IType _655___mcc_h25 = _source20.dtor_typ;
        DAST._IType _656_toTpe = _655___mcc_h25;
        DAST._IType _657_fromTpe = _654___mcc_h24;
        DAST._IExpression _658_expr = _653___mcc_h23;
        {
          if (object.Equals(_657_fromTpe, _656_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _659_recursiveGen;
            bool _660_recOwned;
            bool _661_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _662_recIdents;
            Dafny.ISequence<Dafny.Rune> _out202;
            bool _out203;
            bool _out204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
            DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out202, out _out203, out _out204, out _out205);
            _659_recursiveGen = _out202;
            _660_recOwned = _out203;
            _661_recErased = _out204;
            _662_recIdents = _out205;
            s = _659_recursiveGen;
            isOwned = _660_recOwned;
            isErased = _661_recErased;
            readIdents = _662_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source26 = _System.Tuple2<DAST._IType, DAST._IType>.create(_657_fromTpe, _656_toTpe);
            DAST._IType _663___mcc_h305 = _source26.dtor__0;
            DAST._IType _664___mcc_h306 = _source26.dtor__1;
            DAST._IType _source27 = _663___mcc_h305;
            if (_source27.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _665___mcc_h309 = _source27.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _666___mcc_h310 = _source27.dtor_typeArgs;
              DAST._IResolvedType _667___mcc_h311 = _source27.dtor_resolved;
              DAST._IResolvedType _source28 = _667___mcc_h311;
              if (_source28.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _668___mcc_h321 = _source28.dtor_path;
                DAST._IType _source29 = _664___mcc_h306;
                if (_source29.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _669___mcc_h325 = _source29.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _670___mcc_h326 = _source29.dtor_typeArgs;
                  DAST._IResolvedType _671___mcc_h327 = _source29.dtor_resolved;
                  DAST._IResolvedType _source30 = _671___mcc_h327;
                  if (_source30.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _672___mcc_h331 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _673_recursiveGen;
                      bool _674_recOwned;
                      bool _675_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _676_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out206;
                      bool _out207;
                      bool _out208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208, out _out209);
                      _673_recursiveGen = _out206;
                      _674_recOwned = _out207;
                      _675_recErased = _out208;
                      _676_recIdents = _out209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _674_recOwned;
                      isErased = _675_recErased;
                      readIdents = _676_recIdents;
                    }
                  } else if (_source30.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _677___mcc_h333 = _source30.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _678_recursiveGen;
                      bool _679_recOwned;
                      bool _680_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _681_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out210;
                      bool _out211;
                      bool _out212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out210, out _out211, out _out212, out _out213);
                      _678_recursiveGen = _out210;
                      _679_recOwned = _out211;
                      _680_recErased = _out212;
                      _681_recIdents = _out213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _679_recOwned;
                      isErased = _680_recErased;
                      readIdents = _681_recIdents;
                    }
                  } else {
                    DAST._IType _682___mcc_h335 = _source30.dtor_Newtype_a0;
                    DAST._IType _683_b = _682___mcc_h335;
                    {
                      if (object.Equals(_657_fromTpe, _683_b)) {
                        Dafny.ISequence<Dafny.Rune> _684_recursiveGen;
                        bool _685_recOwned;
                        bool _686_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _687_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out214;
                        bool _out215;
                        bool _out216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out214, out _out215, out _out216, out _out217);
                        _684_recursiveGen = _out214;
                        _685_recOwned = _out215;
                        _686_recErased = _out216;
                        _687_recIdents = _out217;
                        Dafny.ISequence<Dafny.Rune> _688_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out218;
                        _out218 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _688_rhsType = _out218;
                        Dafny.ISequence<Dafny.Rune> _689_uneraseFn;
                        _689_uneraseFn = ((_685_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _688_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _689_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _685_recOwned;
                        isErased = false;
                        readIdents = _687_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out219;
                        bool _out220;
                        bool _out221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _683_b), _683_b, _656_toTpe), selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                        s = _out219;
                        isOwned = _out220;
                        isErased = _out221;
                        readIdents = _out222;
                      }
                    }
                  }
                } else if (_source29.is_Nullable) {
                  DAST._IType _690___mcc_h337 = _source29.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _691_recursiveGen;
                    bool _692_recOwned;
                    bool _693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out223;
                    bool _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                    _691_recursiveGen = _out223;
                    _692_recOwned = _out224;
                    _693_recErased = _out225;
                    _694_recIdents = _out226;
                    if (!(_692_recOwned)) {
                      _691_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_691_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _693_recErased;
                    readIdents = _694_recIdents;
                  }
                } else if (_source29.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _695___mcc_h339 = _source29.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _696_recursiveGen;
                    bool _697_recOwned;
                    bool _698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out227;
                    bool _out228;
                    bool _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                    _696_recursiveGen = _out227;
                    _697_recOwned = _out228;
                    _698_recErased = _out229;
                    _699_recIdents = _out230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _697_recOwned;
                    isErased = _698_recErased;
                    readIdents = _699_recIdents;
                  }
                } else if (_source29.is_Array) {
                  DAST._IType _700___mcc_h341 = _source29.dtor_element;
                  BigInteger _701___mcc_h342 = _source29.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _702_recursiveGen;
                    bool _703_recOwned;
                    bool _704_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _705_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out231;
                    bool _out232;
                    bool _out233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out231, out _out232, out _out233, out _out234);
                    _702_recursiveGen = _out231;
                    _703_recOwned = _out232;
                    _704_recErased = _out233;
                    _705_recIdents = _out234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _702_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _703_recOwned;
                    isErased = _704_recErased;
                    readIdents = _705_recIdents;
                  }
                } else if (_source29.is_Seq) {
                  DAST._IType _706___mcc_h345 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _707_recursiveGen;
                    bool _708_recOwned;
                    bool _709_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _710_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out235;
                    bool _out236;
                    bool _out237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out235, out _out236, out _out237, out _out238);
                    _707_recursiveGen = _out235;
                    _708_recOwned = _out236;
                    _709_recErased = _out237;
                    _710_recIdents = _out238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _708_recOwned;
                    isErased = _709_recErased;
                    readIdents = _710_recIdents;
                  }
                } else if (_source29.is_Set) {
                  DAST._IType _711___mcc_h347 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _712_recursiveGen;
                    bool _713_recOwned;
                    bool _714_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _715_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out239;
                    bool _out240;
                    bool _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
                    _712_recursiveGen = _out239;
                    _713_recOwned = _out240;
                    _714_recErased = _out241;
                    _715_recIdents = _out242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _713_recOwned;
                    isErased = _714_recErased;
                    readIdents = _715_recIdents;
                  }
                } else if (_source29.is_Multiset) {
                  DAST._IType _716___mcc_h349 = _source29.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _717_recursiveGen;
                    bool _718_recOwned;
                    bool _719_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _720_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out243;
                    bool _out244;
                    bool _out245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                    _717_recursiveGen = _out243;
                    _718_recOwned = _out244;
                    _719_recErased = _out245;
                    _720_recIdents = _out246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _717_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _718_recOwned;
                    isErased = _719_recErased;
                    readIdents = _720_recIdents;
                  }
                } else if (_source29.is_Map) {
                  DAST._IType _721___mcc_h351 = _source29.dtor_key;
                  DAST._IType _722___mcc_h352 = _source29.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _723_recursiveGen;
                    bool _724_recOwned;
                    bool _725_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _726_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out247;
                    bool _out248;
                    bool _out249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                    _723_recursiveGen = _out247;
                    _724_recOwned = _out248;
                    _725_recErased = _out249;
                    _726_recIdents = _out250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _723_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _724_recOwned;
                    isErased = _725_recErased;
                    readIdents = _726_recIdents;
                  }
                } else if (_source29.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _727___mcc_h355 = _source29.dtor_args;
                  DAST._IType _728___mcc_h356 = _source29.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _729_recursiveGen;
                    bool _730_recOwned;
                    bool _731_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _732_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out251;
                    bool _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                    _729_recursiveGen = _out251;
                    _730_recOwned = _out252;
                    _731_recErased = _out253;
                    _732_recIdents = _out254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _729_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _730_recOwned;
                    isErased = _731_recErased;
                    readIdents = _732_recIdents;
                  }
                } else if (_source29.is_Primitive) {
                  DAST._IPrimitive _733___mcc_h359 = _source29.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _734_recursiveGen;
                    bool _735_recOwned;
                    bool _736_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _737_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out255;
                    bool _out256;
                    bool _out257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                    _734_recursiveGen = _out255;
                    _735_recOwned = _out256;
                    _736_recErased = _out257;
                    _737_recIdents = _out258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _734_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _735_recOwned;
                    isErased = _736_recErased;
                    readIdents = _737_recIdents;
                  }
                } else if (_source29.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _738___mcc_h361 = _source29.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _739_recursiveGen;
                    bool _740_recOwned;
                    bool _741_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _742_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _739_recursiveGen = _out259;
                    _740_recOwned = _out260;
                    _741_recErased = _out261;
                    _742_recIdents = _out262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _740_recOwned;
                    isErased = _741_recErased;
                    readIdents = _742_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _743___mcc_h363 = _source29.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _744_recursiveGen;
                    bool _745_recOwned;
                    bool _746_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _747_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _744_recursiveGen = _out263;
                    _745_recOwned = _out264;
                    _746_recErased = _out265;
                    _747_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _745_recOwned;
                    isErased = _746_recErased;
                    readIdents = _747_recIdents;
                  }
                }
              } else if (_source28.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _748___mcc_h365 = _source28.dtor_path;
                DAST._IType _source31 = _664___mcc_h306;
                if (_source31.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _749___mcc_h369 = _source31.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _750___mcc_h370 = _source31.dtor_typeArgs;
                  DAST._IResolvedType _751___mcc_h371 = _source31.dtor_resolved;
                  DAST._IResolvedType _source32 = _751___mcc_h371;
                  if (_source32.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _752___mcc_h375 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _753_recursiveGen;
                      bool _754_recOwned;
                      bool _755_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _756_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out267;
                      bool _out268;
                      bool _out269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                      _753_recursiveGen = _out267;
                      _754_recOwned = _out268;
                      _755_recErased = _out269;
                      _756_recIdents = _out270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _754_recOwned;
                      isErased = _755_recErased;
                      readIdents = _756_recIdents;
                    }
                  } else if (_source32.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _757___mcc_h377 = _source32.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _758_recursiveGen;
                      bool _759_recOwned;
                      bool _760_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _761_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out271;
                      bool _out272;
                      bool _out273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                      _758_recursiveGen = _out271;
                      _759_recOwned = _out272;
                      _760_recErased = _out273;
                      _761_recIdents = _out274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _759_recOwned;
                      isErased = _760_recErased;
                      readIdents = _761_recIdents;
                    }
                  } else {
                    DAST._IType _762___mcc_h379 = _source32.dtor_Newtype_a0;
                    DAST._IType _763_b = _762___mcc_h379;
                    {
                      if (object.Equals(_657_fromTpe, _763_b)) {
                        Dafny.ISequence<Dafny.Rune> _764_recursiveGen;
                        bool _765_recOwned;
                        bool _766_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _767_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        _764_recursiveGen = _out275;
                        _765_recOwned = _out276;
                        _766_recErased = _out277;
                        _767_recIdents = _out278;
                        Dafny.ISequence<Dafny.Rune> _768_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out279;
                        _out279 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _768_rhsType = _out279;
                        Dafny.ISequence<Dafny.Rune> _769_uneraseFn;
                        _769_uneraseFn = ((_765_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _768_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _769_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _765_recOwned;
                        isErased = false;
                        readIdents = _767_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out280;
                        bool _out281;
                        bool _out282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _763_b), _763_b, _656_toTpe), selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                        s = _out280;
                        isOwned = _out281;
                        isErased = _out282;
                        readIdents = _out283;
                      }
                    }
                  }
                } else if (_source31.is_Nullable) {
                  DAST._IType _770___mcc_h381 = _source31.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _771_recursiveGen;
                    bool _772_recOwned;
                    bool _773_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _774_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _771_recursiveGen = _out284;
                    _772_recOwned = _out285;
                    _773_recErased = _out286;
                    _774_recIdents = _out287;
                    if (!(_772_recOwned)) {
                      _771_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_771_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _771_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _773_recErased;
                    readIdents = _774_recIdents;
                  }
                } else if (_source31.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _775___mcc_h383 = _source31.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _776_recursiveGen;
                    bool _777_recOwned;
                    bool _778_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _779_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _776_recursiveGen = _out288;
                    _777_recOwned = _out289;
                    _778_recErased = _out290;
                    _779_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _777_recOwned;
                    isErased = _778_recErased;
                    readIdents = _779_recIdents;
                  }
                } else if (_source31.is_Array) {
                  DAST._IType _780___mcc_h385 = _source31.dtor_element;
                  BigInteger _781___mcc_h386 = _source31.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _782_recursiveGen;
                    bool _783_recOwned;
                    bool _784_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _785_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _782_recursiveGen = _out292;
                    _783_recOwned = _out293;
                    _784_recErased = _out294;
                    _785_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _782_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _783_recOwned;
                    isErased = _784_recErased;
                    readIdents = _785_recIdents;
                  }
                } else if (_source31.is_Seq) {
                  DAST._IType _786___mcc_h389 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _787_recursiveGen;
                    bool _788_recOwned;
                    bool _789_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _790_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _787_recursiveGen = _out296;
                    _788_recOwned = _out297;
                    _789_recErased = _out298;
                    _790_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _787_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _788_recOwned;
                    isErased = _789_recErased;
                    readIdents = _790_recIdents;
                  }
                } else if (_source31.is_Set) {
                  DAST._IType _791___mcc_h391 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _792_recursiveGen;
                    bool _793_recOwned;
                    bool _794_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _795_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _792_recursiveGen = _out300;
                    _793_recOwned = _out301;
                    _794_recErased = _out302;
                    _795_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _793_recOwned;
                    isErased = _794_recErased;
                    readIdents = _795_recIdents;
                  }
                } else if (_source31.is_Multiset) {
                  DAST._IType _796___mcc_h393 = _source31.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _797_recursiveGen;
                    bool _798_recOwned;
                    bool _799_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _800_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _797_recursiveGen = _out304;
                    _798_recOwned = _out305;
                    _799_recErased = _out306;
                    _800_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _797_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _798_recOwned;
                    isErased = _799_recErased;
                    readIdents = _800_recIdents;
                  }
                } else if (_source31.is_Map) {
                  DAST._IType _801___mcc_h395 = _source31.dtor_key;
                  DAST._IType _802___mcc_h396 = _source31.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _803_recursiveGen;
                    bool _804_recOwned;
                    bool _805_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _806_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _803_recursiveGen = _out308;
                    _804_recOwned = _out309;
                    _805_recErased = _out310;
                    _806_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _803_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _804_recOwned;
                    isErased = _805_recErased;
                    readIdents = _806_recIdents;
                  }
                } else if (_source31.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _807___mcc_h399 = _source31.dtor_args;
                  DAST._IType _808___mcc_h400 = _source31.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _809_recursiveGen;
                    bool _810_recOwned;
                    bool _811_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _812_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _809_recursiveGen = _out312;
                    _810_recOwned = _out313;
                    _811_recErased = _out314;
                    _812_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _810_recOwned;
                    isErased = _811_recErased;
                    readIdents = _812_recIdents;
                  }
                } else if (_source31.is_Primitive) {
                  DAST._IPrimitive _813___mcc_h403 = _source31.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _814_recursiveGen;
                    bool _815_recOwned;
                    bool _816_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _817_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _814_recursiveGen = _out316;
                    _815_recOwned = _out317;
                    _816_recErased = _out318;
                    _817_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _815_recOwned;
                    isErased = _816_recErased;
                    readIdents = _817_recIdents;
                  }
                } else if (_source31.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _818___mcc_h405 = _source31.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _819_recursiveGen;
                    bool _820_recOwned;
                    bool _821_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _822_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _819_recursiveGen = _out320;
                    _820_recOwned = _out321;
                    _821_recErased = _out322;
                    _822_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _819_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _820_recOwned;
                    isErased = _821_recErased;
                    readIdents = _822_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _823___mcc_h407 = _source31.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _824_recursiveGen;
                    bool _825_recOwned;
                    bool _826_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _827_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _824_recursiveGen = _out324;
                    _825_recOwned = _out325;
                    _826_recErased = _out326;
                    _827_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _824_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _825_recOwned;
                    isErased = _826_recErased;
                    readIdents = _827_recIdents;
                  }
                }
              } else {
                DAST._IType _828___mcc_h409 = _source28.dtor_Newtype_a0;
                DAST._IType _source33 = _664___mcc_h306;
                if (_source33.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _829___mcc_h413 = _source33.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _830___mcc_h414 = _source33.dtor_typeArgs;
                  DAST._IResolvedType _831___mcc_h415 = _source33.dtor_resolved;
                  DAST._IResolvedType _source34 = _831___mcc_h415;
                  if (_source34.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _832___mcc_h422 = _source34.dtor_path;
                    DAST._IType _833_b = _828___mcc_h409;
                    {
                      if (object.Equals(_833_b, _656_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _834_recursiveGen;
                        bool _835_recOwned;
                        bool _836_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _837_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out328;
                        bool _out329;
                        bool _out330;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                        _834_recursiveGen = _out328;
                        _835_recOwned = _out329;
                        _836_recErased = _out330;
                        _837_recIdents = _out331;
                        Dafny.ISequence<Dafny.Rune> _838_uneraseFn;
                        _838_uneraseFn = ((_835_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _838_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _835_recOwned;
                        isErased = true;
                        readIdents = _837_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out332;
                        bool _out333;
                        bool _out334;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _833_b), _833_b, _656_toTpe), selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                        s = _out332;
                        isOwned = _out333;
                        isErased = _out334;
                        readIdents = _out335;
                      }
                    }
                  } else if (_source34.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _839___mcc_h425 = _source34.dtor_path;
                    DAST._IType _840_b = _828___mcc_h409;
                    {
                      if (object.Equals(_840_b, _656_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _841_recursiveGen;
                        bool _842_recOwned;
                        bool _843_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _844_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        _841_recursiveGen = _out336;
                        _842_recOwned = _out337;
                        _843_recErased = _out338;
                        _844_recIdents = _out339;
                        Dafny.ISequence<Dafny.Rune> _845_uneraseFn;
                        _845_uneraseFn = ((_842_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _845_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _842_recOwned;
                        isErased = true;
                        readIdents = _844_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out340;
                        bool _out341;
                        bool _out342;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _840_b), _840_b, _656_toTpe), selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                        s = _out340;
                        isOwned = _out341;
                        isErased = _out342;
                        readIdents = _out343;
                      }
                    }
                  } else {
                    DAST._IType _846___mcc_h428 = _source34.dtor_Newtype_a0;
                    DAST._IType _847_b = _846___mcc_h428;
                    {
                      if (object.Equals(_657_fromTpe, _847_b)) {
                        Dafny.ISequence<Dafny.Rune> _848_recursiveGen;
                        bool _849_recOwned;
                        bool _850_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _851_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _848_recursiveGen = _out344;
                        _849_recOwned = _out345;
                        _850_recErased = _out346;
                        _851_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _852_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _852_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _853_uneraseFn;
                        _853_uneraseFn = ((_849_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _852_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _853_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _848_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _849_recOwned;
                        isErased = false;
                        readIdents = _851_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _847_b), _847_b, _656_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source33.is_Nullable) {
                  DAST._IType _854___mcc_h431 = _source33.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _855_recursiveGen;
                    bool _856_recOwned;
                    bool _857_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _858_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _855_recursiveGen = _out353;
                    _856_recOwned = _out354;
                    _857_recErased = _out355;
                    _858_recIdents = _out356;
                    if (!(_856_recOwned)) {
                      _855_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_855_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _855_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _857_recErased;
                    readIdents = _858_recIdents;
                  }
                } else if (_source33.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _859___mcc_h434 = _source33.dtor_Tuple_a0;
                  DAST._IType _860_b = _828___mcc_h409;
                  {
                    if (object.Equals(_860_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _861_recursiveGen;
                      bool _862_recOwned;
                      bool _863_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _864_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out357;
                      bool _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                      _861_recursiveGen = _out357;
                      _862_recOwned = _out358;
                      _863_recErased = _out359;
                      _864_recIdents = _out360;
                      Dafny.ISequence<Dafny.Rune> _865_uneraseFn;
                      _865_uneraseFn = ((_862_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _865_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _862_recOwned;
                      isErased = true;
                      readIdents = _864_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out361;
                      bool _out362;
                      bool _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _860_b), _860_b, _656_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                      s = _out361;
                      isOwned = _out362;
                      isErased = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source33.is_Array) {
                  DAST._IType _866___mcc_h437 = _source33.dtor_element;
                  BigInteger _867___mcc_h438 = _source33.dtor_dims;
                  DAST._IType _868_b = _828___mcc_h409;
                  {
                    if (object.Equals(_868_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _869_recursiveGen;
                      bool _870_recOwned;
                      bool _871_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _872_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out365;
                      bool _out366;
                      bool _out367;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                      _869_recursiveGen = _out365;
                      _870_recOwned = _out366;
                      _871_recErased = _out367;
                      _872_recIdents = _out368;
                      Dafny.ISequence<Dafny.Rune> _873_uneraseFn;
                      _873_uneraseFn = ((_870_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _873_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _870_recOwned;
                      isErased = true;
                      readIdents = _872_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out369;
                      bool _out370;
                      bool _out371;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _868_b), _868_b, _656_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                      s = _out369;
                      isOwned = _out370;
                      isErased = _out371;
                      readIdents = _out372;
                    }
                  }
                } else if (_source33.is_Seq) {
                  DAST._IType _874___mcc_h443 = _source33.dtor_element;
                  DAST._IType _875_b = _828___mcc_h409;
                  {
                    if (object.Equals(_875_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _876_recursiveGen;
                      bool _877_recOwned;
                      bool _878_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _879_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out373;
                      bool _out374;
                      bool _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                      _876_recursiveGen = _out373;
                      _877_recOwned = _out374;
                      _878_recErased = _out375;
                      _879_recIdents = _out376;
                      Dafny.ISequence<Dafny.Rune> _880_uneraseFn;
                      _880_uneraseFn = ((_877_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _880_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _876_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _877_recOwned;
                      isErased = true;
                      readIdents = _879_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out377;
                      bool _out378;
                      bool _out379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _875_b), _875_b, _656_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                      s = _out377;
                      isOwned = _out378;
                      isErased = _out379;
                      readIdents = _out380;
                    }
                  }
                } else if (_source33.is_Set) {
                  DAST._IType _881___mcc_h446 = _source33.dtor_element;
                  DAST._IType _882_b = _828___mcc_h409;
                  {
                    if (object.Equals(_882_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _883_recursiveGen;
                      bool _884_recOwned;
                      bool _885_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _886_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out381;
                      bool _out382;
                      bool _out383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                      _883_recursiveGen = _out381;
                      _884_recOwned = _out382;
                      _885_recErased = _out383;
                      _886_recIdents = _out384;
                      Dafny.ISequence<Dafny.Rune> _887_uneraseFn;
                      _887_uneraseFn = ((_884_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _887_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _884_recOwned;
                      isErased = true;
                      readIdents = _886_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out385;
                      bool _out386;
                      bool _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _882_b), _882_b, _656_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                      s = _out385;
                      isOwned = _out386;
                      isErased = _out387;
                      readIdents = _out388;
                    }
                  }
                } else if (_source33.is_Multiset) {
                  DAST._IType _888___mcc_h449 = _source33.dtor_element;
                  DAST._IType _889_b = _828___mcc_h409;
                  {
                    if (object.Equals(_889_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _890_recursiveGen;
                      bool _891_recOwned;
                      bool _892_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _893_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out389;
                      bool _out390;
                      bool _out391;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                      _890_recursiveGen = _out389;
                      _891_recOwned = _out390;
                      _892_recErased = _out391;
                      _893_recIdents = _out392;
                      Dafny.ISequence<Dafny.Rune> _894_uneraseFn;
                      _894_uneraseFn = ((_891_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _894_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _891_recOwned;
                      isErased = true;
                      readIdents = _893_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _889_b), _889_b, _656_toTpe), selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      s = _out393;
                      isOwned = _out394;
                      isErased = _out395;
                      readIdents = _out396;
                    }
                  }
                } else if (_source33.is_Map) {
                  DAST._IType _895___mcc_h452 = _source33.dtor_key;
                  DAST._IType _896___mcc_h453 = _source33.dtor_value;
                  DAST._IType _897_b = _828___mcc_h409;
                  {
                    if (object.Equals(_897_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _898_recursiveGen;
                      bool _899_recOwned;
                      bool _900_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _901_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      _898_recursiveGen = _out397;
                      _899_recOwned = _out398;
                      _900_recErased = _out399;
                      _901_recIdents = _out400;
                      Dafny.ISequence<Dafny.Rune> _902_uneraseFn;
                      _902_uneraseFn = ((_899_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _902_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _899_recOwned;
                      isErased = true;
                      readIdents = _901_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _897_b), _897_b, _656_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      s = _out401;
                      isOwned = _out402;
                      isErased = _out403;
                      readIdents = _out404;
                    }
                  }
                } else if (_source33.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _903___mcc_h458 = _source33.dtor_args;
                  DAST._IType _904___mcc_h459 = _source33.dtor_result;
                  DAST._IType _905_b = _828___mcc_h409;
                  {
                    if (object.Equals(_905_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _906_recursiveGen;
                      bool _907_recOwned;
                      bool _908_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _909_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      _906_recursiveGen = _out405;
                      _907_recOwned = _out406;
                      _908_recErased = _out407;
                      _909_recIdents = _out408;
                      Dafny.ISequence<Dafny.Rune> _910_uneraseFn;
                      _910_uneraseFn = ((_907_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _910_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _907_recOwned;
                      isErased = true;
                      readIdents = _909_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _905_b), _905_b, _656_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      s = _out409;
                      isOwned = _out410;
                      isErased = _out411;
                      readIdents = _out412;
                    }
                  }
                } else if (_source33.is_Primitive) {
                  DAST._IPrimitive _911___mcc_h464 = _source33.dtor_Primitive_a0;
                  DAST._IType _912_b = _828___mcc_h409;
                  {
                    if (object.Equals(_912_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _913_recursiveGen;
                      bool _914_recOwned;
                      bool _915_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _916_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _913_recursiveGen = _out413;
                      _914_recOwned = _out414;
                      _915_recErased = _out415;
                      _916_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _917_uneraseFn;
                      _917_uneraseFn = ((_914_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _917_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _913_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _914_recOwned;
                      isErased = true;
                      readIdents = _916_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _912_b), _912_b, _656_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source33.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _918___mcc_h467 = _source33.dtor_Passthrough_a0;
                  DAST._IType _919_b = _828___mcc_h409;
                  {
                    if (object.Equals(_919_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _920_recursiveGen;
                      bool _921_recOwned;
                      bool _922_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _923_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _920_recursiveGen = _out421;
                      _921_recOwned = _out422;
                      _922_recErased = _out423;
                      _923_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _924_uneraseFn;
                      _924_uneraseFn = ((_921_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _924_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _921_recOwned;
                      isErased = true;
                      readIdents = _923_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _919_b), _919_b, _656_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _925___mcc_h470 = _source33.dtor_TypeArg_a0;
                  DAST._IType _926_b = _828___mcc_h409;
                  {
                    if (object.Equals(_926_b, _656_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _927_recursiveGen;
                      bool _928_recOwned;
                      bool _929_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _930_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _927_recursiveGen = _out429;
                      _928_recOwned = _out430;
                      _929_recErased = _out431;
                      _930_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _931_uneraseFn;
                      _931_uneraseFn = ((_928_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _931_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _927_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _928_recOwned;
                      isErased = true;
                      readIdents = _930_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _926_b), _926_b, _656_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                }
              }
            } else if (_source27.is_Nullable) {
              DAST._IType _932___mcc_h473 = _source27.dtor_Nullable_a0;
              DAST._IType _source35 = _664___mcc_h306;
              if (_source35.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _933___mcc_h477 = _source35.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _934___mcc_h478 = _source35.dtor_typeArgs;
                DAST._IResolvedType _935___mcc_h479 = _source35.dtor_resolved;
                DAST._IResolvedType _source36 = _935___mcc_h479;
                if (_source36.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _936___mcc_h486 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _937_recursiveGen;
                    bool _938_recOwned;
                    bool _939_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _940_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out437;
                    bool _out438;
                    bool _out439;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                    _937_recursiveGen = _out437;
                    _938_recOwned = _out438;
                    _939_recErased = _out439;
                    _940_recIdents = _out440;
                    if (!(_938_recOwned)) {
                      _937_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_937_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_937_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _938_recOwned;
                    isErased = _939_recErased;
                    readIdents = _940_recIdents;
                  }
                } else if (_source36.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _941___mcc_h489 = _source36.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _942_recursiveGen;
                    bool _943_recOwned;
                    bool _944_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _945_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out441;
                    bool _out442;
                    bool _out443;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                    _942_recursiveGen = _out441;
                    _943_recOwned = _out442;
                    _944_recErased = _out443;
                    _945_recIdents = _out444;
                    if (!(_943_recOwned)) {
                      _942_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_942_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_942_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _943_recOwned;
                    isErased = _944_recErased;
                    readIdents = _945_recIdents;
                  }
                } else {
                  DAST._IType _946___mcc_h492 = _source36.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _947_recursiveGen;
                    bool _948_recOwned;
                    bool _949_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _950_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out445;
                    bool _out446;
                    bool _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                    _947_recursiveGen = _out445;
                    _948_recOwned = _out446;
                    _949_recErased = _out447;
                    _950_recIdents = _out448;
                    if (!(_948_recOwned)) {
                      _947_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_947_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_947_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _948_recOwned;
                    isErased = _949_recErased;
                    readIdents = _950_recIdents;
                  }
                }
              } else if (_source35.is_Nullable) {
                DAST._IType _951___mcc_h495 = _source35.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _952_recursiveGen;
                  bool _953_recOwned;
                  bool _954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out449;
                  bool _out450;
                  bool _out451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                  _952_recursiveGen = _out449;
                  _953_recOwned = _out450;
                  _954_recErased = _out451;
                  _955_recIdents = _out452;
                  if (!(_953_recOwned)) {
                    _952_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_952_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_952_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _953_recOwned;
                  isErased = _954_recErased;
                  readIdents = _955_recIdents;
                }
              } else if (_source35.is_Tuple) {
                Dafny.ISequence<DAST._IType> _956___mcc_h498 = _source35.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _957_recursiveGen;
                  bool _958_recOwned;
                  bool _959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out453;
                  bool _out454;
                  bool _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                  _957_recursiveGen = _out453;
                  _958_recOwned = _out454;
                  _959_recErased = _out455;
                  _960_recIdents = _out456;
                  if (!(_958_recOwned)) {
                    _957_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_957_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_957_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _958_recOwned;
                  isErased = _959_recErased;
                  readIdents = _960_recIdents;
                }
              } else if (_source35.is_Array) {
                DAST._IType _961___mcc_h501 = _source35.dtor_element;
                BigInteger _962___mcc_h502 = _source35.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _963_recursiveGen;
                  bool _964_recOwned;
                  bool _965_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _966_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out457;
                  bool _out458;
                  bool _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                  _963_recursiveGen = _out457;
                  _964_recOwned = _out458;
                  _965_recErased = _out459;
                  _966_recIdents = _out460;
                  if (!(_964_recOwned)) {
                    _963_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_963_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_963_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _964_recOwned;
                  isErased = _965_recErased;
                  readIdents = _966_recIdents;
                }
              } else if (_source35.is_Seq) {
                DAST._IType _967___mcc_h507 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _968_recursiveGen;
                  bool _969_recOwned;
                  bool _970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out461;
                  bool _out462;
                  bool _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                  _968_recursiveGen = _out461;
                  _969_recOwned = _out462;
                  _970_recErased = _out463;
                  _971_recIdents = _out464;
                  if (!(_969_recOwned)) {
                    _968_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_968_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_968_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _969_recOwned;
                  isErased = _970_recErased;
                  readIdents = _971_recIdents;
                }
              } else if (_source35.is_Set) {
                DAST._IType _972___mcc_h510 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _973_recursiveGen;
                  bool _974_recOwned;
                  bool _975_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _976_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out465;
                  bool _out466;
                  bool _out467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                  _973_recursiveGen = _out465;
                  _974_recOwned = _out466;
                  _975_recErased = _out467;
                  _976_recIdents = _out468;
                  if (!(_974_recOwned)) {
                    _973_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_973_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_973_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _974_recOwned;
                  isErased = _975_recErased;
                  readIdents = _976_recIdents;
                }
              } else if (_source35.is_Multiset) {
                DAST._IType _977___mcc_h513 = _source35.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _978_recursiveGen;
                  bool _979_recOwned;
                  bool _980_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out469;
                  bool _out470;
                  bool _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                  _978_recursiveGen = _out469;
                  _979_recOwned = _out470;
                  _980_recErased = _out471;
                  _981_recIdents = _out472;
                  if (!(_979_recOwned)) {
                    _978_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_978_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_978_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _979_recOwned;
                  isErased = _980_recErased;
                  readIdents = _981_recIdents;
                }
              } else if (_source35.is_Map) {
                DAST._IType _982___mcc_h516 = _source35.dtor_key;
                DAST._IType _983___mcc_h517 = _source35.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _984_recursiveGen;
                  bool _985_recOwned;
                  bool _986_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _987_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out473;
                  bool _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                  _984_recursiveGen = _out473;
                  _985_recOwned = _out474;
                  _986_recErased = _out475;
                  _987_recIdents = _out476;
                  if (!(_985_recOwned)) {
                    _984_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_984_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_984_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _985_recOwned;
                  isErased = _986_recErased;
                  readIdents = _987_recIdents;
                }
              } else if (_source35.is_Arrow) {
                Dafny.ISequence<DAST._IType> _988___mcc_h522 = _source35.dtor_args;
                DAST._IType _989___mcc_h523 = _source35.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _990_recursiveGen;
                  bool _991_recOwned;
                  bool _992_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _993_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out477;
                  bool _out478;
                  bool _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                  _990_recursiveGen = _out477;
                  _991_recOwned = _out478;
                  _992_recErased = _out479;
                  _993_recIdents = _out480;
                  if (!(_991_recOwned)) {
                    _990_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _991_recOwned;
                  isErased = _992_recErased;
                  readIdents = _993_recIdents;
                }
              } else if (_source35.is_Primitive) {
                DAST._IPrimitive _994___mcc_h528 = _source35.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _995_recursiveGen;
                  bool _996_recOwned;
                  bool _997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out481;
                  bool _out482;
                  bool _out483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                  _995_recursiveGen = _out481;
                  _996_recOwned = _out482;
                  _997_recErased = _out483;
                  _998_recIdents = _out484;
                  if (!(_996_recOwned)) {
                    _995_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_995_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_995_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _996_recOwned;
                  isErased = _997_recErased;
                  readIdents = _998_recIdents;
                }
              } else if (_source35.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _999___mcc_h531 = _source35.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1000_recursiveGen;
                  bool _1001_recOwned;
                  bool _1002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1000_recursiveGen = _out485;
                  _1001_recOwned = _out486;
                  _1002_recErased = _out487;
                  _1003_recIdents = _out488;
                  if (!(_1001_recOwned)) {
                    _1000_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1000_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1000_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1001_recOwned;
                  isErased = _1002_recErased;
                  readIdents = _1003_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1004___mcc_h534 = _source35.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1005_recursiveGen;
                  bool _1006_recOwned;
                  bool _1007_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1008_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1005_recursiveGen = _out489;
                  _1006_recOwned = _out490;
                  _1007_recErased = _out491;
                  _1008_recIdents = _out492;
                  if (!(_1006_recOwned)) {
                    _1005_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1005_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1005_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1006_recOwned;
                  isErased = _1007_recErased;
                  readIdents = _1008_recIdents;
                }
              }
            } else if (_source27.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1009___mcc_h537 = _source27.dtor_Tuple_a0;
              DAST._IType _source37 = _664___mcc_h306;
              if (_source37.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1010___mcc_h541 = _source37.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1011___mcc_h542 = _source37.dtor_typeArgs;
                DAST._IResolvedType _1012___mcc_h543 = _source37.dtor_resolved;
                DAST._IResolvedType _source38 = _1012___mcc_h543;
                if (_source38.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1013___mcc_h547 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1014_recursiveGen;
                    bool _1015_recOwned;
                    bool _1016_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1017_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1014_recursiveGen = _out493;
                    _1015_recOwned = _out494;
                    _1016_recErased = _out495;
                    _1017_recIdents = _out496;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1015_recOwned;
                    isErased = _1016_recErased;
                    readIdents = _1017_recIdents;
                  }
                } else if (_source38.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1018___mcc_h549 = _source38.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1019_recursiveGen;
                    bool _1020_recOwned;
                    bool _1021_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1022_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1019_recursiveGen = _out497;
                    _1020_recOwned = _out498;
                    _1021_recErased = _out499;
                    _1022_recIdents = _out500;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1020_recOwned;
                    isErased = _1021_recErased;
                    readIdents = _1022_recIdents;
                  }
                } else {
                  DAST._IType _1023___mcc_h551 = _source38.dtor_Newtype_a0;
                  DAST._IType _1024_b = _1023___mcc_h551;
                  {
                    if (object.Equals(_657_fromTpe, _1024_b)) {
                      Dafny.ISequence<Dafny.Rune> _1025_recursiveGen;
                      bool _1026_recOwned;
                      bool _1027_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1028_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out501;
                      bool _out502;
                      bool _out503;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                      _1025_recursiveGen = _out501;
                      _1026_recOwned = _out502;
                      _1027_recErased = _out503;
                      _1028_recIdents = _out504;
                      Dafny.ISequence<Dafny.Rune> _1029_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out505;
                      _out505 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1029_rhsType = _out505;
                      Dafny.ISequence<Dafny.Rune> _1030_uneraseFn;
                      _1030_uneraseFn = ((_1026_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1029_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1030_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1026_recOwned;
                      isErased = false;
                      readIdents = _1028_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out506;
                      bool _out507;
                      bool _out508;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1024_b), _1024_b, _656_toTpe), selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                      s = _out506;
                      isOwned = _out507;
                      isErased = _out508;
                      readIdents = _out509;
                    }
                  }
                }
              } else if (_source37.is_Nullable) {
                DAST._IType _1031___mcc_h553 = _source37.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1032_recursiveGen;
                  bool _1033_recOwned;
                  bool _1034_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1035_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1032_recursiveGen = _out510;
                  _1033_recOwned = _out511;
                  _1034_recErased = _out512;
                  _1035_recIdents = _out513;
                  if (!(_1033_recOwned)) {
                    _1032_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1032_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1034_recErased;
                  readIdents = _1035_recIdents;
                }
              } else if (_source37.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1036___mcc_h555 = _source37.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1037_recursiveGen;
                  bool _1038_recOwned;
                  bool _1039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1037_recursiveGen = _out514;
                  _1038_recOwned = _out515;
                  _1039_recErased = _out516;
                  _1040_recIdents = _out517;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1038_recOwned;
                  isErased = _1039_recErased;
                  readIdents = _1040_recIdents;
                }
              } else if (_source37.is_Array) {
                DAST._IType _1041___mcc_h557 = _source37.dtor_element;
                BigInteger _1042___mcc_h558 = _source37.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1043_recursiveGen;
                  bool _1044_recOwned;
                  bool _1045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1043_recursiveGen = _out518;
                  _1044_recOwned = _out519;
                  _1045_recErased = _out520;
                  _1046_recIdents = _out521;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1044_recOwned;
                  isErased = _1045_recErased;
                  readIdents = _1046_recIdents;
                }
              } else if (_source37.is_Seq) {
                DAST._IType _1047___mcc_h561 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1048_recursiveGen;
                  bool _1049_recOwned;
                  bool _1050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1048_recursiveGen = _out522;
                  _1049_recOwned = _out523;
                  _1050_recErased = _out524;
                  _1051_recIdents = _out525;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1049_recOwned;
                  isErased = _1050_recErased;
                  readIdents = _1051_recIdents;
                }
              } else if (_source37.is_Set) {
                DAST._IType _1052___mcc_h563 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1053_recursiveGen;
                  bool _1054_recOwned;
                  bool _1055_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1056_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1053_recursiveGen = _out526;
                  _1054_recOwned = _out527;
                  _1055_recErased = _out528;
                  _1056_recIdents = _out529;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1054_recOwned;
                  isErased = _1055_recErased;
                  readIdents = _1056_recIdents;
                }
              } else if (_source37.is_Multiset) {
                DAST._IType _1057___mcc_h565 = _source37.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1058_recursiveGen;
                  bool _1059_recOwned;
                  bool _1060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _1058_recursiveGen = _out530;
                  _1059_recOwned = _out531;
                  _1060_recErased = _out532;
                  _1061_recIdents = _out533;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1059_recOwned;
                  isErased = _1060_recErased;
                  readIdents = _1061_recIdents;
                }
              } else if (_source37.is_Map) {
                DAST._IType _1062___mcc_h567 = _source37.dtor_key;
                DAST._IType _1063___mcc_h568 = _source37.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1064_recursiveGen;
                  bool _1065_recOwned;
                  bool _1066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _1064_recursiveGen = _out534;
                  _1065_recOwned = _out535;
                  _1066_recErased = _out536;
                  _1067_recIdents = _out537;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1065_recOwned;
                  isErased = _1066_recErased;
                  readIdents = _1067_recIdents;
                }
              } else if (_source37.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1068___mcc_h571 = _source37.dtor_args;
                DAST._IType _1069___mcc_h572 = _source37.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1070_recursiveGen;
                  bool _1071_recOwned;
                  bool _1072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _1070_recursiveGen = _out538;
                  _1071_recOwned = _out539;
                  _1072_recErased = _out540;
                  _1073_recIdents = _out541;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1071_recOwned;
                  isErased = _1072_recErased;
                  readIdents = _1073_recIdents;
                }
              } else if (_source37.is_Primitive) {
                DAST._IPrimitive _1074___mcc_h575 = _source37.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1075_recursiveGen;
                  bool _1076_recOwned;
                  bool _1077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _1075_recursiveGen = _out542;
                  _1076_recOwned = _out543;
                  _1077_recErased = _out544;
                  _1078_recIdents = _out545;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1076_recOwned;
                  isErased = _1077_recErased;
                  readIdents = _1078_recIdents;
                }
              } else if (_source37.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1079___mcc_h577 = _source37.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1080_recursiveGen;
                  bool _1081_recOwned;
                  bool _1082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1080_recursiveGen = _out546;
                  _1081_recOwned = _out547;
                  _1082_recErased = _out548;
                  _1083_recIdents = _out549;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1081_recOwned;
                  isErased = _1082_recErased;
                  readIdents = _1083_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1084___mcc_h579 = _source37.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1085_recursiveGen;
                  bool _1086_recOwned;
                  bool _1087_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1088_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1085_recursiveGen = _out550;
                  _1086_recOwned = _out551;
                  _1087_recErased = _out552;
                  _1088_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1085_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1086_recOwned;
                  isErased = _1087_recErased;
                  readIdents = _1088_recIdents;
                }
              }
            } else if (_source27.is_Array) {
              DAST._IType _1089___mcc_h581 = _source27.dtor_element;
              BigInteger _1090___mcc_h582 = _source27.dtor_dims;
              DAST._IType _source39 = _664___mcc_h306;
              if (_source39.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1091___mcc_h589 = _source39.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1092___mcc_h590 = _source39.dtor_typeArgs;
                DAST._IResolvedType _1093___mcc_h591 = _source39.dtor_resolved;
                DAST._IResolvedType _source40 = _1093___mcc_h591;
                if (_source40.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1094___mcc_h595 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1095_recursiveGen;
                    bool _1096_recOwned;
                    bool _1097_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1098_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out554;
                    bool _out555;
                    bool _out556;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                    _1095_recursiveGen = _out554;
                    _1096_recOwned = _out555;
                    _1097_recErased = _out556;
                    _1098_recIdents = _out557;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1096_recOwned;
                    isErased = _1097_recErased;
                    readIdents = _1098_recIdents;
                  }
                } else if (_source40.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1099___mcc_h597 = _source40.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1100_recursiveGen;
                    bool _1101_recOwned;
                    bool _1102_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1103_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out558;
                    bool _out559;
                    bool _out560;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                    _1100_recursiveGen = _out558;
                    _1101_recOwned = _out559;
                    _1102_recErased = _out560;
                    _1103_recIdents = _out561;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1100_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1101_recOwned;
                    isErased = _1102_recErased;
                    readIdents = _1103_recIdents;
                  }
                } else {
                  DAST._IType _1104___mcc_h599 = _source40.dtor_Newtype_a0;
                  DAST._IType _1105_b = _1104___mcc_h599;
                  {
                    if (object.Equals(_657_fromTpe, _1105_b)) {
                      Dafny.ISequence<Dafny.Rune> _1106_recursiveGen;
                      bool _1107_recOwned;
                      bool _1108_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1109_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      _1106_recursiveGen = _out562;
                      _1107_recOwned = _out563;
                      _1108_recErased = _out564;
                      _1109_recIdents = _out565;
                      Dafny.ISequence<Dafny.Rune> _1110_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out566;
                      _out566 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1110_rhsType = _out566;
                      Dafny.ISequence<Dafny.Rune> _1111_uneraseFn;
                      _1111_uneraseFn = ((_1107_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1110_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1111_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1107_recOwned;
                      isErased = false;
                      readIdents = _1109_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out567;
                      bool _out568;
                      bool _out569;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1105_b), _1105_b, _656_toTpe), selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                      s = _out567;
                      isOwned = _out568;
                      isErased = _out569;
                      readIdents = _out570;
                    }
                  }
                }
              } else if (_source39.is_Nullable) {
                DAST._IType _1112___mcc_h601 = _source39.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1113_recursiveGen;
                  bool _1114_recOwned;
                  bool _1115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1113_recursiveGen = _out571;
                  _1114_recOwned = _out572;
                  _1115_recErased = _out573;
                  _1116_recIdents = _out574;
                  if (!(_1114_recOwned)) {
                    _1113_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1113_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1115_recErased;
                  readIdents = _1116_recIdents;
                }
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1117___mcc_h603 = _source39.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1118_recursiveGen;
                  bool _1119_recOwned;
                  bool _1120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1118_recursiveGen = _out575;
                  _1119_recOwned = _out576;
                  _1120_recErased = _out577;
                  _1121_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1119_recOwned;
                  isErased = _1120_recErased;
                  readIdents = _1121_recIdents;
                }
              } else if (_source39.is_Array) {
                DAST._IType _1122___mcc_h605 = _source39.dtor_element;
                BigInteger _1123___mcc_h606 = _source39.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1124_recursiveGen;
                  bool _1125_recOwned;
                  bool _1126_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1127_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1124_recursiveGen = _out579;
                  _1125_recOwned = _out580;
                  _1126_recErased = _out581;
                  _1127_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1124_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1125_recOwned;
                  isErased = _1126_recErased;
                  readIdents = _1127_recIdents;
                }
              } else if (_source39.is_Seq) {
                DAST._IType _1128___mcc_h609 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1129_recursiveGen;
                  bool _1130_recOwned;
                  bool _1131_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1132_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1129_recursiveGen = _out583;
                  _1130_recOwned = _out584;
                  _1131_recErased = _out585;
                  _1132_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1129_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1130_recOwned;
                  isErased = _1131_recErased;
                  readIdents = _1132_recIdents;
                }
              } else if (_source39.is_Set) {
                DAST._IType _1133___mcc_h611 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1134_recursiveGen;
                  bool _1135_recOwned;
                  bool _1136_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1137_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1134_recursiveGen = _out587;
                  _1135_recOwned = _out588;
                  _1136_recErased = _out589;
                  _1137_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1134_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1135_recOwned;
                  isErased = _1136_recErased;
                  readIdents = _1137_recIdents;
                }
              } else if (_source39.is_Multiset) {
                DAST._IType _1138___mcc_h613 = _source39.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1139_recursiveGen;
                  bool _1140_recOwned;
                  bool _1141_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1142_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _1139_recursiveGen = _out591;
                  _1140_recOwned = _out592;
                  _1141_recErased = _out593;
                  _1142_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1139_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1140_recOwned;
                  isErased = _1141_recErased;
                  readIdents = _1142_recIdents;
                }
              } else if (_source39.is_Map) {
                DAST._IType _1143___mcc_h615 = _source39.dtor_key;
                DAST._IType _1144___mcc_h616 = _source39.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1145_recursiveGen;
                  bool _1146_recOwned;
                  bool _1147_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1148_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _1145_recursiveGen = _out595;
                  _1146_recOwned = _out596;
                  _1147_recErased = _out597;
                  _1148_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1146_recOwned;
                  isErased = _1147_recErased;
                  readIdents = _1148_recIdents;
                }
              } else if (_source39.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1149___mcc_h619 = _source39.dtor_args;
                DAST._IType _1150___mcc_h620 = _source39.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1151_recursiveGen;
                  bool _1152_recOwned;
                  bool _1153_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1154_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _1151_recursiveGen = _out599;
                  _1152_recOwned = _out600;
                  _1153_recErased = _out601;
                  _1154_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1151_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1152_recOwned;
                  isErased = _1153_recErased;
                  readIdents = _1154_recIdents;
                }
              } else if (_source39.is_Primitive) {
                DAST._IPrimitive _1155___mcc_h623 = _source39.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1156_recursiveGen;
                  bool _1157_recOwned;
                  bool _1158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _1156_recursiveGen = _out603;
                  _1157_recOwned = _out604;
                  _1158_recErased = _out605;
                  _1159_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1157_recOwned;
                  isErased = _1158_recErased;
                  readIdents = _1159_recIdents;
                }
              } else if (_source39.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1160___mcc_h625 = _source39.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1161_recursiveGen;
                  bool _1162_recOwned;
                  bool _1163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1161_recursiveGen = _out607;
                  _1162_recOwned = _out608;
                  _1163_recErased = _out609;
                  _1164_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1162_recOwned;
                  isErased = _1163_recErased;
                  readIdents = _1164_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1165___mcc_h627 = _source39.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1166_recursiveGen;
                  bool _1167_recOwned;
                  bool _1168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1166_recursiveGen = _out611;
                  _1167_recOwned = _out612;
                  _1168_recErased = _out613;
                  _1169_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1167_recOwned;
                  isErased = _1168_recErased;
                  readIdents = _1169_recIdents;
                }
              }
            } else if (_source27.is_Seq) {
              DAST._IType _1170___mcc_h629 = _source27.dtor_element;
              DAST._IType _source41 = _664___mcc_h306;
              if (_source41.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1171___mcc_h633 = _source41.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1172___mcc_h634 = _source41.dtor_typeArgs;
                DAST._IResolvedType _1173___mcc_h635 = _source41.dtor_resolved;
                DAST._IResolvedType _source42 = _1173___mcc_h635;
                if (_source42.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1174___mcc_h639 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1175_recursiveGen;
                    bool _1176_recOwned;
                    bool _1177_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1178_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out615;
                    bool _out616;
                    bool _out617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                    _1175_recursiveGen = _out615;
                    _1176_recOwned = _out616;
                    _1177_recErased = _out617;
                    _1178_recIdents = _out618;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1176_recOwned;
                    isErased = _1177_recErased;
                    readIdents = _1178_recIdents;
                  }
                } else if (_source42.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1179___mcc_h641 = _source42.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1180_recursiveGen;
                    bool _1181_recOwned;
                    bool _1182_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1183_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out619;
                    bool _out620;
                    bool _out621;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                    _1180_recursiveGen = _out619;
                    _1181_recOwned = _out620;
                    _1182_recErased = _out621;
                    _1183_recIdents = _out622;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1181_recOwned;
                    isErased = _1182_recErased;
                    readIdents = _1183_recIdents;
                  }
                } else {
                  DAST._IType _1184___mcc_h643 = _source42.dtor_Newtype_a0;
                  DAST._IType _1185_b = _1184___mcc_h643;
                  {
                    if (object.Equals(_657_fromTpe, _1185_b)) {
                      Dafny.ISequence<Dafny.Rune> _1186_recursiveGen;
                      bool _1187_recOwned;
                      bool _1188_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1189_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      _1186_recursiveGen = _out623;
                      _1187_recOwned = _out624;
                      _1188_recErased = _out625;
                      _1189_recIdents = _out626;
                      Dafny.ISequence<Dafny.Rune> _1190_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out627;
                      _out627 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1190_rhsType = _out627;
                      Dafny.ISequence<Dafny.Rune> _1191_uneraseFn;
                      _1191_uneraseFn = ((_1187_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1190_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1191_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1187_recOwned;
                      isErased = false;
                      readIdents = _1189_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out628;
                      bool _out629;
                      bool _out630;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1185_b), _1185_b, _656_toTpe), selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                      s = _out628;
                      isOwned = _out629;
                      isErased = _out630;
                      readIdents = _out631;
                    }
                  }
                }
              } else if (_source41.is_Nullable) {
                DAST._IType _1192___mcc_h645 = _source41.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1193_recursiveGen;
                  bool _1194_recOwned;
                  bool _1195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1193_recursiveGen = _out632;
                  _1194_recOwned = _out633;
                  _1195_recErased = _out634;
                  _1196_recIdents = _out635;
                  if (!(_1194_recOwned)) {
                    _1193_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1193_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1195_recErased;
                  readIdents = _1196_recIdents;
                }
              } else if (_source41.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1197___mcc_h647 = _source41.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1198_recursiveGen;
                  bool _1199_recOwned;
                  bool _1200_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1201_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1198_recursiveGen = _out636;
                  _1199_recOwned = _out637;
                  _1200_recErased = _out638;
                  _1201_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1199_recOwned;
                  isErased = _1200_recErased;
                  readIdents = _1201_recIdents;
                }
              } else if (_source41.is_Array) {
                DAST._IType _1202___mcc_h649 = _source41.dtor_element;
                BigInteger _1203___mcc_h650 = _source41.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1204_recursiveGen;
                  bool _1205_recOwned;
                  bool _1206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1204_recursiveGen = _out640;
                  _1205_recOwned = _out641;
                  _1206_recErased = _out642;
                  _1207_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1205_recOwned;
                  isErased = _1206_recErased;
                  readIdents = _1207_recIdents;
                }
              } else if (_source41.is_Seq) {
                DAST._IType _1208___mcc_h653 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1209_recursiveGen;
                  bool _1210_recOwned;
                  bool _1211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1209_recursiveGen = _out644;
                  _1210_recOwned = _out645;
                  _1211_recErased = _out646;
                  _1212_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1210_recOwned;
                  isErased = _1211_recErased;
                  readIdents = _1212_recIdents;
                }
              } else if (_source41.is_Set) {
                DAST._IType _1213___mcc_h655 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1214_recursiveGen;
                  bool _1215_recOwned;
                  bool _1216_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1217_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1214_recursiveGen = _out648;
                  _1215_recOwned = _out649;
                  _1216_recErased = _out650;
                  _1217_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1214_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1215_recOwned;
                  isErased = _1216_recErased;
                  readIdents = _1217_recIdents;
                }
              } else if (_source41.is_Multiset) {
                DAST._IType _1218___mcc_h657 = _source41.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1219_recursiveGen;
                  bool _1220_recOwned;
                  bool _1221_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1222_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _1219_recursiveGen = _out652;
                  _1220_recOwned = _out653;
                  _1221_recErased = _out654;
                  _1222_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1219_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1220_recOwned;
                  isErased = _1221_recErased;
                  readIdents = _1222_recIdents;
                }
              } else if (_source41.is_Map) {
                DAST._IType _1223___mcc_h659 = _source41.dtor_key;
                DAST._IType _1224___mcc_h660 = _source41.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1225_recursiveGen;
                  bool _1226_recOwned;
                  bool _1227_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1228_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _1225_recursiveGen = _out656;
                  _1226_recOwned = _out657;
                  _1227_recErased = _out658;
                  _1228_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1225_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1226_recOwned;
                  isErased = _1227_recErased;
                  readIdents = _1228_recIdents;
                }
              } else if (_source41.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1229___mcc_h663 = _source41.dtor_args;
                DAST._IType _1230___mcc_h664 = _source41.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1231_recursiveGen;
                  bool _1232_recOwned;
                  bool _1233_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1234_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _1231_recursiveGen = _out660;
                  _1232_recOwned = _out661;
                  _1233_recErased = _out662;
                  _1234_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1232_recOwned;
                  isErased = _1233_recErased;
                  readIdents = _1234_recIdents;
                }
              } else if (_source41.is_Primitive) {
                DAST._IPrimitive _1235___mcc_h667 = _source41.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1236_recursiveGen;
                  bool _1237_recOwned;
                  bool _1238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _1236_recursiveGen = _out664;
                  _1237_recOwned = _out665;
                  _1238_recErased = _out666;
                  _1239_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1237_recOwned;
                  isErased = _1238_recErased;
                  readIdents = _1239_recIdents;
                }
              } else if (_source41.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1240___mcc_h669 = _source41.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1241_recursiveGen;
                  bool _1242_recOwned;
                  bool _1243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1241_recursiveGen = _out668;
                  _1242_recOwned = _out669;
                  _1243_recErased = _out670;
                  _1244_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1242_recOwned;
                  isErased = _1243_recErased;
                  readIdents = _1244_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1245___mcc_h671 = _source41.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1246_recursiveGen;
                  bool _1247_recOwned;
                  bool _1248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1246_recursiveGen = _out672;
                  _1247_recOwned = _out673;
                  _1248_recErased = _out674;
                  _1249_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1247_recOwned;
                  isErased = _1248_recErased;
                  readIdents = _1249_recIdents;
                }
              }
            } else if (_source27.is_Set) {
              DAST._IType _1250___mcc_h673 = _source27.dtor_element;
              DAST._IType _source43 = _664___mcc_h306;
              if (_source43.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1251___mcc_h677 = _source43.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1252___mcc_h678 = _source43.dtor_typeArgs;
                DAST._IResolvedType _1253___mcc_h679 = _source43.dtor_resolved;
                DAST._IResolvedType _source44 = _1253___mcc_h679;
                if (_source44.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1254___mcc_h683 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1255_recursiveGen;
                    bool _1256_recOwned;
                    bool _1257_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1258_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out676;
                    bool _out677;
                    bool _out678;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                    _1255_recursiveGen = _out676;
                    _1256_recOwned = _out677;
                    _1257_recErased = _out678;
                    _1258_recIdents = _out679;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1255_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1256_recOwned;
                    isErased = _1257_recErased;
                    readIdents = _1258_recIdents;
                  }
                } else if (_source44.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1259___mcc_h685 = _source44.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1260_recursiveGen;
                    bool _1261_recOwned;
                    bool _1262_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1263_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out680;
                    bool _out681;
                    bool _out682;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                    _1260_recursiveGen = _out680;
                    _1261_recOwned = _out681;
                    _1262_recErased = _out682;
                    _1263_recIdents = _out683;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1261_recOwned;
                    isErased = _1262_recErased;
                    readIdents = _1263_recIdents;
                  }
                } else {
                  DAST._IType _1264___mcc_h687 = _source44.dtor_Newtype_a0;
                  DAST._IType _1265_b = _1264___mcc_h687;
                  {
                    if (object.Equals(_657_fromTpe, _1265_b)) {
                      Dafny.ISequence<Dafny.Rune> _1266_recursiveGen;
                      bool _1267_recOwned;
                      bool _1268_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1269_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      _1266_recursiveGen = _out684;
                      _1267_recOwned = _out685;
                      _1268_recErased = _out686;
                      _1269_recIdents = _out687;
                      Dafny.ISequence<Dafny.Rune> _1270_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out688;
                      _out688 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1270_rhsType = _out688;
                      Dafny.ISequence<Dafny.Rune> _1271_uneraseFn;
                      _1271_uneraseFn = ((_1267_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1270_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1271_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1266_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1267_recOwned;
                      isErased = false;
                      readIdents = _1269_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out689;
                      bool _out690;
                      bool _out691;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1265_b), _1265_b, _656_toTpe), selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                      s = _out689;
                      isOwned = _out690;
                      isErased = _out691;
                      readIdents = _out692;
                    }
                  }
                }
              } else if (_source43.is_Nullable) {
                DAST._IType _1272___mcc_h689 = _source43.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1273_recursiveGen;
                  bool _1274_recOwned;
                  bool _1275_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1276_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1273_recursiveGen = _out693;
                  _1274_recOwned = _out694;
                  _1275_recErased = _out695;
                  _1276_recIdents = _out696;
                  if (!(_1274_recOwned)) {
                    _1273_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1273_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1275_recErased;
                  readIdents = _1276_recIdents;
                }
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1277___mcc_h691 = _source43.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1278_recursiveGen;
                  bool _1279_recOwned;
                  bool _1280_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1281_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1278_recursiveGen = _out697;
                  _1279_recOwned = _out698;
                  _1280_recErased = _out699;
                  _1281_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1279_recOwned;
                  isErased = _1280_recErased;
                  readIdents = _1281_recIdents;
                }
              } else if (_source43.is_Array) {
                DAST._IType _1282___mcc_h693 = _source43.dtor_element;
                BigInteger _1283___mcc_h694 = _source43.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1284_recursiveGen;
                  bool _1285_recOwned;
                  bool _1286_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1287_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1284_recursiveGen = _out701;
                  _1285_recOwned = _out702;
                  _1286_recErased = _out703;
                  _1287_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1285_recOwned;
                  isErased = _1286_recErased;
                  readIdents = _1287_recIdents;
                }
              } else if (_source43.is_Seq) {
                DAST._IType _1288___mcc_h697 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1289_recursiveGen;
                  bool _1290_recOwned;
                  bool _1291_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1292_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1289_recursiveGen = _out705;
                  _1290_recOwned = _out706;
                  _1291_recErased = _out707;
                  _1292_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1290_recOwned;
                  isErased = _1291_recErased;
                  readIdents = _1292_recIdents;
                }
              } else if (_source43.is_Set) {
                DAST._IType _1293___mcc_h699 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1294_recursiveGen;
                  bool _1295_recOwned;
                  bool _1296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1294_recursiveGen = _out709;
                  _1295_recOwned = _out710;
                  _1296_recErased = _out711;
                  _1297_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1295_recOwned;
                  isErased = _1296_recErased;
                  readIdents = _1297_recIdents;
                }
              } else if (_source43.is_Multiset) {
                DAST._IType _1298___mcc_h701 = _source43.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1299_recursiveGen;
                  bool _1300_recOwned;
                  bool _1301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _1299_recursiveGen = _out713;
                  _1300_recOwned = _out714;
                  _1301_recErased = _out715;
                  _1302_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1300_recOwned;
                  isErased = _1301_recErased;
                  readIdents = _1302_recIdents;
                }
              } else if (_source43.is_Map) {
                DAST._IType _1303___mcc_h703 = _source43.dtor_key;
                DAST._IType _1304___mcc_h704 = _source43.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1305_recursiveGen;
                  bool _1306_recOwned;
                  bool _1307_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1308_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _1305_recursiveGen = _out717;
                  _1306_recOwned = _out718;
                  _1307_recErased = _out719;
                  _1308_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1305_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1306_recOwned;
                  isErased = _1307_recErased;
                  readIdents = _1308_recIdents;
                }
              } else if (_source43.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1309___mcc_h707 = _source43.dtor_args;
                DAST._IType _1310___mcc_h708 = _source43.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1311_recursiveGen;
                  bool _1312_recOwned;
                  bool _1313_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1314_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _1311_recursiveGen = _out721;
                  _1312_recOwned = _out722;
                  _1313_recErased = _out723;
                  _1314_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1311_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1312_recOwned;
                  isErased = _1313_recErased;
                  readIdents = _1314_recIdents;
                }
              } else if (_source43.is_Primitive) {
                DAST._IPrimitive _1315___mcc_h711 = _source43.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1316_recursiveGen;
                  bool _1317_recOwned;
                  bool _1318_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1319_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _1316_recursiveGen = _out725;
                  _1317_recOwned = _out726;
                  _1318_recErased = _out727;
                  _1319_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1317_recOwned;
                  isErased = _1318_recErased;
                  readIdents = _1319_recIdents;
                }
              } else if (_source43.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1320___mcc_h713 = _source43.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1321_recursiveGen;
                  bool _1322_recOwned;
                  bool _1323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1321_recursiveGen = _out729;
                  _1322_recOwned = _out730;
                  _1323_recErased = _out731;
                  _1324_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1322_recOwned;
                  isErased = _1323_recErased;
                  readIdents = _1324_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1325___mcc_h715 = _source43.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1326_recursiveGen;
                  bool _1327_recOwned;
                  bool _1328_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1329_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1326_recursiveGen = _out733;
                  _1327_recOwned = _out734;
                  _1328_recErased = _out735;
                  _1329_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1327_recOwned;
                  isErased = _1328_recErased;
                  readIdents = _1329_recIdents;
                }
              }
            } else if (_source27.is_Multiset) {
              DAST._IType _1330___mcc_h717 = _source27.dtor_element;
              DAST._IType _source45 = _664___mcc_h306;
              if (_source45.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1331___mcc_h721 = _source45.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1332___mcc_h722 = _source45.dtor_typeArgs;
                DAST._IResolvedType _1333___mcc_h723 = _source45.dtor_resolved;
                DAST._IResolvedType _source46 = _1333___mcc_h723;
                if (_source46.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1334___mcc_h727 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1335_recursiveGen;
                    bool _1336_recOwned;
                    bool _1337_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1338_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out737;
                    bool _out738;
                    bool _out739;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                    _1335_recursiveGen = _out737;
                    _1336_recOwned = _out738;
                    _1337_recErased = _out739;
                    _1338_recIdents = _out740;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1335_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1336_recOwned;
                    isErased = _1337_recErased;
                    readIdents = _1338_recIdents;
                  }
                } else if (_source46.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1339___mcc_h729 = _source46.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1340_recursiveGen;
                    bool _1341_recOwned;
                    bool _1342_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1343_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out741;
                    bool _out742;
                    bool _out743;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                    _1340_recursiveGen = _out741;
                    _1341_recOwned = _out742;
                    _1342_recErased = _out743;
                    _1343_recIdents = _out744;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1340_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1341_recOwned;
                    isErased = _1342_recErased;
                    readIdents = _1343_recIdents;
                  }
                } else {
                  DAST._IType _1344___mcc_h731 = _source46.dtor_Newtype_a0;
                  DAST._IType _1345_b = _1344___mcc_h731;
                  {
                    if (object.Equals(_657_fromTpe, _1345_b)) {
                      Dafny.ISequence<Dafny.Rune> _1346_recursiveGen;
                      bool _1347_recOwned;
                      bool _1348_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1349_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      _1346_recursiveGen = _out745;
                      _1347_recOwned = _out746;
                      _1348_recErased = _out747;
                      _1349_recIdents = _out748;
                      Dafny.ISequence<Dafny.Rune> _1350_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out749;
                      _out749 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1350_rhsType = _out749;
                      Dafny.ISequence<Dafny.Rune> _1351_uneraseFn;
                      _1351_uneraseFn = ((_1347_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1350_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1351_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1346_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1347_recOwned;
                      isErased = false;
                      readIdents = _1349_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out750;
                      bool _out751;
                      bool _out752;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1345_b), _1345_b, _656_toTpe), selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                      s = _out750;
                      isOwned = _out751;
                      isErased = _out752;
                      readIdents = _out753;
                    }
                  }
                }
              } else if (_source45.is_Nullable) {
                DAST._IType _1352___mcc_h733 = _source45.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1353_recursiveGen;
                  bool _1354_recOwned;
                  bool _1355_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1356_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1353_recursiveGen = _out754;
                  _1354_recOwned = _out755;
                  _1355_recErased = _out756;
                  _1356_recIdents = _out757;
                  if (!(_1354_recOwned)) {
                    _1353_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1353_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1353_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1355_recErased;
                  readIdents = _1356_recIdents;
                }
              } else if (_source45.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1357___mcc_h735 = _source45.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1358_recursiveGen;
                  bool _1359_recOwned;
                  bool _1360_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1361_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1358_recursiveGen = _out758;
                  _1359_recOwned = _out759;
                  _1360_recErased = _out760;
                  _1361_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1359_recOwned;
                  isErased = _1360_recErased;
                  readIdents = _1361_recIdents;
                }
              } else if (_source45.is_Array) {
                DAST._IType _1362___mcc_h737 = _source45.dtor_element;
                BigInteger _1363___mcc_h738 = _source45.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1364_recursiveGen;
                  bool _1365_recOwned;
                  bool _1366_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1367_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1364_recursiveGen = _out762;
                  _1365_recOwned = _out763;
                  _1366_recErased = _out764;
                  _1367_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1365_recOwned;
                  isErased = _1366_recErased;
                  readIdents = _1367_recIdents;
                }
              } else if (_source45.is_Seq) {
                DAST._IType _1368___mcc_h741 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1369_recursiveGen;
                  bool _1370_recOwned;
                  bool _1371_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1372_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1369_recursiveGen = _out766;
                  _1370_recOwned = _out767;
                  _1371_recErased = _out768;
                  _1372_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1370_recOwned;
                  isErased = _1371_recErased;
                  readIdents = _1372_recIdents;
                }
              } else if (_source45.is_Set) {
                DAST._IType _1373___mcc_h743 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1374_recursiveGen;
                  bool _1375_recOwned;
                  bool _1376_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1377_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1374_recursiveGen = _out770;
                  _1375_recOwned = _out771;
                  _1376_recErased = _out772;
                  _1377_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1374_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1375_recOwned;
                  isErased = _1376_recErased;
                  readIdents = _1377_recIdents;
                }
              } else if (_source45.is_Multiset) {
                DAST._IType _1378___mcc_h745 = _source45.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1379_recursiveGen;
                  bool _1380_recOwned;
                  bool _1381_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1382_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _1379_recursiveGen = _out774;
                  _1380_recOwned = _out775;
                  _1381_recErased = _out776;
                  _1382_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1380_recOwned;
                  isErased = _1381_recErased;
                  readIdents = _1382_recIdents;
                }
              } else if (_source45.is_Map) {
                DAST._IType _1383___mcc_h747 = _source45.dtor_key;
                DAST._IType _1384___mcc_h748 = _source45.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1385_recursiveGen;
                  bool _1386_recOwned;
                  bool _1387_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1388_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _1385_recursiveGen = _out778;
                  _1386_recOwned = _out779;
                  _1387_recErased = _out780;
                  _1388_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1386_recOwned;
                  isErased = _1387_recErased;
                  readIdents = _1388_recIdents;
                }
              } else if (_source45.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1389___mcc_h751 = _source45.dtor_args;
                DAST._IType _1390___mcc_h752 = _source45.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1391_recursiveGen;
                  bool _1392_recOwned;
                  bool _1393_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1394_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _1391_recursiveGen = _out782;
                  _1392_recOwned = _out783;
                  _1393_recErased = _out784;
                  _1394_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1392_recOwned;
                  isErased = _1393_recErased;
                  readIdents = _1394_recIdents;
                }
              } else if (_source45.is_Primitive) {
                DAST._IPrimitive _1395___mcc_h755 = _source45.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1396_recursiveGen;
                  bool _1397_recOwned;
                  bool _1398_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1399_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _1396_recursiveGen = _out786;
                  _1397_recOwned = _out787;
                  _1398_recErased = _out788;
                  _1399_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1396_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1397_recOwned;
                  isErased = _1398_recErased;
                  readIdents = _1399_recIdents;
                }
              } else if (_source45.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1400___mcc_h757 = _source45.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1401_recursiveGen;
                  bool _1402_recOwned;
                  bool _1403_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1404_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _1401_recursiveGen = _out790;
                  _1402_recOwned = _out791;
                  _1403_recErased = _out792;
                  _1404_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1402_recOwned;
                  isErased = _1403_recErased;
                  readIdents = _1404_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1405___mcc_h759 = _source45.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1406_recursiveGen;
                  bool _1407_recOwned;
                  bool _1408_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1409_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _1406_recursiveGen = _out794;
                  _1407_recOwned = _out795;
                  _1408_recErased = _out796;
                  _1409_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1406_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1407_recOwned;
                  isErased = _1408_recErased;
                  readIdents = _1409_recIdents;
                }
              }
            } else if (_source27.is_Map) {
              DAST._IType _1410___mcc_h761 = _source27.dtor_key;
              DAST._IType _1411___mcc_h762 = _source27.dtor_value;
              DAST._IType _source47 = _664___mcc_h306;
              if (_source47.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1412___mcc_h769 = _source47.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1413___mcc_h770 = _source47.dtor_typeArgs;
                DAST._IResolvedType _1414___mcc_h771 = _source47.dtor_resolved;
                DAST._IResolvedType _source48 = _1414___mcc_h771;
                if (_source48.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1415___mcc_h775 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1416_recursiveGen;
                    bool _1417_recOwned;
                    bool _1418_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1419_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out798;
                    bool _out799;
                    bool _out800;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                    _1416_recursiveGen = _out798;
                    _1417_recOwned = _out799;
                    _1418_recErased = _out800;
                    _1419_recIdents = _out801;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1417_recOwned;
                    isErased = _1418_recErased;
                    readIdents = _1419_recIdents;
                  }
                } else if (_source48.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1420___mcc_h777 = _source48.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1421_recursiveGen;
                    bool _1422_recOwned;
                    bool _1423_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1424_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out802;
                    bool _out803;
                    bool _out804;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                    _1421_recursiveGen = _out802;
                    _1422_recOwned = _out803;
                    _1423_recErased = _out804;
                    _1424_recIdents = _out805;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1421_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1422_recOwned;
                    isErased = _1423_recErased;
                    readIdents = _1424_recIdents;
                  }
                } else {
                  DAST._IType _1425___mcc_h779 = _source48.dtor_Newtype_a0;
                  DAST._IType _1426_b = _1425___mcc_h779;
                  {
                    if (object.Equals(_657_fromTpe, _1426_b)) {
                      Dafny.ISequence<Dafny.Rune> _1427_recursiveGen;
                      bool _1428_recOwned;
                      bool _1429_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1430_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      _1427_recursiveGen = _out806;
                      _1428_recOwned = _out807;
                      _1429_recErased = _out808;
                      _1430_recIdents = _out809;
                      Dafny.ISequence<Dafny.Rune> _1431_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out810;
                      _out810 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1431_rhsType = _out810;
                      Dafny.ISequence<Dafny.Rune> _1432_uneraseFn;
                      _1432_uneraseFn = ((_1428_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1431_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1432_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1427_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1428_recOwned;
                      isErased = false;
                      readIdents = _1430_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out811;
                      bool _out812;
                      bool _out813;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1426_b), _1426_b, _656_toTpe), selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                      s = _out811;
                      isOwned = _out812;
                      isErased = _out813;
                      readIdents = _out814;
                    }
                  }
                }
              } else if (_source47.is_Nullable) {
                DAST._IType _1433___mcc_h781 = _source47.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1434_recursiveGen;
                  bool _1435_recOwned;
                  bool _1436_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1437_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1434_recursiveGen = _out815;
                  _1435_recOwned = _out816;
                  _1436_recErased = _out817;
                  _1437_recIdents = _out818;
                  if (!(_1435_recOwned)) {
                    _1434_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1434_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1436_recErased;
                  readIdents = _1437_recIdents;
                }
              } else if (_source47.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1438___mcc_h783 = _source47.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1439_recursiveGen;
                  bool _1440_recOwned;
                  bool _1441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1439_recursiveGen = _out819;
                  _1440_recOwned = _out820;
                  _1441_recErased = _out821;
                  _1442_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1440_recOwned;
                  isErased = _1441_recErased;
                  readIdents = _1442_recIdents;
                }
              } else if (_source47.is_Array) {
                DAST._IType _1443___mcc_h785 = _source47.dtor_element;
                BigInteger _1444___mcc_h786 = _source47.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1445_recursiveGen;
                  bool _1446_recOwned;
                  bool _1447_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1448_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1445_recursiveGen = _out823;
                  _1446_recOwned = _out824;
                  _1447_recErased = _out825;
                  _1448_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1445_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1446_recOwned;
                  isErased = _1447_recErased;
                  readIdents = _1448_recIdents;
                }
              } else if (_source47.is_Seq) {
                DAST._IType _1449___mcc_h789 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1450_recursiveGen;
                  bool _1451_recOwned;
                  bool _1452_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1453_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1450_recursiveGen = _out827;
                  _1451_recOwned = _out828;
                  _1452_recErased = _out829;
                  _1453_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1451_recOwned;
                  isErased = _1452_recErased;
                  readIdents = _1453_recIdents;
                }
              } else if (_source47.is_Set) {
                DAST._IType _1454___mcc_h791 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1455_recursiveGen;
                  bool _1456_recOwned;
                  bool _1457_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1458_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1455_recursiveGen = _out831;
                  _1456_recOwned = _out832;
                  _1457_recErased = _out833;
                  _1458_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1456_recOwned;
                  isErased = _1457_recErased;
                  readIdents = _1458_recIdents;
                }
              } else if (_source47.is_Multiset) {
                DAST._IType _1459___mcc_h793 = _source47.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1460_recursiveGen;
                  bool _1461_recOwned;
                  bool _1462_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1463_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _1460_recursiveGen = _out835;
                  _1461_recOwned = _out836;
                  _1462_recErased = _out837;
                  _1463_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1461_recOwned;
                  isErased = _1462_recErased;
                  readIdents = _1463_recIdents;
                }
              } else if (_source47.is_Map) {
                DAST._IType _1464___mcc_h795 = _source47.dtor_key;
                DAST._IType _1465___mcc_h796 = _source47.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1466_recursiveGen;
                  bool _1467_recOwned;
                  bool _1468_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1469_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _1466_recursiveGen = _out839;
                  _1467_recOwned = _out840;
                  _1468_recErased = _out841;
                  _1469_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1467_recOwned;
                  isErased = _1468_recErased;
                  readIdents = _1469_recIdents;
                }
              } else if (_source47.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1470___mcc_h799 = _source47.dtor_args;
                DAST._IType _1471___mcc_h800 = _source47.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1472_recursiveGen;
                  bool _1473_recOwned;
                  bool _1474_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1475_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _1472_recursiveGen = _out843;
                  _1473_recOwned = _out844;
                  _1474_recErased = _out845;
                  _1475_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1472_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1473_recOwned;
                  isErased = _1474_recErased;
                  readIdents = _1475_recIdents;
                }
              } else if (_source47.is_Primitive) {
                DAST._IPrimitive _1476___mcc_h803 = _source47.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1477_recursiveGen;
                  bool _1478_recOwned;
                  bool _1479_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1480_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _1477_recursiveGen = _out847;
                  _1478_recOwned = _out848;
                  _1479_recErased = _out849;
                  _1480_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1478_recOwned;
                  isErased = _1479_recErased;
                  readIdents = _1480_recIdents;
                }
              } else if (_source47.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1481___mcc_h805 = _source47.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1482_recursiveGen;
                  bool _1483_recOwned;
                  bool _1484_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1485_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _1482_recursiveGen = _out851;
                  _1483_recOwned = _out852;
                  _1484_recErased = _out853;
                  _1485_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1483_recOwned;
                  isErased = _1484_recErased;
                  readIdents = _1485_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1486___mcc_h807 = _source47.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1487_recursiveGen;
                  bool _1488_recOwned;
                  bool _1489_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1490_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _1487_recursiveGen = _out855;
                  _1488_recOwned = _out856;
                  _1489_recErased = _out857;
                  _1490_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1488_recOwned;
                  isErased = _1489_recErased;
                  readIdents = _1490_recIdents;
                }
              }
            } else if (_source27.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1491___mcc_h809 = _source27.dtor_args;
              DAST._IType _1492___mcc_h810 = _source27.dtor_result;
              DAST._IType _source49 = _664___mcc_h306;
              if (_source49.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1493___mcc_h817 = _source49.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1494___mcc_h818 = _source49.dtor_typeArgs;
                DAST._IResolvedType _1495___mcc_h819 = _source49.dtor_resolved;
                DAST._IResolvedType _source50 = _1495___mcc_h819;
                if (_source50.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1496___mcc_h823 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1497_recursiveGen;
                    bool _1498_recOwned;
                    bool _1499_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1500_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out859;
                    bool _out860;
                    bool _out861;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                    _1497_recursiveGen = _out859;
                    _1498_recOwned = _out860;
                    _1499_recErased = _out861;
                    _1500_recIdents = _out862;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1497_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1498_recOwned;
                    isErased = _1499_recErased;
                    readIdents = _1500_recIdents;
                  }
                } else if (_source50.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1501___mcc_h825 = _source50.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1502_recursiveGen;
                    bool _1503_recOwned;
                    bool _1504_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1505_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out863;
                    bool _out864;
                    bool _out865;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                    _1502_recursiveGen = _out863;
                    _1503_recOwned = _out864;
                    _1504_recErased = _out865;
                    _1505_recIdents = _out866;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1503_recOwned;
                    isErased = _1504_recErased;
                    readIdents = _1505_recIdents;
                  }
                } else {
                  DAST._IType _1506___mcc_h827 = _source50.dtor_Newtype_a0;
                  DAST._IType _1507_b = _1506___mcc_h827;
                  {
                    if (object.Equals(_657_fromTpe, _1507_b)) {
                      Dafny.ISequence<Dafny.Rune> _1508_recursiveGen;
                      bool _1509_recOwned;
                      bool _1510_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1511_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      _1508_recursiveGen = _out867;
                      _1509_recOwned = _out868;
                      _1510_recErased = _out869;
                      _1511_recIdents = _out870;
                      Dafny.ISequence<Dafny.Rune> _1512_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out871;
                      _out871 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1512_rhsType = _out871;
                      Dafny.ISequence<Dafny.Rune> _1513_uneraseFn;
                      _1513_uneraseFn = ((_1509_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1512_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1513_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1508_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1509_recOwned;
                      isErased = false;
                      readIdents = _1511_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out872;
                      bool _out873;
                      bool _out874;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1507_b), _1507_b, _656_toTpe), selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                      s = _out872;
                      isOwned = _out873;
                      isErased = _out874;
                      readIdents = _out875;
                    }
                  }
                }
              } else if (_source49.is_Nullable) {
                DAST._IType _1514___mcc_h829 = _source49.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1515_recursiveGen;
                  bool _1516_recOwned;
                  bool _1517_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1518_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _1515_recursiveGen = _out876;
                  _1516_recOwned = _out877;
                  _1517_recErased = _out878;
                  _1518_recIdents = _out879;
                  if (!(_1516_recOwned)) {
                    _1515_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1515_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1517_recErased;
                  readIdents = _1518_recIdents;
                }
              } else if (_source49.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1519___mcc_h831 = _source49.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1520_recursiveGen;
                  bool _1521_recOwned;
                  bool _1522_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1523_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _1520_recursiveGen = _out880;
                  _1521_recOwned = _out881;
                  _1522_recErased = _out882;
                  _1523_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1521_recOwned;
                  isErased = _1522_recErased;
                  readIdents = _1523_recIdents;
                }
              } else if (_source49.is_Array) {
                DAST._IType _1524___mcc_h833 = _source49.dtor_element;
                BigInteger _1525___mcc_h834 = _source49.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1526_recursiveGen;
                  bool _1527_recOwned;
                  bool _1528_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1529_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _1526_recursiveGen = _out884;
                  _1527_recOwned = _out885;
                  _1528_recErased = _out886;
                  _1529_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1526_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1527_recOwned;
                  isErased = _1528_recErased;
                  readIdents = _1529_recIdents;
                }
              } else if (_source49.is_Seq) {
                DAST._IType _1530___mcc_h837 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1531_recursiveGen;
                  bool _1532_recOwned;
                  bool _1533_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1534_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _1531_recursiveGen = _out888;
                  _1532_recOwned = _out889;
                  _1533_recErased = _out890;
                  _1534_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1532_recOwned;
                  isErased = _1533_recErased;
                  readIdents = _1534_recIdents;
                }
              } else if (_source49.is_Set) {
                DAST._IType _1535___mcc_h839 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1536_recursiveGen;
                  bool _1537_recOwned;
                  bool _1538_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1539_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _1536_recursiveGen = _out892;
                  _1537_recOwned = _out893;
                  _1538_recErased = _out894;
                  _1539_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1536_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1537_recOwned;
                  isErased = _1538_recErased;
                  readIdents = _1539_recIdents;
                }
              } else if (_source49.is_Multiset) {
                DAST._IType _1540___mcc_h841 = _source49.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1541_recursiveGen;
                  bool _1542_recOwned;
                  bool _1543_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1544_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _1541_recursiveGen = _out896;
                  _1542_recOwned = _out897;
                  _1543_recErased = _out898;
                  _1544_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1541_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1542_recOwned;
                  isErased = _1543_recErased;
                  readIdents = _1544_recIdents;
                }
              } else if (_source49.is_Map) {
                DAST._IType _1545___mcc_h843 = _source49.dtor_key;
                DAST._IType _1546___mcc_h844 = _source49.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1547_recursiveGen;
                  bool _1548_recOwned;
                  bool _1549_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1550_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _1547_recursiveGen = _out900;
                  _1548_recOwned = _out901;
                  _1549_recErased = _out902;
                  _1550_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1547_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1548_recOwned;
                  isErased = _1549_recErased;
                  readIdents = _1550_recIdents;
                }
              } else if (_source49.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1551___mcc_h847 = _source49.dtor_args;
                DAST._IType _1552___mcc_h848 = _source49.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1553_recursiveGen;
                  bool _1554_recOwned;
                  bool _1555_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1556_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _1553_recursiveGen = _out904;
                  _1554_recOwned = _out905;
                  _1555_recErased = _out906;
                  _1556_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1553_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1554_recOwned;
                  isErased = _1555_recErased;
                  readIdents = _1556_recIdents;
                }
              } else if (_source49.is_Primitive) {
                DAST._IPrimitive _1557___mcc_h851 = _source49.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1558_recursiveGen;
                  bool _1559_recOwned;
                  bool _1560_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1561_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _1558_recursiveGen = _out908;
                  _1559_recOwned = _out909;
                  _1560_recErased = _out910;
                  _1561_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1558_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1559_recOwned;
                  isErased = _1560_recErased;
                  readIdents = _1561_recIdents;
                }
              } else if (_source49.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1562___mcc_h853 = _source49.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1563_recursiveGen;
                  bool _1564_recOwned;
                  bool _1565_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1566_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _1563_recursiveGen = _out912;
                  _1564_recOwned = _out913;
                  _1565_recErased = _out914;
                  _1566_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1564_recOwned;
                  isErased = _1565_recErased;
                  readIdents = _1566_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1567___mcc_h855 = _source49.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1568_recursiveGen;
                  bool _1569_recOwned;
                  bool _1570_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1571_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _1568_recursiveGen = _out916;
                  _1569_recOwned = _out917;
                  _1570_recErased = _out918;
                  _1571_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1569_recOwned;
                  isErased = _1570_recErased;
                  readIdents = _1571_recIdents;
                }
              }
            } else if (_source27.is_Primitive) {
              DAST._IPrimitive _1572___mcc_h857 = _source27.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1572___mcc_h857;
              if (_source51.is_Int) {
                DAST._IType _source52 = _664___mcc_h306;
                if (_source52.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1573___mcc_h861 = _source52.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1574___mcc_h862 = _source52.dtor_typeArgs;
                  DAST._IResolvedType _1575___mcc_h863 = _source52.dtor_resolved;
                  DAST._IResolvedType _source53 = _1575___mcc_h863;
                  if (_source53.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1576___mcc_h867 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1577_recursiveGen;
                      bool _1578_recOwned;
                      bool _1579_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1580_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out920;
                      bool _out921;
                      bool _out922;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                      _1577_recursiveGen = _out920;
                      _1578_recOwned = _out921;
                      _1579_recErased = _out922;
                      _1580_recIdents = _out923;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1577_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1578_recOwned;
                      isErased = _1579_recErased;
                      readIdents = _1580_recIdents;
                    }
                  } else if (_source53.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1581___mcc_h869 = _source53.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1582_recursiveGen;
                      bool _1583_recOwned;
                      bool _1584_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1585_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out924;
                      bool _out925;
                      bool _out926;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                      _1582_recursiveGen = _out924;
                      _1583_recOwned = _out925;
                      _1584_recErased = _out926;
                      _1585_recIdents = _out927;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1582_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1583_recOwned;
                      isErased = _1584_recErased;
                      readIdents = _1585_recIdents;
                    }
                  } else {
                    DAST._IType _1586___mcc_h871 = _source53.dtor_Newtype_a0;
                    DAST._IType _1587_b = _1586___mcc_h871;
                    {
                      if (object.Equals(_657_fromTpe, _1587_b)) {
                        Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                        bool _1589_recOwned;
                        bool _1590_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out928;
                        bool _out929;
                        bool _out930;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                        _1588_recursiveGen = _out928;
                        _1589_recOwned = _out929;
                        _1590_recErased = _out930;
                        _1591_recIdents = _out931;
                        Dafny.ISequence<Dafny.Rune> _1592_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out932;
                        _out932 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _1592_rhsType = _out932;
                        Dafny.ISequence<Dafny.Rune> _1593_uneraseFn;
                        _1593_uneraseFn = ((_1589_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1592_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1593_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1588_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1589_recOwned;
                        isErased = false;
                        readIdents = _1591_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out933;
                        bool _out934;
                        bool _out935;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1587_b), _1587_b, _656_toTpe), selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                        s = _out933;
                        isOwned = _out934;
                        isErased = _out935;
                        readIdents = _out936;
                      }
                    }
                  }
                } else if (_source52.is_Nullable) {
                  DAST._IType _1594___mcc_h873 = _source52.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1595_recursiveGen;
                    bool _1596_recOwned;
                    bool _1597_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1598_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out937;
                    bool _out938;
                    bool _out939;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                    _1595_recursiveGen = _out937;
                    _1596_recOwned = _out938;
                    _1597_recErased = _out939;
                    _1598_recIdents = _out940;
                    if (!(_1596_recOwned)) {
                      _1595_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1595_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1597_recErased;
                    readIdents = _1598_recIdents;
                  }
                } else if (_source52.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1599___mcc_h875 = _source52.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                    bool _1601_recOwned;
                    bool _1602_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out941;
                    bool _out942;
                    bool _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                    _1600_recursiveGen = _out941;
                    _1601_recOwned = _out942;
                    _1602_recErased = _out943;
                    _1603_recIdents = _out944;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1601_recOwned;
                    isErased = _1602_recErased;
                    readIdents = _1603_recIdents;
                  }
                } else if (_source52.is_Array) {
                  DAST._IType _1604___mcc_h877 = _source52.dtor_element;
                  BigInteger _1605___mcc_h878 = _source52.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1606_recursiveGen;
                    bool _1607_recOwned;
                    bool _1608_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1609_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out945;
                    bool _out946;
                    bool _out947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                    _1606_recursiveGen = _out945;
                    _1607_recOwned = _out946;
                    _1608_recErased = _out947;
                    _1609_recIdents = _out948;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1607_recOwned;
                    isErased = _1608_recErased;
                    readIdents = _1609_recIdents;
                  }
                } else if (_source52.is_Seq) {
                  DAST._IType _1610___mcc_h881 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                    bool _1612_recOwned;
                    bool _1613_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out949;
                    bool _out950;
                    bool _out951;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                    _1611_recursiveGen = _out949;
                    _1612_recOwned = _out950;
                    _1613_recErased = _out951;
                    _1614_recIdents = _out952;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1612_recOwned;
                    isErased = _1613_recErased;
                    readIdents = _1614_recIdents;
                  }
                } else if (_source52.is_Set) {
                  DAST._IType _1615___mcc_h883 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1616_recursiveGen;
                    bool _1617_recOwned;
                    bool _1618_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1619_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out953;
                    bool _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                    _1616_recursiveGen = _out953;
                    _1617_recOwned = _out954;
                    _1618_recErased = _out955;
                    _1619_recIdents = _out956;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1616_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1617_recOwned;
                    isErased = _1618_recErased;
                    readIdents = _1619_recIdents;
                  }
                } else if (_source52.is_Multiset) {
                  DAST._IType _1620___mcc_h885 = _source52.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1621_recursiveGen;
                    bool _1622_recOwned;
                    bool _1623_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1624_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out957;
                    bool _out958;
                    bool _out959;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                    _1621_recursiveGen = _out957;
                    _1622_recOwned = _out958;
                    _1623_recErased = _out959;
                    _1624_recIdents = _out960;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1621_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1622_recOwned;
                    isErased = _1623_recErased;
                    readIdents = _1624_recIdents;
                  }
                } else if (_source52.is_Map) {
                  DAST._IType _1625___mcc_h887 = _source52.dtor_key;
                  DAST._IType _1626___mcc_h888 = _source52.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1627_recursiveGen;
                    bool _1628_recOwned;
                    bool _1629_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1630_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out961;
                    bool _out962;
                    bool _out963;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                    _1627_recursiveGen = _out961;
                    _1628_recOwned = _out962;
                    _1629_recErased = _out963;
                    _1630_recIdents = _out964;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1627_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1628_recOwned;
                    isErased = _1629_recErased;
                    readIdents = _1630_recIdents;
                  }
                } else if (_source52.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1631___mcc_h891 = _source52.dtor_args;
                  DAST._IType _1632___mcc_h892 = _source52.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1633_recursiveGen;
                    bool _1634_recOwned;
                    bool _1635_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1636_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out965;
                    bool _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                    _1633_recursiveGen = _out965;
                    _1634_recOwned = _out966;
                    _1635_recErased = _out967;
                    _1636_recIdents = _out968;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1634_recOwned;
                    isErased = _1635_recErased;
                    readIdents = _1636_recIdents;
                  }
                } else if (_source52.is_Primitive) {
                  DAST._IPrimitive _1637___mcc_h895 = _source52.dtor_Primitive_a0;
                  DAST._IPrimitive _source54 = _1637___mcc_h895;
                  if (_source54.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1638_recursiveGen;
                      bool _1639_recOwned;
                      bool _1640_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1641_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out969;
                      bool _out970;
                      bool _out971;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                      _1638_recursiveGen = _out969;
                      _1639_recOwned = _out970;
                      _1640_recErased = _out971;
                      _1641_recIdents = _out972;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1638_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1639_recOwned;
                      isErased = _1640_recErased;
                      readIdents = _1641_recIdents;
                    }
                  } else if (_source54.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1642_recursiveGen;
                      bool _1643___v46;
                      bool _1644___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1645_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out973;
                      bool _out974;
                      bool _out975;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out973, out _out974, out _out975, out _out976);
                      _1642_recursiveGen = _out973;
                      _1643___v46 = _out974;
                      _1644___v47 = _out975;
                      _1645_recIdents = _out976;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1645_recIdents;
                    }
                  } else if (_source54.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1646_recursiveGen;
                      bool _1647_recOwned;
                      bool _1648_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1649_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out977;
                      bool _out978;
                      bool _out979;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                      _1646_recursiveGen = _out977;
                      _1647_recOwned = _out978;
                      _1648_recErased = _out979;
                      _1649_recIdents = _out980;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1647_recOwned;
                      isErased = _1648_recErased;
                      readIdents = _1649_recIdents;
                    }
                  } else if (_source54.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1650_recursiveGen;
                      bool _1651_recOwned;
                      bool _1652_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1653_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out981;
                      bool _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                      _1650_recursiveGen = _out981;
                      _1651_recOwned = _out982;
                      _1652_recErased = _out983;
                      _1653_recIdents = _out984;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1651_recOwned;
                      isErased = _1652_recErased;
                      readIdents = _1653_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1654_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out985;
                      _out985 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _1654_rhsType = _out985;
                      Dafny.ISequence<Dafny.Rune> _1655_recursiveGen;
                      bool _1656___v56;
                      bool _1657___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1658_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _1655_recursiveGen = _out986;
                      _1656___v56 = _out987;
                      _1657___v57 = _out988;
                      _1658_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1655_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1658_recIdents;
                    }
                  }
                } else if (_source52.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1659___mcc_h897 = _source52.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1660_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    _out990 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                    _1660_rhsType = _out990;
                    Dafny.ISequence<Dafny.Rune> _1661_recursiveGen;
                    bool _1662___v51;
                    bool _1663___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1664_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out991, out _out992, out _out993, out _out994);
                    _1661_recursiveGen = _out991;
                    _1662___v51 = _out992;
                    _1663___v52 = _out993;
                    _1664_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1660_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1664_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1665___mcc_h899 = _source52.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1666_recursiveGen;
                    bool _1667_recOwned;
                    bool _1668_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1669_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _1666_recursiveGen = _out995;
                    _1667_recOwned = _out996;
                    _1668_recErased = _out997;
                    _1669_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1667_recOwned;
                    isErased = _1668_recErased;
                    readIdents = _1669_recIdents;
                  }
                }
              } else if (_source51.is_Real) {
                DAST._IType _source55 = _664___mcc_h306;
                if (_source55.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1670___mcc_h901 = _source55.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1671___mcc_h902 = _source55.dtor_typeArgs;
                  DAST._IResolvedType _1672___mcc_h903 = _source55.dtor_resolved;
                  DAST._IResolvedType _source56 = _1672___mcc_h903;
                  if (_source56.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1673___mcc_h907 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1674_recursiveGen;
                      bool _1675_recOwned;
                      bool _1676_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1677_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                      _1674_recursiveGen = _out999;
                      _1675_recOwned = _out1000;
                      _1676_recErased = _out1001;
                      _1677_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1675_recOwned;
                      isErased = _1676_recErased;
                      readIdents = _1677_recIdents;
                    }
                  } else if (_source56.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1678___mcc_h909 = _source56.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1679_recursiveGen;
                      bool _1680_recOwned;
                      bool _1681_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1682_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1003;
                      bool _out1004;
                      bool _out1005;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                      _1679_recursiveGen = _out1003;
                      _1680_recOwned = _out1004;
                      _1681_recErased = _out1005;
                      _1682_recIdents = _out1006;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1680_recOwned;
                      isErased = _1681_recErased;
                      readIdents = _1682_recIdents;
                    }
                  } else {
                    DAST._IType _1683___mcc_h911 = _source56.dtor_Newtype_a0;
                    DAST._IType _1684_b = _1683___mcc_h911;
                    {
                      if (object.Equals(_657_fromTpe, _1684_b)) {
                        Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                        bool _1686_recOwned;
                        bool _1687_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1007;
                        bool _out1008;
                        bool _out1009;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                        _1685_recursiveGen = _out1007;
                        _1686_recOwned = _out1008;
                        _1687_recErased = _out1009;
                        _1688_recIdents = _out1010;
                        Dafny.ISequence<Dafny.Rune> _1689_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1011;
                        _out1011 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _1689_rhsType = _out1011;
                        Dafny.ISequence<Dafny.Rune> _1690_uneraseFn;
                        _1690_uneraseFn = ((_1686_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1689_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1690_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1686_recOwned;
                        isErased = false;
                        readIdents = _1688_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1012;
                        bool _out1013;
                        bool _out1014;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1684_b), _1684_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                        s = _out1012;
                        isOwned = _out1013;
                        isErased = _out1014;
                        readIdents = _out1015;
                      }
                    }
                  }
                } else if (_source55.is_Nullable) {
                  DAST._IType _1691___mcc_h913 = _source55.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1692_recursiveGen;
                    bool _1693_recOwned;
                    bool _1694_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1695_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1016;
                    bool _out1017;
                    bool _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                    _1692_recursiveGen = _out1016;
                    _1693_recOwned = _out1017;
                    _1694_recErased = _out1018;
                    _1695_recIdents = _out1019;
                    if (!(_1693_recOwned)) {
                      _1692_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1692_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1694_recErased;
                    readIdents = _1695_recIdents;
                  }
                } else if (_source55.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1696___mcc_h915 = _source55.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1697_recursiveGen;
                    bool _1698_recOwned;
                    bool _1699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1020;
                    bool _out1021;
                    bool _out1022;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                    _1697_recursiveGen = _out1020;
                    _1698_recOwned = _out1021;
                    _1699_recErased = _out1022;
                    _1700_recIdents = _out1023;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1698_recOwned;
                    isErased = _1699_recErased;
                    readIdents = _1700_recIdents;
                  }
                } else if (_source55.is_Array) {
                  DAST._IType _1701___mcc_h917 = _source55.dtor_element;
                  BigInteger _1702___mcc_h918 = _source55.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1703_recursiveGen;
                    bool _1704_recOwned;
                    bool _1705_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1706_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1024;
                    bool _out1025;
                    bool _out1026;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1024, out _out1025, out _out1026, out _out1027);
                    _1703_recursiveGen = _out1024;
                    _1704_recOwned = _out1025;
                    _1705_recErased = _out1026;
                    _1706_recIdents = _out1027;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1703_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1704_recOwned;
                    isErased = _1705_recErased;
                    readIdents = _1706_recIdents;
                  }
                } else if (_source55.is_Seq) {
                  DAST._IType _1707___mcc_h921 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1708_recursiveGen;
                    bool _1709_recOwned;
                    bool _1710_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1711_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030, out _out1031);
                    _1708_recursiveGen = _out1028;
                    _1709_recOwned = _out1029;
                    _1710_recErased = _out1030;
                    _1711_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1708_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1709_recOwned;
                    isErased = _1710_recErased;
                    readIdents = _1711_recIdents;
                  }
                } else if (_source55.is_Set) {
                  DAST._IType _1712___mcc_h923 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1713_recursiveGen;
                    bool _1714_recOwned;
                    bool _1715_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1716_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _1713_recursiveGen = _out1032;
                    _1714_recOwned = _out1033;
                    _1715_recErased = _out1034;
                    _1716_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1714_recOwned;
                    isErased = _1715_recErased;
                    readIdents = _1716_recIdents;
                  }
                } else if (_source55.is_Multiset) {
                  DAST._IType _1717___mcc_h925 = _source55.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1718_recursiveGen;
                    bool _1719_recOwned;
                    bool _1720_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1721_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1036;
                    bool _out1037;
                    bool _out1038;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                    _1718_recursiveGen = _out1036;
                    _1719_recOwned = _out1037;
                    _1720_recErased = _out1038;
                    _1721_recIdents = _out1039;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1718_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1719_recOwned;
                    isErased = _1720_recErased;
                    readIdents = _1721_recIdents;
                  }
                } else if (_source55.is_Map) {
                  DAST._IType _1722___mcc_h927 = _source55.dtor_key;
                  DAST._IType _1723___mcc_h928 = _source55.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1724_recursiveGen;
                    bool _1725_recOwned;
                    bool _1726_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1727_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1040;
                    bool _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                    _1724_recursiveGen = _out1040;
                    _1725_recOwned = _out1041;
                    _1726_recErased = _out1042;
                    _1727_recIdents = _out1043;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1724_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1725_recOwned;
                    isErased = _1726_recErased;
                    readIdents = _1727_recIdents;
                  }
                } else if (_source55.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1728___mcc_h931 = _source55.dtor_args;
                  DAST._IType _1729___mcc_h932 = _source55.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1730_recursiveGen;
                    bool _1731_recOwned;
                    bool _1732_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1733_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    bool _out1045;
                    bool _out1046;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                    _1730_recursiveGen = _out1044;
                    _1731_recOwned = _out1045;
                    _1732_recErased = _out1046;
                    _1733_recIdents = _out1047;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1731_recOwned;
                    isErased = _1732_recErased;
                    readIdents = _1733_recIdents;
                  }
                } else if (_source55.is_Primitive) {
                  DAST._IPrimitive _1734___mcc_h935 = _source55.dtor_Primitive_a0;
                  DAST._IPrimitive _source57 = _1734___mcc_h935;
                  if (_source57.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1735_recursiveGen;
                      bool _1736___v48;
                      bool _1737___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1738_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1048;
                      bool _out1049;
                      bool _out1050;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, false, out _out1048, out _out1049, out _out1050, out _out1051);
                      _1735_recursiveGen = _out1048;
                      _1736___v48 = _out1049;
                      _1737___v49 = _out1050;
                      _1738_recIdents = _out1051;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1738_recIdents;
                    }
                  } else if (_source57.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1739_recursiveGen;
                      bool _1740_recOwned;
                      bool _1741_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1742_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1052;
                      bool _out1053;
                      bool _out1054;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                      _1739_recursiveGen = _out1052;
                      _1740_recOwned = _out1053;
                      _1741_recErased = _out1054;
                      _1742_recIdents = _out1055;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1740_recOwned;
                      isErased = _1741_recErased;
                      readIdents = _1742_recIdents;
                    }
                  } else if (_source57.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                      bool _1744_recOwned;
                      bool _1745_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1056;
                      bool _out1057;
                      bool _out1058;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                      _1743_recursiveGen = _out1056;
                      _1744_recOwned = _out1057;
                      _1745_recErased = _out1058;
                      _1746_recIdents = _out1059;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1744_recOwned;
                      isErased = _1745_recErased;
                      readIdents = _1746_recIdents;
                    }
                  } else if (_source57.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1747_recursiveGen;
                      bool _1748_recOwned;
                      bool _1749_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1750_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1060;
                      bool _out1061;
                      bool _out1062;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                      _1747_recursiveGen = _out1060;
                      _1748_recOwned = _out1061;
                      _1749_recErased = _out1062;
                      _1750_recIdents = _out1063;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1748_recOwned;
                      isErased = _1749_recErased;
                      readIdents = _1750_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1751_recursiveGen;
                      bool _1752_recOwned;
                      bool _1753_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1754_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1064;
                      bool _out1065;
                      bool _out1066;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                      _1751_recursiveGen = _out1064;
                      _1752_recOwned = _out1065;
                      _1753_recErased = _out1066;
                      _1754_recIdents = _out1067;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1751_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1752_recOwned;
                      isErased = _1753_recErased;
                      readIdents = _1754_recIdents;
                    }
                  }
                } else if (_source55.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1755___mcc_h937 = _source55.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1756_recursiveGen;
                    bool _1757_recOwned;
                    bool _1758_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1759_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _1756_recursiveGen = _out1068;
                    _1757_recOwned = _out1069;
                    _1758_recErased = _out1070;
                    _1759_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1757_recOwned;
                    isErased = _1758_recErased;
                    readIdents = _1759_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1760___mcc_h939 = _source55.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1761_recursiveGen;
                    bool _1762_recOwned;
                    bool _1763_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _1761_recursiveGen = _out1072;
                    _1762_recOwned = _out1073;
                    _1763_recErased = _out1074;
                    _1764_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1762_recOwned;
                    isErased = _1763_recErased;
                    readIdents = _1764_recIdents;
                  }
                }
              } else if (_source51.is_String) {
                DAST._IType _source58 = _664___mcc_h306;
                if (_source58.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1765___mcc_h941 = _source58.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1766___mcc_h942 = _source58.dtor_typeArgs;
                  DAST._IResolvedType _1767___mcc_h943 = _source58.dtor_resolved;
                  DAST._IResolvedType _source59 = _1767___mcc_h943;
                  if (_source59.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1768___mcc_h947 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1769_recursiveGen;
                      bool _1770_recOwned;
                      bool _1771_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1772_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1076;
                      bool _out1077;
                      bool _out1078;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                      _1769_recursiveGen = _out1076;
                      _1770_recOwned = _out1077;
                      _1771_recErased = _out1078;
                      _1772_recIdents = _out1079;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1770_recOwned;
                      isErased = _1771_recErased;
                      readIdents = _1772_recIdents;
                    }
                  } else if (_source59.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1773___mcc_h949 = _source59.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1774_recursiveGen;
                      bool _1775_recOwned;
                      bool _1776_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1777_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1080;
                      bool _out1081;
                      bool _out1082;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                      _1774_recursiveGen = _out1080;
                      _1775_recOwned = _out1081;
                      _1776_recErased = _out1082;
                      _1777_recIdents = _out1083;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1775_recOwned;
                      isErased = _1776_recErased;
                      readIdents = _1777_recIdents;
                    }
                  } else {
                    DAST._IType _1778___mcc_h951 = _source59.dtor_Newtype_a0;
                    DAST._IType _1779_b = _1778___mcc_h951;
                    {
                      if (object.Equals(_657_fromTpe, _1779_b)) {
                        Dafny.ISequence<Dafny.Rune> _1780_recursiveGen;
                        bool _1781_recOwned;
                        bool _1782_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1783_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1084;
                        bool _out1085;
                        bool _out1086;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                        _1780_recursiveGen = _out1084;
                        _1781_recOwned = _out1085;
                        _1782_recErased = _out1086;
                        _1783_recIdents = _out1087;
                        Dafny.ISequence<Dafny.Rune> _1784_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1088;
                        _out1088 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _1784_rhsType = _out1088;
                        Dafny.ISequence<Dafny.Rune> _1785_uneraseFn;
                        _1785_uneraseFn = ((_1781_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1784_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1785_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1781_recOwned;
                        isErased = false;
                        readIdents = _1783_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1089;
                        bool _out1090;
                        bool _out1091;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1779_b), _1779_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                        s = _out1089;
                        isOwned = _out1090;
                        isErased = _out1091;
                        readIdents = _out1092;
                      }
                    }
                  }
                } else if (_source58.is_Nullable) {
                  DAST._IType _1786___mcc_h953 = _source58.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1787_recursiveGen;
                    bool _1788_recOwned;
                    bool _1789_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1790_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _1787_recursiveGen = _out1093;
                    _1788_recOwned = _out1094;
                    _1789_recErased = _out1095;
                    _1790_recIdents = _out1096;
                    if (!(_1788_recOwned)) {
                      _1787_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1787_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1787_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1789_recErased;
                    readIdents = _1790_recIdents;
                  }
                } else if (_source58.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1791___mcc_h955 = _source58.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1792_recursiveGen;
                    bool _1793_recOwned;
                    bool _1794_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1795_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _1792_recursiveGen = _out1097;
                    _1793_recOwned = _out1098;
                    _1794_recErased = _out1099;
                    _1795_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1793_recOwned;
                    isErased = _1794_recErased;
                    readIdents = _1795_recIdents;
                  }
                } else if (_source58.is_Array) {
                  DAST._IType _1796___mcc_h957 = _source58.dtor_element;
                  BigInteger _1797___mcc_h958 = _source58.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1798_recursiveGen;
                    bool _1799_recOwned;
                    bool _1800_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1801_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _1798_recursiveGen = _out1101;
                    _1799_recOwned = _out1102;
                    _1800_recErased = _out1103;
                    _1801_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1798_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1799_recOwned;
                    isErased = _1800_recErased;
                    readIdents = _1801_recIdents;
                  }
                } else if (_source58.is_Seq) {
                  DAST._IType _1802___mcc_h961 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1803_recursiveGen;
                    bool _1804_recOwned;
                    bool _1805_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1806_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _1803_recursiveGen = _out1105;
                    _1804_recOwned = _out1106;
                    _1805_recErased = _out1107;
                    _1806_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1803_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1804_recOwned;
                    isErased = _1805_recErased;
                    readIdents = _1806_recIdents;
                  }
                } else if (_source58.is_Set) {
                  DAST._IType _1807___mcc_h963 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1808_recursiveGen;
                    bool _1809_recOwned;
                    bool _1810_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1811_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _1808_recursiveGen = _out1109;
                    _1809_recOwned = _out1110;
                    _1810_recErased = _out1111;
                    _1811_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1808_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1809_recOwned;
                    isErased = _1810_recErased;
                    readIdents = _1811_recIdents;
                  }
                } else if (_source58.is_Multiset) {
                  DAST._IType _1812___mcc_h965 = _source58.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1813_recursiveGen;
                    bool _1814_recOwned;
                    bool _1815_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1816_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _1813_recursiveGen = _out1113;
                    _1814_recOwned = _out1114;
                    _1815_recErased = _out1115;
                    _1816_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1813_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1814_recOwned;
                    isErased = _1815_recErased;
                    readIdents = _1816_recIdents;
                  }
                } else if (_source58.is_Map) {
                  DAST._IType _1817___mcc_h967 = _source58.dtor_key;
                  DAST._IType _1818___mcc_h968 = _source58.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1819_recursiveGen;
                    bool _1820_recOwned;
                    bool _1821_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1822_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1117;
                    bool _out1118;
                    bool _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                    _1819_recursiveGen = _out1117;
                    _1820_recOwned = _out1118;
                    _1821_recErased = _out1119;
                    _1822_recIdents = _out1120;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1819_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1820_recOwned;
                    isErased = _1821_recErased;
                    readIdents = _1822_recIdents;
                  }
                } else if (_source58.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1823___mcc_h971 = _source58.dtor_args;
                  DAST._IType _1824___mcc_h972 = _source58.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1825_recursiveGen;
                    bool _1826_recOwned;
                    bool _1827_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1828_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1121;
                    bool _out1122;
                    bool _out1123;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                    _1825_recursiveGen = _out1121;
                    _1826_recOwned = _out1122;
                    _1827_recErased = _out1123;
                    _1828_recIdents = _out1124;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1825_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1826_recOwned;
                    isErased = _1827_recErased;
                    readIdents = _1828_recIdents;
                  }
                } else if (_source58.is_Primitive) {
                  DAST._IPrimitive _1829___mcc_h975 = _source58.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1830_recursiveGen;
                    bool _1831_recOwned;
                    bool _1832_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1833_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1125;
                    bool _out1126;
                    bool _out1127;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                    _1830_recursiveGen = _out1125;
                    _1831_recOwned = _out1126;
                    _1832_recErased = _out1127;
                    _1833_recIdents = _out1128;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1830_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1831_recOwned;
                    isErased = _1832_recErased;
                    readIdents = _1833_recIdents;
                  }
                } else if (_source58.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1834___mcc_h977 = _source58.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1835_recursiveGen;
                    bool _1836_recOwned;
                    bool _1837_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1838_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _1835_recursiveGen = _out1129;
                    _1836_recOwned = _out1130;
                    _1837_recErased = _out1131;
                    _1838_recIdents = _out1132;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1835_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1836_recOwned;
                    isErased = _1837_recErased;
                    readIdents = _1838_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1839___mcc_h979 = _source58.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1840_recursiveGen;
                    bool _1841_recOwned;
                    bool _1842_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _1840_recursiveGen = _out1133;
                    _1841_recOwned = _out1134;
                    _1842_recErased = _out1135;
                    _1843_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1840_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1841_recOwned;
                    isErased = _1842_recErased;
                    readIdents = _1843_recIdents;
                  }
                }
              } else if (_source51.is_Bool) {
                DAST._IType _source60 = _664___mcc_h306;
                if (_source60.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1844___mcc_h981 = _source60.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1845___mcc_h982 = _source60.dtor_typeArgs;
                  DAST._IResolvedType _1846___mcc_h983 = _source60.dtor_resolved;
                  DAST._IResolvedType _source61 = _1846___mcc_h983;
                  if (_source61.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1847___mcc_h987 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1848_recursiveGen;
                      bool _1849_recOwned;
                      bool _1850_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1851_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1137;
                      bool _out1138;
                      bool _out1139;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                      _1848_recursiveGen = _out1137;
                      _1849_recOwned = _out1138;
                      _1850_recErased = _out1139;
                      _1851_recIdents = _out1140;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1848_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1849_recOwned;
                      isErased = _1850_recErased;
                      readIdents = _1851_recIdents;
                    }
                  } else if (_source61.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1852___mcc_h989 = _source61.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1853_recursiveGen;
                      bool _1854_recOwned;
                      bool _1855_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1856_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1141;
                      bool _out1142;
                      bool _out1143;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                      _1853_recursiveGen = _out1141;
                      _1854_recOwned = _out1142;
                      _1855_recErased = _out1143;
                      _1856_recIdents = _out1144;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1854_recOwned;
                      isErased = _1855_recErased;
                      readIdents = _1856_recIdents;
                    }
                  } else {
                    DAST._IType _1857___mcc_h991 = _source61.dtor_Newtype_a0;
                    DAST._IType _1858_b = _1857___mcc_h991;
                    {
                      if (object.Equals(_657_fromTpe, _1858_b)) {
                        Dafny.ISequence<Dafny.Rune> _1859_recursiveGen;
                        bool _1860_recOwned;
                        bool _1861_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1862_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        _1859_recursiveGen = _out1145;
                        _1860_recOwned = _out1146;
                        _1861_recErased = _out1147;
                        _1862_recIdents = _out1148;
                        Dafny.ISequence<Dafny.Rune> _1863_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1149;
                        _out1149 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _1863_rhsType = _out1149;
                        Dafny.ISequence<Dafny.Rune> _1864_uneraseFn;
                        _1864_uneraseFn = ((_1860_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1863_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1864_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1860_recOwned;
                        isErased = false;
                        readIdents = _1862_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1150;
                        bool _out1151;
                        bool _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1858_b), _1858_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                        s = _out1150;
                        isOwned = _out1151;
                        isErased = _out1152;
                        readIdents = _out1153;
                      }
                    }
                  }
                } else if (_source60.is_Nullable) {
                  DAST._IType _1865___mcc_h993 = _source60.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1866_recursiveGen;
                    bool _1867_recOwned;
                    bool _1868_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1869_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _1866_recursiveGen = _out1154;
                    _1867_recOwned = _out1155;
                    _1868_recErased = _out1156;
                    _1869_recIdents = _out1157;
                    if (!(_1867_recOwned)) {
                      _1866_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1868_recErased;
                    readIdents = _1869_recIdents;
                  }
                } else if (_source60.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1870___mcc_h995 = _source60.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1871_recursiveGen;
                    bool _1872_recOwned;
                    bool _1873_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1874_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _1871_recursiveGen = _out1158;
                    _1872_recOwned = _out1159;
                    _1873_recErased = _out1160;
                    _1874_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1872_recOwned;
                    isErased = _1873_recErased;
                    readIdents = _1874_recIdents;
                  }
                } else if (_source60.is_Array) {
                  DAST._IType _1875___mcc_h997 = _source60.dtor_element;
                  BigInteger _1876___mcc_h998 = _source60.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1877_recursiveGen;
                    bool _1878_recOwned;
                    bool _1879_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1880_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _1877_recursiveGen = _out1162;
                    _1878_recOwned = _out1163;
                    _1879_recErased = _out1164;
                    _1880_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1878_recOwned;
                    isErased = _1879_recErased;
                    readIdents = _1880_recIdents;
                  }
                } else if (_source60.is_Seq) {
                  DAST._IType _1881___mcc_h1001 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1882_recursiveGen;
                    bool _1883_recOwned;
                    bool _1884_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1885_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _1882_recursiveGen = _out1166;
                    _1883_recOwned = _out1167;
                    _1884_recErased = _out1168;
                    _1885_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1882_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1883_recOwned;
                    isErased = _1884_recErased;
                    readIdents = _1885_recIdents;
                  }
                } else if (_source60.is_Set) {
                  DAST._IType _1886___mcc_h1003 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1887_recursiveGen;
                    bool _1888_recOwned;
                    bool _1889_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1890_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _1887_recursiveGen = _out1170;
                    _1888_recOwned = _out1171;
                    _1889_recErased = _out1172;
                    _1890_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1888_recOwned;
                    isErased = _1889_recErased;
                    readIdents = _1890_recIdents;
                  }
                } else if (_source60.is_Multiset) {
                  DAST._IType _1891___mcc_h1005 = _source60.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1892_recursiveGen;
                    bool _1893_recOwned;
                    bool _1894_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1895_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _1892_recursiveGen = _out1174;
                    _1893_recOwned = _out1175;
                    _1894_recErased = _out1176;
                    _1895_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1893_recOwned;
                    isErased = _1894_recErased;
                    readIdents = _1895_recIdents;
                  }
                } else if (_source60.is_Map) {
                  DAST._IType _1896___mcc_h1007 = _source60.dtor_key;
                  DAST._IType _1897___mcc_h1008 = _source60.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1898_recursiveGen;
                    bool _1899_recOwned;
                    bool _1900_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1901_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _1898_recursiveGen = _out1178;
                    _1899_recOwned = _out1179;
                    _1900_recErased = _out1180;
                    _1901_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1899_recOwned;
                    isErased = _1900_recErased;
                    readIdents = _1901_recIdents;
                  }
                } else if (_source60.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1902___mcc_h1011 = _source60.dtor_args;
                  DAST._IType _1903___mcc_h1012 = _source60.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1904_recursiveGen;
                    bool _1905_recOwned;
                    bool _1906_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _1904_recursiveGen = _out1182;
                    _1905_recOwned = _out1183;
                    _1906_recErased = _out1184;
                    _1907_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1905_recOwned;
                    isErased = _1906_recErased;
                    readIdents = _1907_recIdents;
                  }
                } else if (_source60.is_Primitive) {
                  DAST._IPrimitive _1908___mcc_h1015 = _source60.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1909_recursiveGen;
                    bool _1910_recOwned;
                    bool _1911_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1912_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _1909_recursiveGen = _out1186;
                    _1910_recOwned = _out1187;
                    _1911_recErased = _out1188;
                    _1912_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1910_recOwned;
                    isErased = _1911_recErased;
                    readIdents = _1912_recIdents;
                  }
                } else if (_source60.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1913___mcc_h1017 = _source60.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1914_recursiveGen;
                    bool _1915_recOwned;
                    bool _1916_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1917_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _1914_recursiveGen = _out1190;
                    _1915_recOwned = _out1191;
                    _1916_recErased = _out1192;
                    _1917_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1915_recOwned;
                    isErased = _1916_recErased;
                    readIdents = _1917_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1918___mcc_h1019 = _source60.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1919_recursiveGen;
                    bool _1920_recOwned;
                    bool _1921_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1922_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _1919_recursiveGen = _out1194;
                    _1920_recOwned = _out1195;
                    _1921_recErased = _out1196;
                    _1922_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1920_recOwned;
                    isErased = _1921_recErased;
                    readIdents = _1922_recIdents;
                  }
                }
              } else {
                DAST._IType _source62 = _664___mcc_h306;
                if (_source62.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1923___mcc_h1021 = _source62.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1924___mcc_h1022 = _source62.dtor_typeArgs;
                  DAST._IResolvedType _1925___mcc_h1023 = _source62.dtor_resolved;
                  DAST._IResolvedType _source63 = _1925___mcc_h1023;
                  if (_source63.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1926___mcc_h1027 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1927_recursiveGen;
                      bool _1928_recOwned;
                      bool _1929_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1930_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1198;
                      bool _out1199;
                      bool _out1200;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                      _1927_recursiveGen = _out1198;
                      _1928_recOwned = _out1199;
                      _1929_recErased = _out1200;
                      _1930_recIdents = _out1201;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1927_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1928_recOwned;
                      isErased = _1929_recErased;
                      readIdents = _1930_recIdents;
                    }
                  } else if (_source63.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1931___mcc_h1029 = _source63.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1932_recursiveGen;
                      bool _1933_recOwned;
                      bool _1934_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1935_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1202;
                      bool _out1203;
                      bool _out1204;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                      _1932_recursiveGen = _out1202;
                      _1933_recOwned = _out1203;
                      _1934_recErased = _out1204;
                      _1935_recIdents = _out1205;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1932_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1933_recOwned;
                      isErased = _1934_recErased;
                      readIdents = _1935_recIdents;
                    }
                  } else {
                    DAST._IType _1936___mcc_h1031 = _source63.dtor_Newtype_a0;
                    DAST._IType _1937_b = _1936___mcc_h1031;
                    {
                      if (object.Equals(_657_fromTpe, _1937_b)) {
                        Dafny.ISequence<Dafny.Rune> _1938_recursiveGen;
                        bool _1939_recOwned;
                        bool _1940_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1941_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        _1938_recursiveGen = _out1206;
                        _1939_recOwned = _out1207;
                        _1940_recErased = _out1208;
                        _1941_recIdents = _out1209;
                        Dafny.ISequence<Dafny.Rune> _1942_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1210;
                        _out1210 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                        _1942_rhsType = _out1210;
                        Dafny.ISequence<Dafny.Rune> _1943_uneraseFn;
                        _1943_uneraseFn = ((_1939_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1942_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1943_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1938_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1939_recOwned;
                        isErased = false;
                        readIdents = _1941_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1211;
                        bool _out1212;
                        bool _out1213;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _1937_b), _1937_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                        s = _out1211;
                        isOwned = _out1212;
                        isErased = _out1213;
                        readIdents = _out1214;
                      }
                    }
                  }
                } else if (_source62.is_Nullable) {
                  DAST._IType _1944___mcc_h1033 = _source62.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1945_recursiveGen;
                    bool _1946_recOwned;
                    bool _1947_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1948_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _1945_recursiveGen = _out1215;
                    _1946_recOwned = _out1216;
                    _1947_recErased = _out1217;
                    _1948_recIdents = _out1218;
                    if (!(_1946_recOwned)) {
                      _1945_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1945_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1945_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1947_recErased;
                    readIdents = _1948_recIdents;
                  }
                } else if (_source62.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1949___mcc_h1035 = _source62.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1950_recursiveGen;
                    bool _1951_recOwned;
                    bool _1952_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1953_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _1950_recursiveGen = _out1219;
                    _1951_recOwned = _out1220;
                    _1952_recErased = _out1221;
                    _1953_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1951_recOwned;
                    isErased = _1952_recErased;
                    readIdents = _1953_recIdents;
                  }
                } else if (_source62.is_Array) {
                  DAST._IType _1954___mcc_h1037 = _source62.dtor_element;
                  BigInteger _1955___mcc_h1038 = _source62.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                    bool _1957_recOwned;
                    bool _1958_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _1956_recursiveGen = _out1223;
                    _1957_recOwned = _out1224;
                    _1958_recErased = _out1225;
                    _1959_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1957_recOwned;
                    isErased = _1958_recErased;
                    readIdents = _1959_recIdents;
                  }
                } else if (_source62.is_Seq) {
                  DAST._IType _1960___mcc_h1041 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1961_recursiveGen;
                    bool _1962_recOwned;
                    bool _1963_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1964_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _1961_recursiveGen = _out1227;
                    _1962_recOwned = _out1228;
                    _1963_recErased = _out1229;
                    _1964_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1961_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1962_recOwned;
                    isErased = _1963_recErased;
                    readIdents = _1964_recIdents;
                  }
                } else if (_source62.is_Set) {
                  DAST._IType _1965___mcc_h1043 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1966_recursiveGen;
                    bool _1967_recOwned;
                    bool _1968_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1969_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _1966_recursiveGen = _out1231;
                    _1967_recOwned = _out1232;
                    _1968_recErased = _out1233;
                    _1969_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1967_recOwned;
                    isErased = _1968_recErased;
                    readIdents = _1969_recIdents;
                  }
                } else if (_source62.is_Multiset) {
                  DAST._IType _1970___mcc_h1045 = _source62.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1971_recursiveGen;
                    bool _1972_recOwned;
                    bool _1973_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1974_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _1971_recursiveGen = _out1235;
                    _1972_recOwned = _out1236;
                    _1973_recErased = _out1237;
                    _1974_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1971_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1972_recOwned;
                    isErased = _1973_recErased;
                    readIdents = _1974_recIdents;
                  }
                } else if (_source62.is_Map) {
                  DAST._IType _1975___mcc_h1047 = _source62.dtor_key;
                  DAST._IType _1976___mcc_h1048 = _source62.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1977_recursiveGen;
                    bool _1978_recOwned;
                    bool _1979_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1980_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _1977_recursiveGen = _out1239;
                    _1978_recOwned = _out1240;
                    _1979_recErased = _out1241;
                    _1980_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1978_recOwned;
                    isErased = _1979_recErased;
                    readIdents = _1980_recIdents;
                  }
                } else if (_source62.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1981___mcc_h1051 = _source62.dtor_args;
                  DAST._IType _1982___mcc_h1052 = _source62.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                    bool _1984_recOwned;
                    bool _1985_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _1983_recursiveGen = _out1243;
                    _1984_recOwned = _out1244;
                    _1985_recErased = _out1245;
                    _1986_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1984_recOwned;
                    isErased = _1985_recErased;
                    readIdents = _1986_recIdents;
                  }
                } else if (_source62.is_Primitive) {
                  DAST._IPrimitive _1987___mcc_h1055 = _source62.dtor_Primitive_a0;
                  DAST._IPrimitive _source64 = _1987___mcc_h1055;
                  if (_source64.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1988_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1247;
                      _out1247 = DCOMP.COMP.GenType(_657_fromTpe, true, false);
                      _1988_rhsType = _out1247;
                      Dafny.ISequence<Dafny.Rune> _1989_recursiveGen;
                      bool _1990___v58;
                      bool _1991___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1992_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1248;
                      bool _out1249;
                      bool _out1250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out1248, out _out1249, out _out1250, out _out1251);
                      _1989_recursiveGen = _out1248;
                      _1990___v58 = _out1249;
                      _1991___v59 = _out1250;
                      _1992_recIdents = _out1251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _1989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1992_recIdents;
                    }
                  } else if (_source64.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1993_recursiveGen;
                      bool _1994_recOwned;
                      bool _1995_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1996_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _1993_recursiveGen = _out1252;
                      _1994_recOwned = _out1253;
                      _1995_recErased = _out1254;
                      _1996_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1994_recOwned;
                      isErased = _1995_recErased;
                      readIdents = _1996_recIdents;
                    }
                  } else if (_source64.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1997_recursiveGen;
                      bool _1998_recOwned;
                      bool _1999_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2000_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _1997_recursiveGen = _out1256;
                      _1998_recOwned = _out1257;
                      _1999_recErased = _out1258;
                      _2000_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1997_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1998_recOwned;
                      isErased = _1999_recErased;
                      readIdents = _2000_recIdents;
                    }
                  } else if (_source64.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2001_recursiveGen;
                      bool _2002_recOwned;
                      bool _2003_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2004_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      bool _out1261;
                      bool _out1262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                      _2001_recursiveGen = _out1260;
                      _2002_recOwned = _out1261;
                      _2003_recErased = _out1262;
                      _2004_recIdents = _out1263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2002_recOwned;
                      isErased = _2003_recErased;
                      readIdents = _2004_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2005_recursiveGen;
                      bool _2006_recOwned;
                      bool _2007_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2008_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1264;
                      bool _out1265;
                      bool _out1266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                      _2005_recursiveGen = _out1264;
                      _2006_recOwned = _out1265;
                      _2007_recErased = _out1266;
                      _2008_recIdents = _out1267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2006_recOwned;
                      isErased = _2007_recErased;
                      readIdents = _2008_recIdents;
                    }
                  }
                } else if (_source62.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2009___mcc_h1057 = _source62.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2010_recursiveGen;
                    bool _2011_recOwned;
                    bool _2012_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2013_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2010_recursiveGen = _out1268;
                    _2011_recOwned = _out1269;
                    _2012_recErased = _out1270;
                    _2013_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2011_recOwned;
                    isErased = _2012_recErased;
                    readIdents = _2013_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2014___mcc_h1059 = _source62.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2015_recursiveGen;
                    bool _2016_recOwned;
                    bool _2017_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2018_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2015_recursiveGen = _out1272;
                    _2016_recOwned = _out1273;
                    _2017_recErased = _out1274;
                    _2018_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2016_recOwned;
                    isErased = _2017_recErased;
                    readIdents = _2018_recIdents;
                  }
                }
              }
            } else if (_source27.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2019___mcc_h1061 = _source27.dtor_Passthrough_a0;
              DAST._IType _source65 = _664___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2020___mcc_h1065 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2021___mcc_h1066 = _source65.dtor_typeArgs;
                DAST._IResolvedType _2022___mcc_h1067 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _2022___mcc_h1067;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2023___mcc_h1071 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2024_recursiveGen;
                    bool _2025_recOwned;
                    bool _2026_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2027_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2024_recursiveGen = _out1276;
                    _2025_recOwned = _out1277;
                    _2026_recErased = _out1278;
                    _2027_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2024_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2025_recOwned;
                    isErased = _2026_recErased;
                    readIdents = _2027_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2028___mcc_h1073 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2029_recursiveGen;
                    bool _2030_recOwned;
                    bool _2031_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2032_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2029_recursiveGen = _out1280;
                    _2030_recOwned = _out1281;
                    _2031_recErased = _out1282;
                    _2032_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2029_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2030_recOwned;
                    isErased = _2031_recErased;
                    readIdents = _2032_recIdents;
                  }
                } else {
                  DAST._IType _2033___mcc_h1075 = _source66.dtor_Newtype_a0;
                  DAST._IType _2034_b = _2033___mcc_h1075;
                  {
                    if (object.Equals(_657_fromTpe, _2034_b)) {
                      Dafny.ISequence<Dafny.Rune> _2035_recursiveGen;
                      bool _2036_recOwned;
                      bool _2037_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2038_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2035_recursiveGen = _out1284;
                      _2036_recOwned = _out1285;
                      _2037_recErased = _out1286;
                      _2038_recIdents = _out1287;
                      Dafny.ISequence<Dafny.Rune> _2039_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      _out1288 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _2039_rhsType = _out1288;
                      Dafny.ISequence<Dafny.Rune> _2040_uneraseFn;
                      _2040_uneraseFn = ((_2036_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2039_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2040_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2036_recOwned;
                      isErased = false;
                      readIdents = _2038_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _2034_b), _2034_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      s = _out1289;
                      isOwned = _out1290;
                      isErased = _out1291;
                      readIdents = _out1292;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _2041___mcc_h1077 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2042_recursiveGen;
                  bool _2043_recOwned;
                  bool _2044_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2045_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1293;
                  bool _out1294;
                  bool _out1295;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                  _2042_recursiveGen = _out1293;
                  _2043_recOwned = _out1294;
                  _2044_recErased = _out1295;
                  _2045_recIdents = _out1296;
                  if (!(_2043_recOwned)) {
                    _2042_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2042_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2042_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2044_recErased;
                  readIdents = _2045_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2046___mcc_h1079 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2047_recursiveGen;
                  bool _2048_recOwned;
                  bool _2049_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1297;
                  bool _out1298;
                  bool _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                  _2047_recursiveGen = _out1297;
                  _2048_recOwned = _out1298;
                  _2049_recErased = _out1299;
                  _2050_recIdents = _out1300;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2048_recOwned;
                  isErased = _2049_recErased;
                  readIdents = _2050_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _2051___mcc_h1081 = _source65.dtor_element;
                BigInteger _2052___mcc_h1082 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2053_recursiveGen;
                  bool _2054_recOwned;
                  bool _2055_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2056_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1301;
                  bool _out1302;
                  bool _out1303;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                  _2053_recursiveGen = _out1301;
                  _2054_recOwned = _out1302;
                  _2055_recErased = _out1303;
                  _2056_recIdents = _out1304;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2054_recOwned;
                  isErased = _2055_recErased;
                  readIdents = _2056_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _2057___mcc_h1085 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                  bool _2059_recOwned;
                  bool _2060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1305;
                  bool _out1306;
                  bool _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                  _2058_recursiveGen = _out1305;
                  _2059_recOwned = _out1306;
                  _2060_recErased = _out1307;
                  _2061_recIdents = _out1308;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2059_recOwned;
                  isErased = _2060_recErased;
                  readIdents = _2061_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _2062___mcc_h1087 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2063_recursiveGen;
                  bool _2064_recOwned;
                  bool _2065_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2066_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1309;
                  bool _out1310;
                  bool _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                  _2063_recursiveGen = _out1309;
                  _2064_recOwned = _out1310;
                  _2065_recErased = _out1311;
                  _2066_recIdents = _out1312;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2063_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2064_recOwned;
                  isErased = _2065_recErased;
                  readIdents = _2066_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _2067___mcc_h1089 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2068_recursiveGen;
                  bool _2069_recOwned;
                  bool _2070_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2071_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1313;
                  bool _out1314;
                  bool _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                  _2068_recursiveGen = _out1313;
                  _2069_recOwned = _out1314;
                  _2070_recErased = _out1315;
                  _2071_recIdents = _out1316;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2068_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2069_recOwned;
                  isErased = _2070_recErased;
                  readIdents = _2071_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _2072___mcc_h1091 = _source65.dtor_key;
                DAST._IType _2073___mcc_h1092 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2074_recursiveGen;
                  bool _2075_recOwned;
                  bool _2076_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2077_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1317;
                  bool _out1318;
                  bool _out1319;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                  _2074_recursiveGen = _out1317;
                  _2075_recOwned = _out1318;
                  _2076_recErased = _out1319;
                  _2077_recIdents = _out1320;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2074_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2075_recOwned;
                  isErased = _2076_recErased;
                  readIdents = _2077_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2078___mcc_h1095 = _source65.dtor_args;
                DAST._IType _2079___mcc_h1096 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1321;
                  bool _out1322;
                  bool _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                  _2080_recursiveGen = _out1321;
                  _2081_recOwned = _out1322;
                  _2082_recErased = _out1323;
                  _2083_recIdents = _out1324;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _2084___mcc_h1099 = _source65.dtor_Primitive_a0;
                DAST._IPrimitive _source67 = _2084___mcc_h1099;
                if (_source67.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2085_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1325;
                    _out1325 = DCOMP.COMP.GenType(_657_fromTpe, true, false);
                    _2085_rhsType = _out1325;
                    Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                    bool _2087___v54;
                    bool _2088___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2086_recursiveGen = _out1326;
                    _2087___v54 = _out1327;
                    _2088___v55 = _out1328;
                    _2089_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2089_recIdents;
                  }
                } else if (_source67.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2090_recursiveGen;
                    bool _2091_recOwned;
                    bool _2092_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2093_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2090_recursiveGen = _out1330;
                    _2091_recOwned = _out1331;
                    _2092_recErased = _out1332;
                    _2093_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2091_recOwned;
                    isErased = _2092_recErased;
                    readIdents = _2093_recIdents;
                  }
                } else if (_source67.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2094_recursiveGen;
                    bool _2095_recOwned;
                    bool _2096_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2097_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2094_recursiveGen = _out1334;
                    _2095_recOwned = _out1335;
                    _2096_recErased = _out1336;
                    _2097_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2095_recOwned;
                    isErased = _2096_recErased;
                    readIdents = _2097_recIdents;
                  }
                } else if (_source67.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2098_recursiveGen;
                    bool _2099_recOwned;
                    bool _2100_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2101_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    bool _out1339;
                    bool _out1340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                    _2098_recursiveGen = _out1338;
                    _2099_recOwned = _out1339;
                    _2100_recErased = _out1340;
                    _2101_recIdents = _out1341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2099_recOwned;
                    isErased = _2100_recErased;
                    readIdents = _2101_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2102_recursiveGen;
                    bool _2103_recOwned;
                    bool _2104_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2105_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1342;
                    bool _out1343;
                    bool _out1344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                    _2102_recursiveGen = _out1342;
                    _2103_recOwned = _out1343;
                    _2104_recErased = _out1344;
                    _2105_recIdents = _out1345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2102_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2103_recOwned;
                    isErased = _2104_recErased;
                    readIdents = _2105_recIdents;
                  }
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2106___mcc_h1101 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2107_recursiveGen;
                  bool _2108___v62;
                  bool _2109___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, true, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2107_recursiveGen = _out1346;
                  _2108___v62 = _out1347;
                  _2109___v63 = _out1348;
                  _2110_recIdents = _out1349;
                  Dafny.ISequence<Dafny.Rune> _2111_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  _out1350 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                  _2111_toTpeGen = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2111_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2110_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2112___mcc_h1103 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2113_recursiveGen;
                  bool _2114_recOwned;
                  bool _2115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2113_recursiveGen = _out1351;
                  _2114_recOwned = _out1352;
                  _2115_recErased = _out1353;
                  _2116_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2114_recOwned;
                  isErased = _2115_recErased;
                  readIdents = _2116_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2117___mcc_h1105 = _source27.dtor_TypeArg_a0;
              DAST._IType _source68 = _664___mcc_h306;
              if (_source68.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2118___mcc_h1109 = _source68.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2119___mcc_h1110 = _source68.dtor_typeArgs;
                DAST._IResolvedType _2120___mcc_h1111 = _source68.dtor_resolved;
                DAST._IResolvedType _source69 = _2120___mcc_h1111;
                if (_source69.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2121___mcc_h1115 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2122_recursiveGen;
                    bool _2123_recOwned;
                    bool _2124_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2125_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2122_recursiveGen = _out1355;
                    _2123_recOwned = _out1356;
                    _2124_recErased = _out1357;
                    _2125_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2122_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2123_recOwned;
                    isErased = _2124_recErased;
                    readIdents = _2125_recIdents;
                  }
                } else if (_source69.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2126___mcc_h1117 = _source69.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2127_recursiveGen;
                    bool _2128_recOwned;
                    bool _2129_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2130_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1359;
                    bool _out1360;
                    bool _out1361;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                    DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                    _2127_recursiveGen = _out1359;
                    _2128_recOwned = _out1360;
                    _2129_recErased = _out1361;
                    _2130_recIdents = _out1362;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2127_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2128_recOwned;
                    isErased = _2129_recErased;
                    readIdents = _2130_recIdents;
                  }
                } else {
                  DAST._IType _2131___mcc_h1119 = _source69.dtor_Newtype_a0;
                  DAST._IType _2132_b = _2131___mcc_h1119;
                  {
                    if (object.Equals(_657_fromTpe, _2132_b)) {
                      Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                      bool _2134_recOwned;
                      bool _2135_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1363;
                      bool _out1364;
                      bool _out1365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                      DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                      _2133_recursiveGen = _out1363;
                      _2134_recOwned = _out1364;
                      _2135_recErased = _out1365;
                      _2136_recIdents = _out1366;
                      Dafny.ISequence<Dafny.Rune> _2137_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1367;
                      _out1367 = DCOMP.COMP.GenType(_656_toTpe, true, false);
                      _2137_rhsType = _out1367;
                      Dafny.ISequence<Dafny.Rune> _2138_uneraseFn;
                      _2138_uneraseFn = ((_2134_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2137_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2138_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2134_recOwned;
                      isErased = false;
                      readIdents = _2136_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1368;
                      bool _out1369;
                      bool _out1370;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_658_expr, _657_fromTpe, _2132_b), _2132_b, _656_toTpe), selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                      s = _out1368;
                      isOwned = _out1369;
                      isErased = _out1370;
                      readIdents = _out1371;
                    }
                  }
                }
              } else if (_source68.is_Nullable) {
                DAST._IType _2139___mcc_h1121 = _source68.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2140_recursiveGen;
                  bool _2141_recOwned;
                  bool _2142_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2143_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1372;
                  bool _out1373;
                  bool _out1374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                  _2140_recursiveGen = _out1372;
                  _2141_recOwned = _out1373;
                  _2142_recErased = _out1374;
                  _2143_recIdents = _out1375;
                  if (!(_2141_recOwned)) {
                    _2140_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2140_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2140_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2142_recErased;
                  readIdents = _2143_recIdents;
                }
              } else if (_source68.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2144___mcc_h1123 = _source68.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2145_recursiveGen;
                  bool _2146_recOwned;
                  bool _2147_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2148_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1376;
                  bool _out1377;
                  bool _out1378;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                  _2145_recursiveGen = _out1376;
                  _2146_recOwned = _out1377;
                  _2147_recErased = _out1378;
                  _2148_recIdents = _out1379;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2146_recOwned;
                  isErased = _2147_recErased;
                  readIdents = _2148_recIdents;
                }
              } else if (_source68.is_Array) {
                DAST._IType _2149___mcc_h1125 = _source68.dtor_element;
                BigInteger _2150___mcc_h1126 = _source68.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2151_recursiveGen;
                  bool _2152_recOwned;
                  bool _2153_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2154_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1380;
                  bool _out1381;
                  bool _out1382;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                  _2151_recursiveGen = _out1380;
                  _2152_recOwned = _out1381;
                  _2153_recErased = _out1382;
                  _2154_recIdents = _out1383;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2151_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2152_recOwned;
                  isErased = _2153_recErased;
                  readIdents = _2154_recIdents;
                }
              } else if (_source68.is_Seq) {
                DAST._IType _2155___mcc_h1129 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2156_recursiveGen;
                  bool _2157_recOwned;
                  bool _2158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2156_recursiveGen = _out1384;
                  _2157_recOwned = _out1385;
                  _2158_recErased = _out1386;
                  _2159_recIdents = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2157_recOwned;
                  isErased = _2158_recErased;
                  readIdents = _2159_recIdents;
                }
              } else if (_source68.is_Set) {
                DAST._IType _2160___mcc_h1131 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2161_recursiveGen;
                  bool _2162_recOwned;
                  bool _2163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2161_recursiveGen = _out1388;
                  _2162_recOwned = _out1389;
                  _2163_recErased = _out1390;
                  _2164_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2162_recOwned;
                  isErased = _2163_recErased;
                  readIdents = _2164_recIdents;
                }
              } else if (_source68.is_Multiset) {
                DAST._IType _2165___mcc_h1133 = _source68.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2166_recursiveGen;
                  bool _2167_recOwned;
                  bool _2168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1392;
                  bool _out1393;
                  bool _out1394;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                  _2166_recursiveGen = _out1392;
                  _2167_recOwned = _out1393;
                  _2168_recErased = _out1394;
                  _2169_recIdents = _out1395;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2167_recOwned;
                  isErased = _2168_recErased;
                  readIdents = _2169_recIdents;
                }
              } else if (_source68.is_Map) {
                DAST._IType _2170___mcc_h1135 = _source68.dtor_key;
                DAST._IType _2171___mcc_h1136 = _source68.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2172_recursiveGen;
                  bool _2173_recOwned;
                  bool _2174_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2175_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1396;
                  bool _out1397;
                  bool _out1398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                  _2172_recursiveGen = _out1396;
                  _2173_recOwned = _out1397;
                  _2174_recErased = _out1398;
                  _2175_recIdents = _out1399;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2173_recOwned;
                  isErased = _2174_recErased;
                  readIdents = _2175_recIdents;
                }
              } else if (_source68.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2176___mcc_h1139 = _source68.dtor_args;
                DAST._IType _2177___mcc_h1140 = _source68.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2178_recursiveGen;
                  bool _2179_recOwned;
                  bool _2180_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2181_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2178_recursiveGen = _out1400;
                  _2179_recOwned = _out1401;
                  _2180_recErased = _out1402;
                  _2181_recIdents = _out1403;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2179_recOwned;
                  isErased = _2180_recErased;
                  readIdents = _2181_recIdents;
                }
              } else if (_source68.is_Primitive) {
                DAST._IPrimitive _2182___mcc_h1143 = _source68.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2183_recursiveGen;
                  bool _2184_recOwned;
                  bool _2185_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2186_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  bool _out1405;
                  bool _out1406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                  _2183_recursiveGen = _out1404;
                  _2184_recOwned = _out1405;
                  _2185_recErased = _out1406;
                  _2186_recIdents = _out1407;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2183_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2184_recOwned;
                  isErased = _2185_recErased;
                  readIdents = _2186_recIdents;
                }
              } else if (_source68.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2187___mcc_h1145 = _source68.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2188_recursiveGen;
                  bool _2189_recOwned;
                  bool _2190_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2191_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2188_recursiveGen = _out1408;
                  _2189_recOwned = _out1409;
                  _2190_recErased = _out1410;
                  _2191_recIdents = _out1411;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2188_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2189_recOwned;
                  isErased = _2190_recErased;
                  readIdents = _2191_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2192___mcc_h1147 = _source68.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                  bool _2194_recOwned;
                  bool _2195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_658_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2193_recursiveGen = _out1412;
                  _2194_recOwned = _out1413;
                  _2195_recErased = _out1414;
                  _2196_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2194_recOwned;
                  isErased = _2195_recErased;
                  readIdents = _2196_recIdents;
                }
              }
            }
          }
        }
      } else if (_source20.is_SeqConstruct) {
        DAST._IExpression _2197___mcc_h26 = _source20.dtor_length;
        DAST._IExpression _2198___mcc_h27 = _source20.dtor_elem;
        DAST._IExpression _2199_expr = _2198___mcc_h27;
        DAST._IExpression _2200_length = _2197___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2201_recursiveGen;
          bool _2202___v65;
          bool _2203_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2204_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1416;
          bool _out1417;
          bool _out1418;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
          DCOMP.COMP.GenExpr(_2199_expr, selfIdent, @params, true, out _out1416, out _out1417, out _out1418, out _out1419);
          _2201_recursiveGen = _out1416;
          _2202___v65 = _out1417;
          _2203_eErased = _out1418;
          _2204_recIdents = _out1419;
          Dafny.ISequence<Dafny.Rune> _2205_lengthGen;
          bool _2206___v66;
          bool _2207_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2208_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1420;
          bool _out1421;
          bool _out1422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
          DCOMP.COMP.GenExpr(_2200_length, selfIdent, @params, true, out _out1420, out _out1421, out _out1422, out _out1423);
          _2205_lengthGen = _out1420;
          _2206___v66 = _out1421;
          _2207_lengthErased = _out1422;
          _2208_lengthIdents = _out1423;
          if (!(_2207_lengthErased)) {
            _2205_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2205_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2201_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2205_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2204_recIdents, _2208_lengthIdents);
          isOwned = true;
          isErased = _2203_eErased;
        }
      } else if (_source20.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2209___mcc_h28 = _source20.dtor_elements;
        DAST._IType _2210___mcc_h29 = _source20.dtor_typ;
        DAST._IType _2211_typ = _2210___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2212_exprs = _2209___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2213_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1424;
          _out1424 = DCOMP.COMP.GenType(_2211_typ, false, false);
          _2213_genTpe = _out1424;
          BigInteger _2214_i;
          _2214_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2214_i = BigInteger.Zero;
          while ((_2214_i) < (new BigInteger((_2212_exprs).Count))) {
            if ((_2214_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2215_recursiveGen;
            bool _2216___v67;
            bool _2217_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2218_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1425;
            bool _out1426;
            bool _out1427;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
            DCOMP.COMP.GenExpr((_2212_exprs).Select(_2214_i), selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
            _2215_recursiveGen = _out1425;
            _2216___v67 = _out1426;
            _2217_isErased = _out1427;
            _2218_recIdents = _out1428;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2218_recIdents);
            if (_2217_isErased) {
              _2215_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2215_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2215_recursiveGen);
            _2214_i = (_2214_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2213_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2219___mcc_h30 = _source20.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2220_exprs = _2219___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2221_generatedValues;
          _2221_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2222_i;
          _2222_i = BigInteger.Zero;
          bool _2223_allErased;
          _2223_allErased = true;
          while ((_2222_i) < (new BigInteger((_2220_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2224_recursiveGen;
            bool _2225___v68;
            bool _2226_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2227_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1429;
            bool _out1430;
            bool _out1431;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
            DCOMP.COMP.GenExpr((_2220_exprs).Select(_2222_i), selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
            _2224_recursiveGen = _out1429;
            _2225___v68 = _out1430;
            _2226_isErased = _out1431;
            _2227_recIdents = _out1432;
            _2223_allErased = (_2223_allErased) && (_2226_isErased);
            _2221_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2221_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2224_recursiveGen, _2226_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2227_recIdents);
            _2222_i = (_2222_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2222_i = BigInteger.Zero;
          while ((_2222_i) < (new BigInteger((_2221_generatedValues).Count))) {
            if ((_2222_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2228_gen;
            _2228_gen = ((_2221_generatedValues).Select(_2222_i)).dtor__0;
            if ((((_2221_generatedValues).Select(_2222_i)).dtor__1) && (!(_2223_allErased))) {
              _2228_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2228_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2228_gen);
            _2222_i = (_2222_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2223_allErased;
        }
      } else if (_source20.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2229___mcc_h31 = _source20.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2230_mapElems = _2229___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2231_generatedValues;
          _2231_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2232_i;
          _2232_i = BigInteger.Zero;
          bool _2233_allErased;
          _2233_allErased = true;
          while ((_2232_i) < (new BigInteger((_2230_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2234_recursiveGenKey;
            bool _2235___v69;
            bool _2236_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2237_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1433;
            bool _out1434;
            bool _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(((_2230_mapElems).Select(_2232_i)).dtor__0, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
            _2234_recursiveGenKey = _out1433;
            _2235___v69 = _out1434;
            _2236_isErasedKey = _out1435;
            _2237_recIdentsKey = _out1436;
            Dafny.ISequence<Dafny.Rune> _2238_recursiveGenValue;
            bool _2239___v70;
            bool _2240_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2241_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1437;
            bool _out1438;
            bool _out1439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
            DCOMP.COMP.GenExpr(((_2230_mapElems).Select(_2232_i)).dtor__1, selfIdent, @params, true, out _out1437, out _out1438, out _out1439, out _out1440);
            _2238_recursiveGenValue = _out1437;
            _2239___v70 = _out1438;
            _2240_isErasedValue = _out1439;
            _2241_recIdentsValue = _out1440;
            _2233_allErased = ((_2233_allErased) && (_2236_isErasedKey)) && (_2240_isErasedValue);
            _2231_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2231_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2234_recursiveGenKey, _2238_recursiveGenValue, _2236_isErasedKey, _2240_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2237_recIdentsKey), _2241_recIdentsValue);
            _2232_i = (_2232_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2232_i = BigInteger.Zero;
          while ((_2232_i) < (new BigInteger((_2231_generatedValues).Count))) {
            if ((_2232_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2242_genKey;
            _2242_genKey = ((_2231_generatedValues).Select(_2232_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2243_genValue;
            _2243_genValue = ((_2231_generatedValues).Select(_2232_i)).dtor__1;
            if ((((_2231_generatedValues).Select(_2232_i)).dtor__2) && (!(_2233_allErased))) {
              _2242_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2242_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2231_generatedValues).Select(_2232_i)).dtor__3) && (!(_2233_allErased))) {
              _2243_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2243_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2242_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2243_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2232_i = (_2232_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2233_allErased;
        }
      } else if (_source20.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source70 = selfIdent;
          if (_source70.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2244___mcc_h1149 = _source70.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2245_id = _2244___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2245_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2245_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2245_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2245_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source20.is_Ite) {
        DAST._IExpression _2246___mcc_h32 = _source20.dtor_cond;
        DAST._IExpression _2247___mcc_h33 = _source20.dtor_thn;
        DAST._IExpression _2248___mcc_h34 = _source20.dtor_els;
        DAST._IExpression _2249_f = _2248___mcc_h34;
        DAST._IExpression _2250_t = _2247___mcc_h33;
        DAST._IExpression _2251_cond = _2246___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2252_condString;
          bool _2253___v71;
          bool _2254_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2255_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1441;
          bool _out1442;
          bool _out1443;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
          DCOMP.COMP.GenExpr(_2251_cond, selfIdent, @params, true, out _out1441, out _out1442, out _out1443, out _out1444);
          _2252_condString = _out1441;
          _2253___v71 = _out1442;
          _2254_condErased = _out1443;
          _2255_recIdentsCond = _out1444;
          if (!(_2254_condErased)) {
            _2252_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2252_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2256___v72;
          bool _2257_tHasToBeOwned;
          bool _2258___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259___v74;
          Dafny.ISequence<Dafny.Rune> _out1445;
          bool _out1446;
          bool _out1447;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
          DCOMP.COMP.GenExpr(_2250_t, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
          _2256___v72 = _out1445;
          _2257_tHasToBeOwned = _out1446;
          _2258___v73 = _out1447;
          _2259___v74 = _out1448;
          Dafny.ISequence<Dafny.Rune> _2260_fString;
          bool _2261_fOwned;
          bool _2262_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2263_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1449;
          bool _out1450;
          bool _out1451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
          DCOMP.COMP.GenExpr(_2249_f, selfIdent, @params, _2257_tHasToBeOwned, out _out1449, out _out1450, out _out1451, out _out1452);
          _2260_fString = _out1449;
          _2261_fOwned = _out1450;
          _2262_fErased = _out1451;
          _2263_recIdentsF = _out1452;
          Dafny.ISequence<Dafny.Rune> _2264_tString;
          bool _2265___v75;
          bool _2266_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2267_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2250_t, selfIdent, @params, _2261_fOwned, out _out1453, out _out1454, out _out1455, out _out1456);
          _2264_tString = _out1453;
          _2265___v75 = _out1454;
          _2266_tErased = _out1455;
          _2267_recIdentsT = _out1456;
          if ((!(_2262_fErased)) || (!(_2266_tErased))) {
            if (_2262_fErased) {
              _2260_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2260_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2266_tErased) {
              _2264_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2264_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2252_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2264_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2260_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2261_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2255_recIdentsCond, _2267_recIdentsT), _2263_recIdentsF);
          isErased = (_2262_fErased) || (_2266_tErased);
        }
      } else if (_source20.is_UnOp) {
        DAST._IUnaryOp _2268___mcc_h35 = _source20.dtor_unOp;
        DAST._IExpression _2269___mcc_h36 = _source20.dtor_expr;
        DAST._IUnaryOp _source71 = _2268___mcc_h35;
        if (_source71.is_Not) {
          DAST._IExpression _2270_e = _2269___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2271_recursiveGen;
            bool _2272___v76;
            bool _2273_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2274_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1457;
            bool _out1458;
            bool _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_2270_e, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
            _2271_recursiveGen = _out1457;
            _2272___v76 = _out1458;
            _2273_recErased = _out1459;
            _2274_recIdents = _out1460;
            if (!(_2273_recErased)) {
              _2271_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2274_recIdents;
            isErased = true;
          }
        } else if (_source71.is_BitwiseNot) {
          DAST._IExpression _2275_e = _2269___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2276_recursiveGen;
            bool _2277___v77;
            bool _2278_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2279_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr(_2275_e, selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2276_recursiveGen = _out1461;
            _2277___v77 = _out1462;
            _2278_recErased = _out1463;
            _2279_recIdents = _out1464;
            if (!(_2278_recErased)) {
              _2276_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2276_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2279_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2280_e = _2269___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2281_recursiveGen;
            bool _2282_recOwned;
            bool _2283_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2284_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr(_2280_e, selfIdent, @params, false, out _out1465, out _out1466, out _out1467, out _out1468);
            _2281_recursiveGen = _out1465;
            _2282_recOwned = _out1466;
            _2283_recErased = _out1467;
            _2284_recIdents = _out1468;
            if (!(_2283_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2285_eraseFn;
              _2285_eraseFn = ((_2282_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2281_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2285_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2281_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2284_recIdents;
            isErased = true;
          }
        }
      } else if (_source20.is_BinOp) {
        DAST._IBinOp _2286___mcc_h37 = _source20.dtor_op;
        DAST._IExpression _2287___mcc_h38 = _source20.dtor_left;
        DAST._IExpression _2288___mcc_h39 = _source20.dtor_right;
        DAST._IExpression _2289_r = _2288___mcc_h39;
        DAST._IExpression _2290_l = _2287___mcc_h38;
        DAST._IBinOp _2291_op = _2286___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2292_left;
          bool _2293___v78;
          bool _2294_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2295_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1469;
          bool _out1470;
          bool _out1471;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
          DCOMP.COMP.GenExpr(_2290_l, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
          _2292_left = _out1469;
          _2293___v78 = _out1470;
          _2294_leftErased = _out1471;
          _2295_recIdentsL = _out1472;
          Dafny.ISequence<Dafny.Rune> _2296_right;
          bool _2297___v79;
          bool _2298_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2299_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1473;
          bool _out1474;
          bool _out1475;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
          DCOMP.COMP.GenExpr(_2289_r, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
          _2296_right = _out1473;
          _2297___v79 = _out1474;
          _2298_rightErased = _out1475;
          _2299_recIdentsR = _out1476;
          DAST._IBinOp _source72 = _2291_op;
          if (_source72.is_Eq) {
            bool _2300___mcc_h1150 = _source72.dtor_referential;
            bool _2301___mcc_h1151 = _source72.dtor_nullable;
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source73 = _2291_op;
              if (_source73.is_Eq) {
                bool _2302___mcc_h1160 = _source73.dtor_referential;
                bool _2303___mcc_h1161 = _source73.dtor_nullable;
                bool _2304_nullable = _2303___mcc_h1161;
                bool _2305_referential = _2302___mcc_h1160;
                {
                  if (_2305_referential) {
                    if (_2304_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source73.is_Neq) {
                bool _2306___mcc_h1162 = _source73.dtor_referential;
                bool _2307___mcc_h1163 = _source73.dtor_nullable;
                bool _2308_nullable = _2307___mcc_h1163;
                bool _2309_referential = _2306___mcc_h1162;
                {
                  if (_2309_referential) {
                    if (_2308_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source73.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source73.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2310___mcc_h1164 = _source73.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2311_op = _2310___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2311_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Neq) {
            bool _2312___mcc_h1154 = _source72.dtor_referential;
            bool _2313___mcc_h1155 = _source72.dtor_nullable;
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2291_op;
              if (_source74.is_Eq) {
                bool _2314___mcc_h1165 = _source74.dtor_referential;
                bool _2315___mcc_h1166 = _source74.dtor_nullable;
                bool _2316_nullable = _2315___mcc_h1166;
                bool _2317_referential = _2314___mcc_h1165;
                {
                  if (_2317_referential) {
                    if (_2316_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source74.is_Neq) {
                bool _2318___mcc_h1167 = _source74.dtor_referential;
                bool _2319___mcc_h1168 = _source74.dtor_nullable;
                bool _2320_nullable = _2319___mcc_h1168;
                bool _2321_referential = _2318___mcc_h1167;
                {
                  if (_2321_referential) {
                    if (_2320_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2322___mcc_h1169 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2323_op = _2322___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2323_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Div) {
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2291_op;
              if (_source75.is_Eq) {
                bool _2324___mcc_h1170 = _source75.dtor_referential;
                bool _2325___mcc_h1171 = _source75.dtor_nullable;
                bool _2326_nullable = _2325___mcc_h1171;
                bool _2327_referential = _2324___mcc_h1170;
                {
                  if (_2327_referential) {
                    if (_2326_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source75.is_Neq) {
                bool _2328___mcc_h1172 = _source75.dtor_referential;
                bool _2329___mcc_h1173 = _source75.dtor_nullable;
                bool _2330_nullable = _2329___mcc_h1173;
                bool _2331_referential = _2328___mcc_h1172;
                {
                  if (_2331_referential) {
                    if (_2330_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2332___mcc_h1174 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2333_op = _2332___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2333_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianDiv) {
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2291_op;
              if (_source76.is_Eq) {
                bool _2334___mcc_h1175 = _source76.dtor_referential;
                bool _2335___mcc_h1176 = _source76.dtor_nullable;
                bool _2336_nullable = _2335___mcc_h1176;
                bool _2337_referential = _2334___mcc_h1175;
                {
                  if (_2337_referential) {
                    if (_2336_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source76.is_Neq) {
                bool _2338___mcc_h1177 = _source76.dtor_referential;
                bool _2339___mcc_h1178 = _source76.dtor_nullable;
                bool _2340_nullable = _2339___mcc_h1178;
                bool _2341_referential = _2338___mcc_h1177;
                {
                  if (_2341_referential) {
                    if (_2340_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2342___mcc_h1179 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2343_op = _2342___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2343_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Mod) {
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2291_op;
              if (_source77.is_Eq) {
                bool _2344___mcc_h1180 = _source77.dtor_referential;
                bool _2345___mcc_h1181 = _source77.dtor_nullable;
                bool _2346_nullable = _2345___mcc_h1181;
                bool _2347_referential = _2344___mcc_h1180;
                {
                  if (_2347_referential) {
                    if (_2346_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source77.is_Neq) {
                bool _2348___mcc_h1182 = _source77.dtor_referential;
                bool _2349___mcc_h1183 = _source77.dtor_nullable;
                bool _2350_nullable = _2349___mcc_h1183;
                bool _2351_referential = _2348___mcc_h1182;
                {
                  if (_2351_referential) {
                    if (_2350_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2352___mcc_h1184 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2353_op = _2352___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2353_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_EuclidianMod) {
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2291_op;
              if (_source78.is_Eq) {
                bool _2354___mcc_h1185 = _source78.dtor_referential;
                bool _2355___mcc_h1186 = _source78.dtor_nullable;
                bool _2356_nullable = _2355___mcc_h1186;
                bool _2357_referential = _2354___mcc_h1185;
                {
                  if (_2357_referential) {
                    if (_2356_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2358___mcc_h1187 = _source78.dtor_referential;
                bool _2359___mcc_h1188 = _source78.dtor_nullable;
                bool _2360_nullable = _2359___mcc_h1188;
                bool _2361_referential = _2358___mcc_h1187;
                {
                  if (_2361_referential) {
                    if (_2360_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2362___mcc_h1189 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2363_op = _2362___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2363_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source72.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2296_right);
            }
          } else if (_source72.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2296_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source72.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source72.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source72.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2364___mcc_h1158 = _source72.dtor_Passthrough_a0;
            {
              if (!(_2294_leftErased)) {
                _2292_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2298_rightErased)) {
                _2296_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2291_op;
              if (_source79.is_Eq) {
                bool _2365___mcc_h1190 = _source79.dtor_referential;
                bool _2366___mcc_h1191 = _source79.dtor_nullable;
                bool _2367_nullable = _2366___mcc_h1191;
                bool _2368_referential = _2365___mcc_h1190;
                {
                  if (_2368_referential) {
                    if (_2367_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2296_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2369___mcc_h1192 = _source79.dtor_referential;
                bool _2370___mcc_h1193 = _source79.dtor_nullable;
                bool _2371_nullable = _2370___mcc_h1193;
                bool _2372_referential = _2369___mcc_h1192;
                {
                  if (_2372_referential) {
                    if (_2371_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2296_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2373___mcc_h1194 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2374_op = _2373___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2374_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2296_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2295_recIdentsL, _2299_recIdentsR);
          isErased = true;
        }
      } else if (_source20.is_ArrayLen) {
        DAST._IExpression _2375___mcc_h40 = _source20.dtor_expr;
        BigInteger _2376___mcc_h41 = _source20.dtor_dim;
        BigInteger _2377_dim = _2376___mcc_h41;
        DAST._IExpression _2378_expr = _2375___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2379_recursiveGen;
          bool _2380___v81;
          bool _2381_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2382_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2378_expr, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2379_recursiveGen = _out1477;
          _2380___v81 = _out1478;
          _2381_recErased = _out1479;
          _2382_recIdents = _out1480;
          if ((_2377_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2383_i;
            _2383_i = BigInteger.One;
            while ((_2383_i) < (_2377_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2383_i = (_2383_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2382_recIdents;
          isErased = true;
        }
      } else if (_source20.is_Select) {
        DAST._IExpression _2384___mcc_h42 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2385___mcc_h43 = _source20.dtor_field;
        bool _2386___mcc_h44 = _source20.dtor_isConstant;
        bool _2387___mcc_h45 = _source20.dtor_onDatatype;
        DAST._IExpression _source80 = _2384___mcc_h42;
        if (_source80.is_Literal) {
          DAST._ILiteral _2388___mcc_h46 = _source80.dtor_Literal_a0;
          bool _2389_isDatatype = _2387___mcc_h45;
          bool _2390_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2391_field = _2385___mcc_h43;
          DAST._IExpression _2392_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2393_onString;
            bool _2394_onOwned;
            bool _2395_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2396_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_2392_on, selfIdent, @params, false, out _out1481, out _out1482, out _out1483, out _out1484);
            _2393_onString = _out1481;
            _2394_onOwned = _out1482;
            _2395_onErased = _out1483;
            _2396_recIdents = _out1484;
            if ((_2389_isDatatype) || (_2390_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2390_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2396_recIdents;
          }
        } else if (_source80.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2397___mcc_h48 = _source80.dtor_Ident_a0;
          bool _2398_isDatatype = _2387___mcc_h45;
          bool _2399_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2400_field = _2385___mcc_h43;
          DAST._IExpression _2401_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2402_onString;
            bool _2403_onOwned;
            bool _2404_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2405_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr(_2401_on, selfIdent, @params, false, out _out1485, out _out1486, out _out1487, out _out1488);
            _2402_onString = _out1485;
            _2403_onOwned = _out1486;
            _2404_onErased = _out1487;
            _2405_recIdents = _out1488;
            if ((_2398_isDatatype) || (_2399_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2402_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2400_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2399_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2402_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2400_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2405_recIdents;
          }
        } else if (_source80.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2406___mcc_h50 = _source80.dtor_Companion_a0;
          bool _2407_isDatatype = _2387___mcc_h45;
          bool _2408_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2409_field = _2385___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2410_c = _2406___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2411_onString;
            bool _2412_onOwned;
            bool _2413_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2414_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2410_c), selfIdent, @params, false, out _out1489, out _out1490, out _out1491, out _out1492);
            _2411_onString = _out1489;
            _2412_onOwned = _out1490;
            _2413_onErased = _out1491;
            _2414_recIdents = _out1492;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2411_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2409_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2414_recIdents;
          }
        } else if (_source80.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2415___mcc_h52 = _source80.dtor_Tuple_a0;
          bool _2416_isDatatype = _2387___mcc_h45;
          bool _2417_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2418_field = _2385___mcc_h43;
          DAST._IExpression _2419_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2420_onString;
            bool _2421_onOwned;
            bool _2422_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2423_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2419_on, selfIdent, @params, false, out _out1493, out _out1494, out _out1495, out _out1496);
            _2420_onString = _out1493;
            _2421_onOwned = _out1494;
            _2422_onErased = _out1495;
            _2423_recIdents = _out1496;
            if ((_2416_isDatatype) || (_2417_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2417_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2423_recIdents;
          }
        } else if (_source80.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2424___mcc_h54 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2425___mcc_h55 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2426___mcc_h56 = _source80.dtor_args;
          bool _2427_isDatatype = _2387___mcc_h45;
          bool _2428_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2429_field = _2385___mcc_h43;
          DAST._IExpression _2430_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2431_onString;
            bool _2432_onOwned;
            bool _2433_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2434_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2430_on, selfIdent, @params, false, out _out1497, out _out1498, out _out1499, out _out1500);
            _2431_onString = _out1497;
            _2432_onOwned = _out1498;
            _2433_onErased = _out1499;
            _2434_recIdents = _out1500;
            if ((_2427_isDatatype) || (_2428_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2431_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2429_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2428_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2431_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2429_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2434_recIdents;
          }
        } else if (_source80.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2435___mcc_h60 = _source80.dtor_dims;
          DAST._IType _2436___mcc_h61 = _source80.dtor_typ;
          bool _2437_isDatatype = _2387___mcc_h45;
          bool _2438_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2439_field = _2385___mcc_h43;
          DAST._IExpression _2440_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2441_onString;
            bool _2442_onOwned;
            bool _2443_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2444_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_2440_on, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _2441_onString = _out1501;
            _2442_onOwned = _out1502;
            _2443_onErased = _out1503;
            _2444_recIdents = _out1504;
            if ((_2437_isDatatype) || (_2438_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2441_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2439_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2438_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2441_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2439_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2444_recIdents;
          }
        } else if (_source80.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2445___mcc_h64 = _source80.dtor_path;
          Dafny.ISequence<DAST._IType> _2446___mcc_h65 = _source80.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2447___mcc_h66 = _source80.dtor_variant;
          bool _2448___mcc_h67 = _source80.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2449___mcc_h68 = _source80.dtor_contents;
          bool _2450_isDatatype = _2387___mcc_h45;
          bool _2451_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2452_field = _2385___mcc_h43;
          DAST._IExpression _2453_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2454_onString;
            bool _2455_onOwned;
            bool _2456_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2457_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1505;
            bool _out1506;
            bool _out1507;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
            DCOMP.COMP.GenExpr(_2453_on, selfIdent, @params, false, out _out1505, out _out1506, out _out1507, out _out1508);
            _2454_onString = _out1505;
            _2455_onOwned = _out1506;
            _2456_onErased = _out1507;
            _2457_recIdents = _out1508;
            if ((_2450_isDatatype) || (_2451_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2454_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2452_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2451_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2454_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2452_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2457_recIdents;
          }
        } else if (_source80.is_Convert) {
          DAST._IExpression _2458___mcc_h74 = _source80.dtor_value;
          DAST._IType _2459___mcc_h75 = _source80.dtor_from;
          DAST._IType _2460___mcc_h76 = _source80.dtor_typ;
          bool _2461_isDatatype = _2387___mcc_h45;
          bool _2462_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2463_field = _2385___mcc_h43;
          DAST._IExpression _2464_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2465_onString;
            bool _2466_onOwned;
            bool _2467_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2468_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1509;
            bool _out1510;
            bool _out1511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
            DCOMP.COMP.GenExpr(_2464_on, selfIdent, @params, false, out _out1509, out _out1510, out _out1511, out _out1512);
            _2465_onString = _out1509;
            _2466_onOwned = _out1510;
            _2467_onErased = _out1511;
            _2468_recIdents = _out1512;
            if ((_2461_isDatatype) || (_2462_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2465_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2463_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2462_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2465_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2463_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2468_recIdents;
          }
        } else if (_source80.is_SeqConstruct) {
          DAST._IExpression _2469___mcc_h80 = _source80.dtor_length;
          DAST._IExpression _2470___mcc_h81 = _source80.dtor_elem;
          bool _2471_isDatatype = _2387___mcc_h45;
          bool _2472_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2473_field = _2385___mcc_h43;
          DAST._IExpression _2474_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2475_onString;
            bool _2476_onOwned;
            bool _2477_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2478_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_2474_on, selfIdent, @params, false, out _out1513, out _out1514, out _out1515, out _out1516);
            _2475_onString = _out1513;
            _2476_onOwned = _out1514;
            _2477_onErased = _out1515;
            _2478_recIdents = _out1516;
            if ((_2471_isDatatype) || (_2472_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2475_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2472_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2475_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2478_recIdents;
          }
        } else if (_source80.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2479___mcc_h84 = _source80.dtor_elements;
          DAST._IType _2480___mcc_h85 = _source80.dtor_typ;
          bool _2481_isDatatype = _2387___mcc_h45;
          bool _2482_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2483_field = _2385___mcc_h43;
          DAST._IExpression _2484_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2485_onString;
            bool _2486_onOwned;
            bool _2487_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2488_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_2484_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _2485_onString = _out1517;
            _2486_onOwned = _out1518;
            _2487_onErased = _out1519;
            _2488_recIdents = _out1520;
            if ((_2481_isDatatype) || (_2482_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2485_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2483_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2482_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2485_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2483_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2488_recIdents;
          }
        } else if (_source80.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2489___mcc_h88 = _source80.dtor_elements;
          bool _2490_isDatatype = _2387___mcc_h45;
          bool _2491_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2492_field = _2385___mcc_h43;
          DAST._IExpression _2493_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2494_onString;
            bool _2495_onOwned;
            bool _2496_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_2493_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _2494_onString = _out1521;
            _2495_onOwned = _out1522;
            _2496_onErased = _out1523;
            _2497_recIdents = _out1524;
            if ((_2490_isDatatype) || (_2491_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2494_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2492_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2491_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2494_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2492_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2497_recIdents;
          }
        } else if (_source80.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2498___mcc_h90 = _source80.dtor_mapElems;
          bool _2499_isDatatype = _2387___mcc_h45;
          bool _2500_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2501_field = _2385___mcc_h43;
          DAST._IExpression _2502_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2503_onString;
            bool _2504_onOwned;
            bool _2505_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2506_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(_2502_on, selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _2503_onString = _out1525;
            _2504_onOwned = _out1526;
            _2505_onErased = _out1527;
            _2506_recIdents = _out1528;
            if ((_2499_isDatatype) || (_2500_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2503_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2501_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2500_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2503_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2501_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2506_recIdents;
          }
        } else if (_source80.is_This) {
          bool _2507_isDatatype = _2387___mcc_h45;
          bool _2508_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2509_field = _2385___mcc_h43;
          DAST._IExpression _2510_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2511_onString;
            bool _2512_onOwned;
            bool _2513_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2514_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_2510_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _2511_onString = _out1529;
            _2512_onOwned = _out1530;
            _2513_onErased = _out1531;
            _2514_recIdents = _out1532;
            if ((_2507_isDatatype) || (_2508_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2511_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2509_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2508_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2511_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2509_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2514_recIdents;
          }
        } else if (_source80.is_Ite) {
          DAST._IExpression _2515___mcc_h92 = _source80.dtor_cond;
          DAST._IExpression _2516___mcc_h93 = _source80.dtor_thn;
          DAST._IExpression _2517___mcc_h94 = _source80.dtor_els;
          bool _2518_isDatatype = _2387___mcc_h45;
          bool _2519_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2520_field = _2385___mcc_h43;
          DAST._IExpression _2521_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2522_onString;
            bool _2523_onOwned;
            bool _2524_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2525_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_2521_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _2522_onString = _out1533;
            _2523_onOwned = _out1534;
            _2524_onErased = _out1535;
            _2525_recIdents = _out1536;
            if ((_2518_isDatatype) || (_2519_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2519_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2525_recIdents;
          }
        } else if (_source80.is_UnOp) {
          DAST._IUnaryOp _2526___mcc_h98 = _source80.dtor_unOp;
          DAST._IExpression _2527___mcc_h99 = _source80.dtor_expr;
          bool _2528_isDatatype = _2387___mcc_h45;
          bool _2529_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2530_field = _2385___mcc_h43;
          DAST._IExpression _2531_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2532_onString;
            bool _2533_onOwned;
            bool _2534_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2535_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_2531_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _2532_onString = _out1537;
            _2533_onOwned = _out1538;
            _2534_onErased = _out1539;
            _2535_recIdents = _out1540;
            if ((_2528_isDatatype) || (_2529_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2532_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2530_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2529_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2532_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2530_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2535_recIdents;
          }
        } else if (_source80.is_BinOp) {
          DAST._IBinOp _2536___mcc_h102 = _source80.dtor_op;
          DAST._IExpression _2537___mcc_h103 = _source80.dtor_left;
          DAST._IExpression _2538___mcc_h104 = _source80.dtor_right;
          bool _2539_isDatatype = _2387___mcc_h45;
          bool _2540_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2541_field = _2385___mcc_h43;
          DAST._IExpression _2542_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2543_onString;
            bool _2544_onOwned;
            bool _2545_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_2542_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _2543_onString = _out1541;
            _2544_onOwned = _out1542;
            _2545_onErased = _out1543;
            _2546_recIdents = _out1544;
            if ((_2539_isDatatype) || (_2540_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2543_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2541_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2540_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2543_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2541_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2546_recIdents;
          }
        } else if (_source80.is_ArrayLen) {
          DAST._IExpression _2547___mcc_h108 = _source80.dtor_expr;
          BigInteger _2548___mcc_h109 = _source80.dtor_dim;
          bool _2549_isDatatype = _2387___mcc_h45;
          bool _2550_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2551_field = _2385___mcc_h43;
          DAST._IExpression _2552_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2553_onString;
            bool _2554_onOwned;
            bool _2555_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2556_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_2552_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _2553_onString = _out1545;
            _2554_onOwned = _out1546;
            _2555_onErased = _out1547;
            _2556_recIdents = _out1548;
            if ((_2549_isDatatype) || (_2550_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2553_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2551_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2550_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2553_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2551_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2556_recIdents;
          }
        } else if (_source80.is_Select) {
          DAST._IExpression _2557___mcc_h112 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2558___mcc_h113 = _source80.dtor_field;
          bool _2559___mcc_h114 = _source80.dtor_isConstant;
          bool _2560___mcc_h115 = _source80.dtor_onDatatype;
          bool _2561_isDatatype = _2387___mcc_h45;
          bool _2562_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2563_field = _2385___mcc_h43;
          DAST._IExpression _2564_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2565_onString;
            bool _2566_onOwned;
            bool _2567_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2568_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_2564_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _2565_onString = _out1549;
            _2566_onOwned = _out1550;
            _2567_onErased = _out1551;
            _2568_recIdents = _out1552;
            if ((_2561_isDatatype) || (_2562_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2562_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2568_recIdents;
          }
        } else if (_source80.is_SelectFn) {
          DAST._IExpression _2569___mcc_h120 = _source80.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2570___mcc_h121 = _source80.dtor_field;
          bool _2571___mcc_h122 = _source80.dtor_onDatatype;
          bool _2572___mcc_h123 = _source80.dtor_isStatic;
          BigInteger _2573___mcc_h124 = _source80.dtor_arity;
          bool _2574_isDatatype = _2387___mcc_h45;
          bool _2575_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2576_field = _2385___mcc_h43;
          DAST._IExpression _2577_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2578_onString;
            bool _2579_onOwned;
            bool _2580_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2581_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_2577_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _2578_onString = _out1553;
            _2579_onOwned = _out1554;
            _2580_onErased = _out1555;
            _2581_recIdents = _out1556;
            if ((_2574_isDatatype) || (_2575_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2578_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2576_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2575_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2578_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2576_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2581_recIdents;
          }
        } else if (_source80.is_Index) {
          DAST._IExpression _2582___mcc_h130 = _source80.dtor_expr;
          DAST._ICollKind _2583___mcc_h131 = _source80.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2584___mcc_h132 = _source80.dtor_indices;
          bool _2585_isDatatype = _2387___mcc_h45;
          bool _2586_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2587_field = _2385___mcc_h43;
          DAST._IExpression _2588_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2589_onString;
            bool _2590_onOwned;
            bool _2591_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2592_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_2588_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _2589_onString = _out1557;
            _2590_onOwned = _out1558;
            _2591_onErased = _out1559;
            _2592_recIdents = _out1560;
            if ((_2585_isDatatype) || (_2586_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2589_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2587_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2586_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2589_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2587_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2592_recIdents;
          }
        } else if (_source80.is_IndexRange) {
          DAST._IExpression _2593___mcc_h136 = _source80.dtor_expr;
          bool _2594___mcc_h137 = _source80.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2595___mcc_h138 = _source80.dtor_low;
          DAST._IOptional<DAST._IExpression> _2596___mcc_h139 = _source80.dtor_high;
          bool _2597_isDatatype = _2387___mcc_h45;
          bool _2598_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2599_field = _2385___mcc_h43;
          DAST._IExpression _2600_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2601_onString;
            bool _2602_onOwned;
            bool _2603_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2604_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_2600_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _2601_onString = _out1561;
            _2602_onOwned = _out1562;
            _2603_onErased = _out1563;
            _2604_recIdents = _out1564;
            if ((_2597_isDatatype) || (_2598_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2601_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2599_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2598_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2601_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2599_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2604_recIdents;
          }
        } else if (_source80.is_TupleSelect) {
          DAST._IExpression _2605___mcc_h144 = _source80.dtor_expr;
          BigInteger _2606___mcc_h145 = _source80.dtor_index;
          bool _2607_isDatatype = _2387___mcc_h45;
          bool _2608_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2609_field = _2385___mcc_h43;
          DAST._IExpression _2610_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2611_onString;
            bool _2612_onOwned;
            bool _2613_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2614_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_2610_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _2611_onString = _out1565;
            _2612_onOwned = _out1566;
            _2613_onErased = _out1567;
            _2614_recIdents = _out1568;
            if ((_2607_isDatatype) || (_2608_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2611_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2609_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2608_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2611_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2609_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2614_recIdents;
          }
        } else if (_source80.is_Call) {
          DAST._IExpression _2615___mcc_h148 = _source80.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2616___mcc_h149 = _source80.dtor_name;
          Dafny.ISequence<DAST._IType> _2617___mcc_h150 = _source80.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2618___mcc_h151 = _source80.dtor_args;
          bool _2619_isDatatype = _2387___mcc_h45;
          bool _2620_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2621_field = _2385___mcc_h43;
          DAST._IExpression _2622_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2623_onString;
            bool _2624_onOwned;
            bool _2625_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2626_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_2622_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _2623_onString = _out1569;
            _2624_onOwned = _out1570;
            _2625_onErased = _out1571;
            _2626_recIdents = _out1572;
            if ((_2619_isDatatype) || (_2620_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2623_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2621_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2620_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2623_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2621_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2626_recIdents;
          }
        } else if (_source80.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2627___mcc_h156 = _source80.dtor_params;
          DAST._IType _2628___mcc_h157 = _source80.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2629___mcc_h158 = _source80.dtor_body;
          bool _2630_isDatatype = _2387___mcc_h45;
          bool _2631_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2632_field = _2385___mcc_h43;
          DAST._IExpression _2633_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2634_onString;
            bool _2635_onOwned;
            bool _2636_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2637_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_2633_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _2634_onString = _out1573;
            _2635_onOwned = _out1574;
            _2636_onErased = _out1575;
            _2637_recIdents = _out1576;
            if ((_2630_isDatatype) || (_2631_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2634_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2632_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2631_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2634_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2632_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2637_recIdents;
          }
        } else if (_source80.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2638___mcc_h162 = _source80.dtor_values;
          DAST._IType _2639___mcc_h163 = _source80.dtor_retType;
          DAST._IExpression _2640___mcc_h164 = _source80.dtor_expr;
          bool _2641_isDatatype = _2387___mcc_h45;
          bool _2642_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2643_field = _2385___mcc_h43;
          DAST._IExpression _2644_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2645_onString;
            bool _2646_onOwned;
            bool _2647_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2648_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_2644_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _2645_onString = _out1577;
            _2646_onOwned = _out1578;
            _2647_onErased = _out1579;
            _2648_recIdents = _out1580;
            if ((_2641_isDatatype) || (_2642_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2645_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2643_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2642_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2645_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2643_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2648_recIdents;
          }
        } else if (_source80.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2649___mcc_h168 = _source80.dtor_name;
          DAST._IType _2650___mcc_h169 = _source80.dtor_typ;
          DAST._IExpression _2651___mcc_h170 = _source80.dtor_value;
          DAST._IExpression _2652___mcc_h171 = _source80.dtor_iifeBody;
          bool _2653_isDatatype = _2387___mcc_h45;
          bool _2654_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2655_field = _2385___mcc_h43;
          DAST._IExpression _2656_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2657_onString;
            bool _2658_onOwned;
            bool _2659_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_2656_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _2657_onString = _out1581;
            _2658_onOwned = _out1582;
            _2659_onErased = _out1583;
            _2660_recIdents = _out1584;
            if ((_2653_isDatatype) || (_2654_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2657_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2655_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2654_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2657_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2655_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2660_recIdents;
          }
        } else if (_source80.is_Apply) {
          DAST._IExpression _2661___mcc_h176 = _source80.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2662___mcc_h177 = _source80.dtor_args;
          bool _2663_isDatatype = _2387___mcc_h45;
          bool _2664_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2665_field = _2385___mcc_h43;
          DAST._IExpression _2666_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2667_onString;
            bool _2668_onOwned;
            bool _2669_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2670_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_2666_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _2667_onString = _out1585;
            _2668_onOwned = _out1586;
            _2669_onErased = _out1587;
            _2670_recIdents = _out1588;
            if ((_2663_isDatatype) || (_2664_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2667_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2665_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2664_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2667_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2665_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2670_recIdents;
          }
        } else if (_source80.is_TypeTest) {
          DAST._IExpression _2671___mcc_h180 = _source80.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2672___mcc_h181 = _source80.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2673___mcc_h182 = _source80.dtor_variant;
          bool _2674_isDatatype = _2387___mcc_h45;
          bool _2675_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2676_field = _2385___mcc_h43;
          DAST._IExpression _2677_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2678_onString;
            bool _2679_onOwned;
            bool _2680_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_2677_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _2678_onString = _out1589;
            _2679_onOwned = _out1590;
            _2680_onErased = _out1591;
            _2681_recIdents = _out1592;
            if ((_2674_isDatatype) || (_2675_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2678_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2676_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2675_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2678_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2676_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2681_recIdents;
          }
        } else if (_source80.is_InitializationValue) {
          DAST._IType _2682___mcc_h186 = _source80.dtor_typ;
          bool _2683_isDatatype = _2387___mcc_h45;
          bool _2684_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2685_field = _2385___mcc_h43;
          DAST._IExpression _2686_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2687_onString;
            bool _2688_onOwned;
            bool _2689_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2690_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_2686_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _2687_onString = _out1593;
            _2688_onOwned = _out1594;
            _2689_onErased = _out1595;
            _2690_recIdents = _out1596;
            if ((_2683_isDatatype) || (_2684_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2684_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2690_recIdents;
          }
        } else if (_source80.is_BoolBoundedPool) {
          bool _2691_isDatatype = _2387___mcc_h45;
          bool _2692_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2693_field = _2385___mcc_h43;
          DAST._IExpression _2694_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2695_onString;
            bool _2696_onOwned;
            bool _2697_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2698_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_2694_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _2695_onString = _out1597;
            _2696_onOwned = _out1598;
            _2697_onErased = _out1599;
            _2698_recIdents = _out1600;
            if ((_2691_isDatatype) || (_2692_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2695_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2693_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2692_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2695_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2693_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2698_recIdents;
          }
        } else if (_source80.is_SetBoundedPool) {
          DAST._IExpression _2699___mcc_h188 = _source80.dtor_of;
          bool _2700_isDatatype = _2387___mcc_h45;
          bool _2701_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2702_field = _2385___mcc_h43;
          DAST._IExpression _2703_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2704_onString;
            bool _2705_onOwned;
            bool _2706_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2707_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_2703_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _2704_onString = _out1601;
            _2705_onOwned = _out1602;
            _2706_onErased = _out1603;
            _2707_recIdents = _out1604;
            if ((_2700_isDatatype) || (_2701_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2704_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2702_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2701_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2704_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2702_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2707_recIdents;
          }
        } else if (_source80.is_SeqBoundedPool) {
          DAST._IExpression _2708___mcc_h190 = _source80.dtor_of;
          bool _2709___mcc_h191 = _source80.dtor_includeDuplicates;
          bool _2710_isDatatype = _2387___mcc_h45;
          bool _2711_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2712_field = _2385___mcc_h43;
          DAST._IExpression _2713_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2714_onString;
            bool _2715_onOwned;
            bool _2716_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2717_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_2713_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _2714_onString = _out1605;
            _2715_onOwned = _out1606;
            _2716_onErased = _out1607;
            _2717_recIdents = _out1608;
            if ((_2710_isDatatype) || (_2711_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2714_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2712_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2711_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2714_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2712_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2717_recIdents;
          }
        } else {
          DAST._IExpression _2718___mcc_h194 = _source80.dtor_lo;
          DAST._IExpression _2719___mcc_h195 = _source80.dtor_hi;
          bool _2720_isDatatype = _2387___mcc_h45;
          bool _2721_isConstant = _2386___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2722_field = _2385___mcc_h43;
          DAST._IExpression _2723_on = _2384___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2724_onString;
            bool _2725_onOwned;
            bool _2726_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2727_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_2723_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _2724_onString = _out1609;
            _2725_onOwned = _out1610;
            _2726_onErased = _out1611;
            _2727_recIdents = _out1612;
            if ((_2720_isDatatype) || (_2721_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2724_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2722_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2721_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2724_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2722_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2727_recIdents;
          }
        }
      } else if (_source20.is_SelectFn) {
        DAST._IExpression _2728___mcc_h198 = _source20.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2729___mcc_h199 = _source20.dtor_field;
        bool _2730___mcc_h200 = _source20.dtor_onDatatype;
        bool _2731___mcc_h201 = _source20.dtor_isStatic;
        BigInteger _2732___mcc_h202 = _source20.dtor_arity;
        BigInteger _2733_arity = _2732___mcc_h202;
        bool _2734_isStatic = _2731___mcc_h201;
        bool _2735_isDatatype = _2730___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2736_field = _2729___mcc_h199;
        DAST._IExpression _2737_on = _2728___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2738_onString;
          bool _2739_onOwned;
          bool _2740___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2741_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1613;
          bool _out1614;
          bool _out1615;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
          DCOMP.COMP.GenExpr(_2737_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
          _2738_onString = _out1613;
          _2739_onOwned = _out1614;
          _2740___v82 = _out1615;
          _2741_recIdents = _out1616;
          if (_2734_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2738_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2736_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2738_onString), ((_2739_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2742_args;
            _2742_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2743_i;
            _2743_i = BigInteger.Zero;
            while ((_2743_i) < (_2733_arity)) {
              if ((_2743_i).Sign == 1) {
                _2742_args = Dafny.Sequence<Dafny.Rune>.Concat(_2742_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2742_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2742_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_2743_i));
              _2743_i = (_2743_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2742_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2736_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2742_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2744_typeShape;
          _2744_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2745_i;
          _2745_i = BigInteger.Zero;
          while ((_2745_i) < (_2733_arity)) {
            if ((_2745_i).Sign == 1) {
              _2744_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2744_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2744_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2744_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2745_i = (_2745_i) + (BigInteger.One);
          }
          _2744_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2744_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2744_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2741_recIdents;
        }
      } else if (_source20.is_Index) {
        DAST._IExpression _2746___mcc_h203 = _source20.dtor_expr;
        DAST._ICollKind _2747___mcc_h204 = _source20.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2748___mcc_h205 = _source20.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2749_indices = _2748___mcc_h205;
        DAST._ICollKind _2750_collKind = _2747___mcc_h204;
        DAST._IExpression _2751_on = _2746___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2752_onString;
          bool _2753_onOwned;
          bool _2754_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2755_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1617;
          bool _out1618;
          bool _out1619;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
          DCOMP.COMP.GenExpr(_2751_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
          _2752_onString = _out1617;
          _2753_onOwned = _out1618;
          _2754_onErased = _out1619;
          _2755_recIdents = _out1620;
          readIdents = _2755_recIdents;
          s = _2752_onString;
          BigInteger _2756_i;
          _2756_i = BigInteger.Zero;
          while ((_2756_i) < (new BigInteger((_2749_indices).Count))) {
            if (object.Equals(_2750_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2750_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2757_idx;
              bool _2758_idxOwned;
              bool _2759_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2760_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1621;
              bool _out1622;
              bool _out1623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
              DCOMP.COMP.GenExpr((_2749_indices).Select(_2756_i), selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
              _2757_idx = _out1621;
              _2758_idxOwned = _out1622;
              _2759_idxErased = _out1623;
              _2760_recIdentsIdx = _out1624;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2758_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2757_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2760_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2761_idx;
              bool _2762___v83;
              bool _2763_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2764_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1625;
              bool _out1626;
              bool _out1627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
              DCOMP.COMP.GenExpr((_2749_indices).Select(_2756_i), selfIdent, @params, true, out _out1625, out _out1626, out _out1627, out _out1628);
              _2761_idx = _out1625;
              _2762___v83 = _out1626;
              _2763_idxErased = _out1627;
              _2764_recIdentsIdx = _out1628;
              if (!(_2763_idxErased)) {
                _2761_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2761_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2761_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2764_recIdentsIdx);
            }
            _2756_i = (_2756_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2754_onErased;
        }
      } else if (_source20.is_IndexRange) {
        DAST._IExpression _2765___mcc_h206 = _source20.dtor_expr;
        bool _2766___mcc_h207 = _source20.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2767___mcc_h208 = _source20.dtor_low;
        DAST._IOptional<DAST._IExpression> _2768___mcc_h209 = _source20.dtor_high;
        DAST._IOptional<DAST._IExpression> _2769_high = _2768___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2770_low = _2767___mcc_h208;
        bool _2771_isArray = _2766___mcc_h207;
        DAST._IExpression _2772_on = _2765___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2773_onString;
          bool _2774_onOwned;
          bool _2775_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1629;
          bool _out1630;
          bool _out1631;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
          DCOMP.COMP.GenExpr(_2772_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
          _2773_onString = _out1629;
          _2774_onOwned = _out1630;
          _2775_onErased = _out1631;
          _2776_recIdents = _out1632;
          readIdents = _2776_recIdents;
          s = _2773_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2777_lowString;
          _2777_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source81 = _2770_low;
          if (_source81.is_Some) {
            DAST._IExpression _2778___mcc_h1195 = _source81.dtor_Some_a0;
            DAST._IExpression _2779_l = _2778___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2780_lString;
              bool _2781___v84;
              bool _2782_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2783_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1633;
              bool _out1634;
              bool _out1635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
              DCOMP.COMP.GenExpr(_2779_l, selfIdent, @params, true, out _out1633, out _out1634, out _out1635, out _out1636);
              _2780_lString = _out1633;
              _2781___v84 = _out1634;
              _2782_lErased = _out1635;
              _2783_recIdentsL = _out1636;
              if (!(_2782_lErased)) {
                _2780_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2780_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2777_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2780_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2783_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2784_highString;
          _2784_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source82 = _2769_high;
          if (_source82.is_Some) {
            DAST._IExpression _2785___mcc_h1196 = _source82.dtor_Some_a0;
            DAST._IExpression _2786_h = _2785___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2787_hString;
              bool _2788___v85;
              bool _2789_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2790_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1637;
              bool _out1638;
              bool _out1639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
              DCOMP.COMP.GenExpr(_2786_h, selfIdent, @params, true, out _out1637, out _out1638, out _out1639, out _out1640);
              _2787_hString = _out1637;
              _2788___v85 = _out1638;
              _2789_hErased = _out1639;
              _2790_recIdentsH = _out1640;
              if (!(_2789_hErased)) {
                _2787_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2787_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2784_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2787_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2790_recIdentsH);
            }
          } else {
          }
          if (_2771_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source83) => {
            if (_source83.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2791___mcc_h1197 = _source83.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2792_l = _2791___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2792_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2777_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source84) => {
            if (_source84.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2793___mcc_h1198 = _source84.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2794_h = _2793___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2794_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2784_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2775_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source20.is_TupleSelect) {
        DAST._IExpression _2795___mcc_h210 = _source20.dtor_expr;
        BigInteger _2796___mcc_h211 = _source20.dtor_index;
        BigInteger _2797_idx = _2796___mcc_h211;
        DAST._IExpression _2798_on = _2795___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2799_onString;
          bool _2800___v86;
          bool _2801_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1641;
          bool _out1642;
          bool _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          DCOMP.COMP.GenExpr(_2798_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
          _2799_onString = _out1641;
          _2800___v86 = _out1642;
          _2801_tupErased = _out1643;
          _2802_recIdents = _out1644;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_2797_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2801_tupErased;
          readIdents = _2802_recIdents;
        }
      } else if (_source20.is_Call) {
        DAST._IExpression _2803___mcc_h212 = _source20.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2804___mcc_h213 = _source20.dtor_name;
        Dafny.ISequence<DAST._IType> _2805___mcc_h214 = _source20.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2806___mcc_h215 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2807_args = _2806___mcc_h215;
        Dafny.ISequence<DAST._IType> _2808_typeArgs = _2805___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2809_name = _2804___mcc_h213;
        DAST._IExpression _2810_on = _2803___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2811_typeArgString;
          _2811_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2808_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2812_typeI;
            _2812_typeI = BigInteger.Zero;
            _2811_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2812_typeI) < (new BigInteger((_2808_typeArgs).Count))) {
              if ((_2812_typeI).Sign == 1) {
                _2811_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2811_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2813_typeString;
              Dafny.ISequence<Dafny.Rune> _out1645;
              _out1645 = DCOMP.COMP.GenType((_2808_typeArgs).Select(_2812_typeI), false, false);
              _2813_typeString = _out1645;
              _2811_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2811_typeArgString, _2813_typeString);
              _2812_typeI = (_2812_typeI) + (BigInteger.One);
            }
            _2811_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2811_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2814_argString;
          _2814_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2815_i;
          _2815_i = BigInteger.Zero;
          while ((_2815_i) < (new BigInteger((_2807_args).Count))) {
            if ((_2815_i).Sign == 1) {
              _2814_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2814_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2816_argExpr;
            bool _2817_isOwned;
            bool _2818_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2819_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr((_2807_args).Select(_2815_i), selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _2816_argExpr = _out1646;
            _2817_isOwned = _out1647;
            _2818_argErased = _out1648;
            _2819_argIdents = _out1649;
            if (_2817_isOwned) {
              _2816_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2816_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2818_argErased)) {
              _2816_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2816_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2816_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2816_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2814_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2814_argString, _2816_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2819_argIdents);
            _2815_i = (_2815_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2820_enclosingString;
          bool _2821___v87;
          bool _2822___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2823_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2810_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2820_enclosingString = _out1650;
          _2821___v87 = _out1651;
          _2822___v88 = _out1652;
          _2823_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2823_recIdents);
          DAST._IExpression _source85 = _2810_on;
          if (_source85.is_Literal) {
            DAST._ILiteral _2824___mcc_h1199 = _source85.dtor_Literal_a0;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2825___mcc_h1201 = _source85.dtor_Ident_a0;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2826___mcc_h1203 = _source85.dtor_Companion_a0;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2820_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2827___mcc_h1205 = _source85.dtor_Tuple_a0;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2828___mcc_h1207 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2829___mcc_h1208 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2830___mcc_h1209 = _source85.dtor_args;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2831___mcc_h1213 = _source85.dtor_dims;
            DAST._IType _2832___mcc_h1214 = _source85.dtor_typ;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2833___mcc_h1217 = _source85.dtor_path;
            Dafny.ISequence<DAST._IType> _2834___mcc_h1218 = _source85.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2835___mcc_h1219 = _source85.dtor_variant;
            bool _2836___mcc_h1220 = _source85.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2837___mcc_h1221 = _source85.dtor_contents;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Convert) {
            DAST._IExpression _2838___mcc_h1227 = _source85.dtor_value;
            DAST._IType _2839___mcc_h1228 = _source85.dtor_from;
            DAST._IType _2840___mcc_h1229 = _source85.dtor_typ;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SeqConstruct) {
            DAST._IExpression _2841___mcc_h1233 = _source85.dtor_length;
            DAST._IExpression _2842___mcc_h1234 = _source85.dtor_elem;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2843___mcc_h1237 = _source85.dtor_elements;
            DAST._IType _2844___mcc_h1238 = _source85.dtor_typ;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2845___mcc_h1241 = _source85.dtor_elements;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2846___mcc_h1243 = _source85.dtor_mapElems;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_This) {
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Ite) {
            DAST._IExpression _2847___mcc_h1245 = _source85.dtor_cond;
            DAST._IExpression _2848___mcc_h1246 = _source85.dtor_thn;
            DAST._IExpression _2849___mcc_h1247 = _source85.dtor_els;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_UnOp) {
            DAST._IUnaryOp _2850___mcc_h1251 = _source85.dtor_unOp;
            DAST._IExpression _2851___mcc_h1252 = _source85.dtor_expr;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_BinOp) {
            DAST._IBinOp _2852___mcc_h1255 = _source85.dtor_op;
            DAST._IExpression _2853___mcc_h1256 = _source85.dtor_left;
            DAST._IExpression _2854___mcc_h1257 = _source85.dtor_right;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_ArrayLen) {
            DAST._IExpression _2855___mcc_h1261 = _source85.dtor_expr;
            BigInteger _2856___mcc_h1262 = _source85.dtor_dim;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Select) {
            DAST._IExpression _2857___mcc_h1265 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2858___mcc_h1266 = _source85.dtor_field;
            bool _2859___mcc_h1267 = _source85.dtor_isConstant;
            bool _2860___mcc_h1268 = _source85.dtor_onDatatype;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SelectFn) {
            DAST._IExpression _2861___mcc_h1273 = _source85.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2862___mcc_h1274 = _source85.dtor_field;
            bool _2863___mcc_h1275 = _source85.dtor_onDatatype;
            bool _2864___mcc_h1276 = _source85.dtor_isStatic;
            BigInteger _2865___mcc_h1277 = _source85.dtor_arity;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Index) {
            DAST._IExpression _2866___mcc_h1283 = _source85.dtor_expr;
            DAST._ICollKind _2867___mcc_h1284 = _source85.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2868___mcc_h1285 = _source85.dtor_indices;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_IndexRange) {
            DAST._IExpression _2869___mcc_h1289 = _source85.dtor_expr;
            bool _2870___mcc_h1290 = _source85.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2871___mcc_h1291 = _source85.dtor_low;
            DAST._IOptional<DAST._IExpression> _2872___mcc_h1292 = _source85.dtor_high;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_TupleSelect) {
            DAST._IExpression _2873___mcc_h1297 = _source85.dtor_expr;
            BigInteger _2874___mcc_h1298 = _source85.dtor_index;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Call) {
            DAST._IExpression _2875___mcc_h1301 = _source85.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2876___mcc_h1302 = _source85.dtor_name;
            Dafny.ISequence<DAST._IType> _2877___mcc_h1303 = _source85.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2878___mcc_h1304 = _source85.dtor_args;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2879___mcc_h1309 = _source85.dtor_params;
            DAST._IType _2880___mcc_h1310 = _source85.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2881___mcc_h1311 = _source85.dtor_body;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2882___mcc_h1315 = _source85.dtor_values;
            DAST._IType _2883___mcc_h1316 = _source85.dtor_retType;
            DAST._IExpression _2884___mcc_h1317 = _source85.dtor_expr;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2885___mcc_h1321 = _source85.dtor_name;
            DAST._IType _2886___mcc_h1322 = _source85.dtor_typ;
            DAST._IExpression _2887___mcc_h1323 = _source85.dtor_value;
            DAST._IExpression _2888___mcc_h1324 = _source85.dtor_iifeBody;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_Apply) {
            DAST._IExpression _2889___mcc_h1329 = _source85.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2890___mcc_h1330 = _source85.dtor_args;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_TypeTest) {
            DAST._IExpression _2891___mcc_h1333 = _source85.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2892___mcc_h1334 = _source85.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2893___mcc_h1335 = _source85.dtor_variant;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_InitializationValue) {
            DAST._IType _2894___mcc_h1339 = _source85.dtor_typ;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_BoolBoundedPool) {
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SetBoundedPool) {
            DAST._IExpression _2895___mcc_h1341 = _source85.dtor_of;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else if (_source85.is_SeqBoundedPool) {
            DAST._IExpression _2896___mcc_h1343 = _source85.dtor_of;
            bool _2897___mcc_h1344 = _source85.dtor_includeDuplicates;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          } else {
            DAST._IExpression _2898___mcc_h1347 = _source85.dtor_lo;
            DAST._IExpression _2899___mcc_h1348 = _source85.dtor_hi;
            {
              _2820_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2809_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2820_enclosingString, _2811_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2814_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2900___mcc_h216 = _source20.dtor_params;
        DAST._IType _2901___mcc_h217 = _source20.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2902___mcc_h218 = _source20.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2903_body = _2902___mcc_h218;
        DAST._IType _2904_retType = _2901___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2905_params = _2900___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2906_paramNames;
          _2906_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2907_i;
          _2907_i = BigInteger.Zero;
          while ((_2907_i) < (new BigInteger((_2905_params).Count))) {
            _2906_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2906_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2905_params).Select(_2907_i)).dtor_name));
            _2907_i = (_2907_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2908_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2909_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          DCOMP.COMP.GenStmts(_2903_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _2906_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1654, out _out1655);
          _2908_recursiveGen = _out1654;
          _2909_recIdents = _out1655;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2910_allReadCloned;
          _2910_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2909_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2911_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2909_recIdents).Elements) {
              _2911_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2909_recIdents).Contains(_2911_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1924)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_2911_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _2910_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_2910_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_2906_paramNames).Contains(_2911_next))) {
              _2910_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2910_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2911_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2911_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2911_next));
            }
            _2909_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2909_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2911_next));
          }
          Dafny.ISequence<Dafny.Rune> _2912_paramsString;
          _2912_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2913_paramTypes;
          _2913_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2907_i = BigInteger.Zero;
          while ((_2907_i) < (new BigInteger((_2905_params).Count))) {
            if ((_2907_i).Sign == 1) {
              _2912_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2912_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2913_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2913_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2914_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType(((_2905_params).Select(_2907_i)).dtor_typ, false, true);
            _2914_typStr = _out1656;
            _2912_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2912_paramsString, ((_2905_params).Select(_2907_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2914_typStr);
            _2913_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2913_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2914_typStr);
            _2907_i = (_2907_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2915_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1657;
          _out1657 = DCOMP.COMP.GenType(_2904_retType, false, true);
          _2915_retTypeGen = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2913_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2915_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2910_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2912_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2915_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2908_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2916___mcc_h219 = _source20.dtor_values;
        DAST._IType _2917___mcc_h220 = _source20.dtor_retType;
        DAST._IExpression _2918___mcc_h221 = _source20.dtor_expr;
        DAST._IExpression _2919_expr = _2918___mcc_h221;
        DAST._IType _2920_retType = _2917___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2921_values = _2916___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2922_paramNames;
          _2922_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2923_paramNamesSet;
          _2923_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2924_i;
          _2924_i = BigInteger.Zero;
          while ((_2924_i) < (new BigInteger((_2921_values).Count))) {
            _2922_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2922_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2921_values).Select(_2924_i)).dtor__0).dtor_name));
            _2923_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2923_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2921_values).Select(_2924_i)).dtor__0).dtor_name));
            _2924_i = (_2924_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2925_paramsString;
          _2925_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2924_i = BigInteger.Zero;
          while ((_2924_i) < (new BigInteger((_2921_values).Count))) {
            if ((_2924_i).Sign == 1) {
              _2925_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2925_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2926_typStr;
            Dafny.ISequence<Dafny.Rune> _out1658;
            _out1658 = DCOMP.COMP.GenType((((_2921_values).Select(_2924_i)).dtor__0).dtor_typ, false, true);
            _2926_typStr = _out1658;
            Dafny.ISequence<Dafny.Rune> _2927_valueGen;
            bool _2928___v91;
            bool _2929_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2930_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(((_2921_values).Select(_2924_i)).dtor__1, selfIdent, @params, true, out _out1659, out _out1660, out _out1661, out _out1662);
            _2927_valueGen = _out1659;
            _2928___v91 = _out1660;
            _2929_valueErased = _out1661;
            _2930_recIdents = _out1662;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_2921_values).Select(_2924_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2926_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2930_recIdents);
            if (_2929_valueErased) {
              _2927_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2927_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2927_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2924_i = (_2924_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2931_recGen;
          bool _2932_recOwned;
          bool _2933_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2934_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_2919_expr, selfIdent, _2922_paramNames, mustOwn, out _out1663, out _out1664, out _out1665, out _out1666);
          _2931_recGen = _out1663;
          _2932_recOwned = _out1664;
          _2933_recErased = _out1665;
          _2934_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2934_recIdents, _2923_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2931_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2932_recOwned;
          isErased = _2933_recErased;
        }
      } else if (_source20.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2935___mcc_h222 = _source20.dtor_name;
        DAST._IType _2936___mcc_h223 = _source20.dtor_typ;
        DAST._IExpression _2937___mcc_h224 = _source20.dtor_value;
        DAST._IExpression _2938___mcc_h225 = _source20.dtor_iifeBody;
        DAST._IExpression _2939_iifeBody = _2938___mcc_h225;
        DAST._IExpression _2940_value = _2937___mcc_h224;
        DAST._IType _2941_tpe = _2936___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2942_name = _2935___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2943_valueGen;
          bool _2944___v92;
          bool _2945_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2946_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_2940_value, selfIdent, @params, true, out _out1667, out _out1668, out _out1669, out _out1670);
          _2943_valueGen = _out1667;
          _2944___v92 = _out1668;
          _2945_valueErased = _out1669;
          _2946_recIdents = _out1670;
          if (_2945_valueErased) {
            _2943_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2943_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2946_recIdents;
          Dafny.ISequence<Dafny.Rune> _2947_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1671;
          _out1671 = DCOMP.COMP.GenType(_2941_tpe, false, true);
          _2947_valueTypeGen = _out1671;
          Dafny.ISequence<Dafny.Rune> _2948_bodyGen;
          bool _2949___v93;
          bool _2950_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2951_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_2939_iifeBody, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
          _2948_bodyGen = _out1672;
          _2949___v93 = _out1673;
          _2950_bodyErased = _out1674;
          _2951_bodyIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2951_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2942_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_2942_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2947_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2943_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2948_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2950_bodyErased;
        }
      } else if (_source20.is_Apply) {
        DAST._IExpression _2952___mcc_h226 = _source20.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2953___mcc_h227 = _source20.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2954_args = _2953___mcc_h227;
        DAST._IExpression _2955_func = _2952___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2956_funcString;
          bool _2957___v94;
          bool _2958_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2959_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_2955_func, selfIdent, @params, false, out _out1676, out _out1677, out _out1678, out _out1679);
          _2956_funcString = _out1676;
          _2957___v94 = _out1677;
          _2958_funcErased = _out1678;
          _2959_recIdents = _out1679;
          readIdents = _2959_recIdents;
          Dafny.ISequence<Dafny.Rune> _2960_argString;
          _2960_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2961_i;
          _2961_i = BigInteger.Zero;
          while ((_2961_i) < (new BigInteger((_2954_args).Count))) {
            if ((_2961_i).Sign == 1) {
              _2960_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2960_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2962_argExpr;
            bool _2963_isOwned;
            bool _2964_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1680;
            bool _out1681;
            bool _out1682;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
            DCOMP.COMP.GenExpr((_2954_args).Select(_2961_i), selfIdent, @params, false, out _out1680, out _out1681, out _out1682, out _out1683);
            _2962_argExpr = _out1680;
            _2963_isOwned = _out1681;
            _2964_argErased = _out1682;
            _2965_argIdents = _out1683;
            if (_2963_isOwned) {
              _2962_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2962_argExpr);
            }
            _2960_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2960_argString, _2962_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2965_argIdents);
            _2961_i = (_2961_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2956_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2960_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source20.is_TypeTest) {
        DAST._IExpression _2966___mcc_h228 = _source20.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2967___mcc_h229 = _source20.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _2968___mcc_h230 = _source20.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _2969_variant = _2968___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2970_dType = _2967___mcc_h229;
        DAST._IExpression _2971_on = _2966___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _2972_exprGen;
          bool _2973___v95;
          bool _2974_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1684;
          bool _out1685;
          bool _out1686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
          DCOMP.COMP.GenExpr(_2971_on, selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
          _2972_exprGen = _out1684;
          _2973___v95 = _out1685;
          _2974_exprErased = _out1686;
          _2975_recIdents = _out1687;
          Dafny.ISequence<Dafny.Rune> _2976_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1688;
          _out1688 = DCOMP.COMP.GenPath(_2970_dType);
          _2976_dTypePath = _out1688;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _2972_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _2976_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2969_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _2975_recIdents;
        }
      } else if (_source20.is_InitializationValue) {
        DAST._IType _2977___mcc_h231 = _source20.dtor_typ;
        DAST._IType _2978_typ = _2977___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _2979_typString;
          Dafny.ISequence<Dafny.Rune> _out1689;
          _out1689 = DCOMP.COMP.GenType(_2978_typ, false, false);
          _2979_typString = _out1689;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2979_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source20.is_SetBoundedPool) {
        DAST._IExpression _2980___mcc_h232 = _source20.dtor_of;
        DAST._IExpression _2981_of = _2980___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _2982_exprGen;
          bool _2983___v96;
          bool _2984_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2985_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          bool _out1691;
          bool _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenExpr(_2981_of, selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
          _2982_exprGen = _out1690;
          _2983___v96 = _out1691;
          _2984_exprErased = _out1692;
          _2985_recIdents = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2982_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _2984_exprErased;
          readIdents = _2985_recIdents;
        }
      } else if (_source20.is_SeqBoundedPool) {
        DAST._IExpression _2986___mcc_h233 = _source20.dtor_of;
        bool _2987___mcc_h234 = _source20.dtor_includeDuplicates;
        bool _2988_includeDuplicates = _2987___mcc_h234;
        DAST._IExpression _2989_of = _2986___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _2990_exprGen;
          bool _2991___v97;
          bool _2992_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2993_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1694;
          bool _out1695;
          bool _out1696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
          DCOMP.COMP.GenExpr(_2989_of, selfIdent, @params, false, out _out1694, out _out1695, out _out1696, out _out1697);
          _2990_exprGen = _out1694;
          _2991___v97 = _out1695;
          _2992_exprErased = _out1696;
          _2993_recIdents = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2990_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_2988_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _2992_exprErased;
          readIdents = _2993_recIdents;
        }
      } else {
        DAST._IExpression _2994___mcc_h235 = _source20.dtor_lo;
        DAST._IExpression _2995___mcc_h236 = _source20.dtor_hi;
        DAST._IExpression _2996_hi = _2995___mcc_h236;
        DAST._IExpression _2997_lo = _2994___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _2998_loString;
          bool _2999___v98;
          bool _3000_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3001_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_2997_lo, selfIdent, @params, true, out _out1698, out _out1699, out _out1700, out _out1701);
          _2998_loString = _out1698;
          _2999___v98 = _out1699;
          _3000_loErased = _out1700;
          _3001_recIdentsLo = _out1701;
          Dafny.ISequence<Dafny.Rune> _3002_hiString;
          bool _3003___v99;
          bool _3004_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3005_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1702;
          bool _out1703;
          bool _out1704;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
          DCOMP.COMP.GenExpr(_2996_hi, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
          _3002_hiString = _out1702;
          _3003___v99 = _out1703;
          _3004_hiErased = _out1704;
          _3005_recIdentsHi = _out1705;
          if (!(_3000_loErased)) {
            _2998_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2998_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3004_hiErased)) {
            _3002_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3002_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _2998_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3002_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3001_recIdentsLo, _3005_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3006_i;
      _3006_i = BigInteger.Zero;
      while ((_3006_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3007_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1706;
        _out1706 = DCOMP.COMP.GenModule((p).Select(_3006_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3007_generated = _out1706;
        if ((_3006_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3007_generated);
        _3006_i = (_3006_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3008_i;
      _3008_i = BigInteger.Zero;
      while ((_3008_i) < (new BigInteger((fullName).Count))) {
        if ((_3008_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3008_i));
        _3008_i = (_3008_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

